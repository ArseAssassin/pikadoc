[
    {
        "comment": "/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.T\n * @example\n *\n *      R.F(); //=> false\n */",
        "meta": {
            "range": [
                268,
                303
            ],
            "filename": "F.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000003",
                "name": "F",
                "type": "FunctionExpression"
            }
        },
        "description": "A function that always returns `false`. Any passed in parameters are ignored.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "* -> Boolean",
                "value": "* -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.T"
        ],
        "examples": [
            "R.F(); //=> false"
        ],
        "name": "F",
        "longname": "R.F",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                306,
                324
            ],
            "filename": "F.js",
            "lineno": 20,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000010",
                "name": "module.exports",
                "type": "Identifier",
                "value": "F",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.F\n * @example\n *\n *      R.T(); //=> true\n */",
        "meta": {
            "range": [
                266,
                300
            ],
            "filename": "T.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000018",
                "name": "T",
                "type": "FunctionExpression"
            }
        },
        "description": "A function that always returns `true`. Any passed in parameters are ignored.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "* -> Boolean",
                "value": "* -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.F"
        ],
        "examples": [
            "R.T(); //=> true"
        ],
        "name": "T",
        "longname": "R.T",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                303,
                321
            ],
            "filename": "T.js",
            "lineno": 20,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000025",
                "name": "module.exports",
                "type": "Identifier",
                "value": "T",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "add.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000033",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */",
        "meta": {
            "range": [
                359,
                442
            ],
            "filename": "add.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000039",
                "name": "add",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Adds two values.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> Number",
                "value": "Number -> Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "see": [
            "R.subtract"
        ],
        "examples": [
            "R.add(2, 3);       //=>  5\n     R.add(7)(10);      //=> 17"
        ],
        "name": "add",
        "longname": "R.add",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                445,
                465
            ],
            "filename": "add.js",
            "lineno": 29,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000057",
                "name": "module.exports",
                "type": "Identifier",
                "value": "add",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "addIndex.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000065",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "addIndex.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000071",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                130,
                175
            ],
            "filename": "addIndex.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000077",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig (((a ...) -> b) ... -> [a] -> *) -> (((a ..., Int, [a]) -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */",
        "meta": {
            "range": [
                1282,
                1720
            ],
            "filename": "addIndex.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000083",
                "name": "addIndex",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new list iteration function from an existing one by adding two new\nparameters to its callback function: the current index, and the entire list.\n\nThis would turn, for instance, [`R.map`](#map) function into one that\nmore closely resembles `Array.prototype.map`. Note that this will only work\nfor functions in which the iteration callback function is the first\nparameter, and where the list is the last parameter. (This latter might be\nunimportant if the list parameter is not used.)",
        "kind": "function",
        "memberof": "R",
        "since": "v0.15.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(((a ...) -> b) ... -> [a] -> *) -> (((a ..., Int, [a]) -> b) ... -> [a] -> *)",
                "value": "(((a ...) -> b) ... -> [a] -> *) -> (((a ..., Int, [a]) -> b) ... -> [a] -> *)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A list iteration function that does not pass index or list to its callback",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An altered list iteration function that passes (item, index, list) to its callback"
            }
        ],
        "examples": [
            "const mapIndexed = R.addIndex(R.map);\n     mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']"
        ],
        "name": "addIndex",
        "longname": "R.addIndex",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1388,
                1395
            ],
            "filename": "addIndex.js",
            "lineno": 42,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000100",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1405,
                1426
            ],
            "filename": "addIndex.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000104",
                "name": "origFn",
                "type": "MemberExpression",
                "value": "arguments[0]"
            }
        },
        "undocumented": true,
        "name": "origFn",
        "longname": "<anonymous>~origFn",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1436,
                1474
            ],
            "filename": "addIndex.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000110",
                "name": "list",
                "type": "MemberExpression",
                "value": "arguments[undefined]"
            }
        },
        "undocumented": true,
        "name": "list",
        "longname": "<anonymous>~list",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1484,
                1531
            ],
            "filename": "addIndex.js",
            "lineno": 45,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000120",
                "name": "args",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1538,
                1676
            ],
            "filename": "addIndex.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000133",
                "name": "args[0]",
                "type": "FunctionExpression",
                "funcscope": "<anonymous>",
                "paramnames": []
            },
            "vars": {
                "result": "<anonymous>~args.0]~result",
                "idx": "<anonymous>~args.0]~idx"
            }
        },
        "undocumented": true,
        "name": "0]",
        "longname": "<anonymous>~args.0]",
        "kind": "function",
        "memberof": "<anonymous>~args",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1572,
                1632
            ],
            "filename": "addIndex.js",
            "lineno": 48,
            "columnno": 10,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000140",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~args.0]~result",
        "kind": "member",
        "memberof": "<anonymous>~args.0]",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1640,
                1648
            ],
            "filename": "addIndex.js",
            "lineno": 49,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000154",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>~args.0]",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~args.0]~idx",
        "kind": "member",
        "memberof": "<anonymous>~args.0]",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1723,
                1748
            ],
            "filename": "addIndex.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000167",
                "name": "module.exports",
                "type": "Identifier",
                "value": "addIndex",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "addIndexRight.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000175",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "addIndexRight.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000181",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                130,
                175
            ],
            "filename": "addIndexRight.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000187",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * As with `addIndex`, `addIndexRight` creates a new list iteration function\n * from an existing one by adding two new parameters to its callback function:\n * the current index, and the entire list.\n *\n * Unlike `addIndex`, `addIndexRight` iterates from the right to the left.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const revmap = (fn, ary) => R.map(fn, R.reverse(ary));\n *      const revmapIndexed = R.addIndexRight(revmap);\n *      revmapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> [ '5-r', '4-a', '3-b', '2-o', '1-o', '0-f' ]\n */",
        "meta": {
            "range": [
                1116,
                1573
            ],
            "filename": "addIndexRight.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000193",
                "name": "addIndexRight",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "As with `addIndex`, `addIndexRight` creates a new list iteration function\nfrom an existing one by adding two new parameters to its callback function:\nthe current index, and the entire list.\n\nUnlike `addIndex`, `addIndexRight` iterates from the right to the left.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.29.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)",
                "value": "((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A list iteration function that does not pass index or list to its callback",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An altered list iteration function that passes (item, index, list) to its callback"
            }
        ],
        "examples": [
            "const revmap = (fn, ary) => R.map(fn, R.reverse(ary));\n     const revmapIndexed = R.addIndexRight(revmap);\n     revmapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     //=> [ '5-r', '4-a', '3-b', '2-o', '1-o', '0-f' ]"
        ],
        "name": "addIndexRight",
        "longname": "R.addIndexRight",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1227,
                1248
            ],
            "filename": "addIndexRight.js",
            "lineno": 40,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000210",
                "name": "origFn",
                "type": "MemberExpression",
                "value": "arguments[0]"
            }
        },
        "undocumented": true,
        "name": "origFn",
        "longname": "<anonymous>~origFn",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1258,
                1296
            ],
            "filename": "addIndexRight.js",
            "lineno": 41,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000216",
                "name": "list",
                "type": "MemberExpression",
                "value": "arguments[undefined]"
            }
        },
        "undocumented": true,
        "name": "list",
        "longname": "<anonymous>~list",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1306,
                1327
            ],
            "filename": "addIndexRight.js",
            "lineno": 42,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000226",
                "name": "idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1337,
                1384
            ],
            "filename": "addIndexRight.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000234",
                "name": "args",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1391,
                1529
            ],
            "filename": "addIndexRight.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000247",
                "name": "args[0]",
                "type": "FunctionExpression",
                "funcscope": "<anonymous>",
                "paramnames": []
            },
            "vars": {
                "result": "<anonymous>~args.0]~result",
                "idx": "<anonymous>~args.0]~idx"
            }
        },
        "undocumented": true,
        "name": "0]",
        "longname": "<anonymous>~args.0]",
        "kind": "function",
        "memberof": "<anonymous>~args",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1425,
                1485
            ],
            "filename": "addIndexRight.js",
            "lineno": 46,
            "columnno": 10,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000254",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~args.0]~result",
        "kind": "member",
        "memberof": "<anonymous>~args.0]",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1493,
                1501
            ],
            "filename": "addIndexRight.js",
            "lineno": 47,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000268",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>~args.0]",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~args.0]~idx",
        "kind": "member",
        "memberof": "<anonymous>~args.0]",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1576,
                1606
            ],
            "filename": "addIndexRight.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000281",
                "name": "module.exports",
                "type": "Identifier",
                "value": "addIndexRight",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "adjust.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000289",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "adjust.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000295",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> (a -> a) -> [a] -> [a]\n * @param {Number} idx The index.\n * @param {Function} fn The function to apply.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']\n *      R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']\n * @symb R.adjust(-1, f, [a, b]) = [a, f(b)]\n * @symb R.adjust(0, f, [a, b]) = [f(a), b]\n */",
        "meta": {
            "range": [
                1117,
                1376
            ],
            "filename": "adjust.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000301",
                "name": "adjust",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Applies a function to the value at the given index of an array, returning a\nnew copy of the array with the element at the given index replaced with the\nresult of the function application.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> (a -> a) -> [a] -> [a]",
                "value": "Number -> (a -> a) -> [a] -> [a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.adjust(-1, f, [a, b]) = [a, f(b)]",
                "value": "R.adjust(-1, f, [a, b]) = [a, f(b)]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.adjust(0, f, [a, b]) = [f(a), b]",
                "value": "R.adjust(0, f, [a, b]) = [f(a), b]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The index.",
                "name": "idx"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to apply.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "Arguments"
                    ]
                },
                "description": "An array-like object whose value\n       at the supplied index will be replaced.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A copy of the supplied array-like object with\n        the element at index `idx` replaced with the value\n        returned by applying `fn` to the existing element."
            }
        ],
        "see": [
            "R.update"
        ],
        "examples": [
            "R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']\n     R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']"
        ],
        "name": "adjust",
        "longname": "R.adjust",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1187,
                1204
            ],
            "filename": "adjust.js",
            "lineno": 38,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000312",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1269,
                1293
            ],
            "filename": "adjust.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000330",
                "name": "_idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_idx",
        "longname": "<anonymous>~_idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1302,
                1323
            ],
            "filename": "adjust.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000338",
                "name": "_list",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_list",
        "longname": "<anonymous>~_list",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1328,
                1356
            ],
            "filename": "adjust.js",
            "lineno": 48,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000344",
                "name": "_list[undefined]",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~_list.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~_list",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1379,
                1402
            ],
            "filename": "adjust.js",
            "lineno": 52,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000356",
                "name": "module.exports",
                "type": "Identifier",
                "value": "adjust",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "all.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000364",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "all.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000370",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                194
            ],
            "filename": "all.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000376",
                "name": "_xall",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xall",
        "longname": "_xall",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      const equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */",
        "meta": {
            "range": [
                948,
                1182
            ],
            "filename": "all.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000382",
                "name": "all",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if all elements of the list match the predicate, `false` if\nthere are any that don't.\n\nDispatches to the `all` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> Boolean",
                "value": "(a -> Boolean) -> [a] -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate function.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "`true` if the predicate is satisfied by every element, `false`\n        otherwise."
            }
        ],
        "see": [
            "R.any, R.none, R.transduce"
        ],
        "examples": [
            "const equals3 = R.equals(3);\n     R.all(equals3)([3, 3, 3, 3]); //=> true\n     R.all(equals3)([3, 3, 1, 3]); //=> false"
        ],
        "name": "all",
        "longname": "R.all",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1052,
                1059
            ],
            "filename": "all.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000397",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1149,
                1157
            ],
            "filename": "all.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000418",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1185,
                1205
            ],
            "filename": "all.js",
            "lineno": 56,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000424",
                "name": "module.exports",
                "type": "Identifier",
                "value": "all",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "allPass.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000432",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "allPass.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000438",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                158
            ],
            "filename": "allPass.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000444",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "max",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                165,
                208
            ],
            "filename": "allPass.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000450",
                "name": "pluck",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pluck",
        "longname": "pluck",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                215,
                260
            ],
            "filename": "allPass.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000456",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass, R.both\n * @example\n *\n *      const isQueen = R.propEq('Q', 'rank');\n *      const isSpade = R.propEq('♠︎', 'suit');\n *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */",
        "meta": {
            "range": [
                1108,
                1433
            ],
            "filename": "allPass.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000462",
                "name": "allPass",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a list of predicates and returns a predicate that returns true for a\ngiven list of arguments if every one of the provided predicates is satisfied\nby those arguments.\n\nThe function returned is a curried function whose arity matches that of the\nhighest-arity predicate.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[(*... -> Boolean)] -> (*... -> Boolean)",
                "value": "[(*... -> Boolean)] -> (*... -> Boolean)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of predicates to check",
                "name": "predicates"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The combined predicate"
            }
        ],
        "see": [
            "R.anyPass, R.both"
        ],
        "examples": [
            "const isQueen = R.propEq('Q', 'rank');\n     const isSpade = R.propEq('♠︎', 'suit');\n     const isQueenOfSpades = R.allPass([isQueen, isSpade]);\n\n     isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true"
        ],
        "name": "allPass",
        "longname": "R.allPass",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1244,
                1251
            ],
            "filename": "allPass.js",
            "lineno": 51,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000484",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1261,
                1279
            ],
            "filename": "allPass.js",
            "lineno": 52,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000488",
                "name": "len",
                "type": "MemberExpression",
                "value": "preds.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1391,
                1399
            ],
            "filename": "allPass.js",
            "lineno": 59,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000512",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1436,
                1460
            ],
            "filename": "allPass.js",
            "lineno": 66,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000518",
                "name": "module.exports",
                "type": "Identifier",
                "value": "allPass",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "always.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000526",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      const t = R.always('Tee');\n *      t(); //=> 'Tee'\n */",
        "meta": {
            "range": [
                598,
                698
            ],
            "filename": "always.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000532",
                "name": "always",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a function that always returns the given value. Note that for\nnon-primitives the value returned is a reference to the original value.\n\nThis function is known as `const`, `constant`, or `K` (for K combinator) in\nother languages and libraries.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> (* -> a)",
                "value": "a -> (* -> a)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to wrap in a function",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A Function :: * -> val."
            }
        ],
        "examples": [
            "const t = R.always('Tee');\n     t(); //=> 'Tee'"
        ],
        "name": "always",
        "longname": "R.always",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                701,
                724
            ],
            "filename": "always.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000546",
                "name": "module.exports",
                "type": "Identifier",
                "value": "always",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "and.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000554",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the first argument if it is falsy, otherwise the second argument.\n * Acts as the boolean `and` statement if both inputs are `Boolean`s.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any}\n * @see R.both, R.or\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */",
        "meta": {
            "range": [
                554,
                622
            ],
            "filename": "and.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000560",
                "name": "and",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the first argument if it is falsy, otherwise the second argument.\nActs as the boolean `and` statement if both inputs are `Boolean`s.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> b -> a | b",
                "value": "a -> b -> a | b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                }
            }
        ],
        "see": [
            "R.both, R.or"
        ],
        "examples": [
            "R.and(true, true); //=> true\n     R.and(true, false); //=> false\n     R.and(false, true); //=> false\n     R.and(false, false); //=> false"
        ],
        "name": "and",
        "longname": "R.and",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                625,
                645
            ],
            "filename": "and.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000574",
                "name": "module.exports",
                "type": "Identifier",
                "value": "and",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "andThen.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000582",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                137
            ],
            "filename": "andThen.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000588",
                "name": "_assertPromise",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_assertPromise",
        "longname": "_assertPromise",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the result of applying the onSuccess function to the value inside\n * a successfully resolved promise. This is useful for working with promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Function\n * @sig (a -> b) -> (Promise e a) -> (Promise e b)\n * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)\n * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(onSuccess)`\n * @see R.otherwise\n * @example\n *\n *      const makeQuery = email => ({ query: { email }});\n *      const fetchMember = request =>\n *        Promise.resolve({ firstName: 'Bob', lastName: 'Loblaw', id: 42 });\n *\n *      //getMemberName :: String -> Promise ({ firstName, lastName })\n *      const getMemberName = R.pipe(\n *        makeQuery,\n *        fetchMember,\n *        R.andThen(R.pick(['firstName', 'lastName']))\n *      );\n *\n *      getMemberName('bob@gmail.com').then(console.log);\n */",
        "meta": {
            "range": [
                1196,
                1308
            ],
            "filename": "andThen.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000594",
                "name": "andThen",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the result of applying the onSuccess function to the value inside\na successfully resolved promise. This is useful for working with promises\ninside function compositions.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.27.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> b) -> (Promise e a) -> (Promise e b)",
                "value": "(a -> b) -> (Promise e a) -> (Promise e b)"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> (Promise e b)) -> (Promise e a) -> (Promise e b)",
                "value": "(a -> (Promise e b)) -> (Promise e a) -> (Promise e b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to apply. Can return a value or a promise of a value.",
                "name": "onSuccess"
            },
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "name": "p"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "The result of calling `p.then(onSuccess)`"
            }
        ],
        "see": [
            "R.otherwise"
        ],
        "examples": [
            "const makeQuery = email => ({ query: { email }});\n     const fetchMember = request =>\n       Promise.resolve({ firstName: 'Bob', lastName: 'Loblaw', id: 42 });\n\n     //getMemberName :: String -> Promise ({ firstName, lastName })\n     const getMemberName = R.pipe(\n       makeQuery,\n       fetchMember,\n       R.andThen(R.pick(['firstName', 'lastName']))\n     );\n\n     getMemberName('bob@gmail.com').then(console.log);"
        ],
        "name": "andThen",
        "longname": "R.andThen",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1311,
                1335
            ],
            "filename": "andThen.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000615",
                "name": "module.exports",
                "type": "Identifier",
                "value": "andThen",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "any.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000623",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "any.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000629",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                194
            ],
            "filename": "any.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000635",
                "name": "_xany",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xany",
        "longname": "_xany",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if at least one of the elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      const lessThan0 = R.flip(R.lt)(0);\n *      const lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */",
        "meta": {
            "range": [
                994,
                1227
            ],
            "filename": "any.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000641",
                "name": "any",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if at least one of the elements of the list match the predicate,\n`false` otherwise.\n\nDispatches to the `any` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> Boolean",
                "value": "(a -> Boolean) -> [a] -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate function.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "`true` if the predicate is satisfied by at least one element, `false`\n        otherwise."
            }
        ],
        "see": [
            "R.all, R.none, R.transduce"
        ],
        "examples": [
            "const lessThan0 = R.flip(R.lt)(0);\n     const lessThan2 = R.flip(R.lt)(2);\n     R.any(lessThan0)([1, 2]); //=> false\n     R.any(lessThan2)([1, 2]); //=> true"
        ],
        "name": "any",
        "longname": "R.any",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1098,
                1105
            ],
            "filename": "any.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000656",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1193,
                1201
            ],
            "filename": "any.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000676",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1230,
                1250
            ],
            "filename": "any.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000682",
                "name": "module.exports",
                "type": "Identifier",
                "value": "any",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "anyPass.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000690",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "anyPass.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000696",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                158
            ],
            "filename": "anyPass.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000702",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "max",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                165,
                208
            ],
            "filename": "anyPass.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000708",
                "name": "pluck",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pluck",
        "longname": "pluck",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                215,
                260
            ],
            "filename": "anyPass.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000714",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass, R.either\n * @example\n *\n *      const isClub = R.propEq('♣', 'suit');\n *      const isSpade = R.propEq('♠', 'suit');\n *      const isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */",
        "meta": {
            "range": [
                1152,
                1476
            ],
            "filename": "anyPass.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000720",
                "name": "anyPass",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a list of predicates and returns a predicate that returns true for a\ngiven list of arguments if at least one of the provided predicates is\nsatisfied by those arguments.\n\nThe function returned is a curried function whose arity matches that of the\nhighest-arity predicate.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[(*... -> Boolean)] -> (*... -> Boolean)",
                "value": "[(*... -> Boolean)] -> (*... -> Boolean)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of predicates to check",
                "name": "predicates"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The combined predicate"
            }
        ],
        "see": [
            "R.allPass, R.either"
        ],
        "examples": [
            "const isClub = R.propEq('♣', 'suit');\n     const isSpade = R.propEq('♠', 'suit');\n     const isBlackCard = R.anyPass([isClub, isSpade]);\n\n     isBlackCard({rank: '10', suit: '♣'}); //=> true\n     isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n     isBlackCard({rank: 'Q', suit: '♦'}); //=> false"
        ],
        "name": "anyPass",
        "longname": "R.anyPass",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1288,
                1295
            ],
            "filename": "anyPass.js",
            "lineno": 52,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000742",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1305,
                1323
            ],
            "filename": "anyPass.js",
            "lineno": 53,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000746",
                "name": "len",
                "type": "MemberExpression",
                "value": "preds.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1433,
                1441
            ],
            "filename": "anyPass.js",
            "lineno": 60,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000769",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1479,
                1503
            ],
            "filename": "anyPass.js",
            "lineno": 67,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000775",
                "name": "module.exports",
                "type": "Identifier",
                "value": "anyPass",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "ap.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000783",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "ap.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000789",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                130,
                186
            ],
            "filename": "ap.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000795",
                "name": "_reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_reduce",
        "longname": "_reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                193,
                232
            ],
            "filename": "ap.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000801",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the first argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @sig (r -> a -> b) -> (r -> a) -> (r -> b)\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n *\n *      // R.ap can also be used as S combinator\n *      // when only two functions are passed\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */",
        "meta": {
            "range": [
                1094,
                1474
            ],
            "filename": "ap.js",
            "lineno": 44,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000807",
                "name": "ap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "ap applies a list of functions to a list of values.\n\nDispatches to the `ap` method of the first argument, if present. Also\ntreats curried functions as applicatives.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a -> b] -> [a] -> [b]",
                "value": "[a -> b] -> [a] -> [b]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Apply f => f (a -> b) -> f a -> f b",
                "value": "Apply f => f (a -> b) -> f a -> f b"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(r -> a -> b) -> (r -> a) -> (r -> b)",
                "value": "(r -> a -> b) -> (r -> a) -> (r -> b)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]",
                "value": "R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "applyF"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "applyX"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "examples": [
            "R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n     R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n\n     // R.ap can also be used as S combinator\n     // when only two functions are passed\n     R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'"
        ],
        "name": "ap",
        "longname": "R.ap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1477,
                1496
            ],
            "filename": "ap.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000874",
                "name": "module.exports",
                "type": "Identifier",
                "value": "ap",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                64
            ],
            "filename": "aperture.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000882",
                "name": "_aperture",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_aperture",
        "longname": "_aperture",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                127
            ],
            "filename": "aperture.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000888",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                134,
                202
            ],
            "filename": "aperture.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000894",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                209,
                271
            ],
            "filename": "aperture.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000900",
                "name": "_xaperture",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xaperture",
        "longname": "_xaperture",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */",
        "meta": {
            "range": [
                1015,
                1104
            ],
            "filename": "aperture.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000906",
                "name": "aperture",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list, composed of n-tuples of consecutive elements. If `n` is\ngreater than the length of the list, an empty list is returned.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.12.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> [[a]]",
                "value": "Number -> [a] -> [[a]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The size of the tuples to create",
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to split into `n`-length tuples",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The resulting list of `n`-length tuples"
            }
        ],
        "see": [
            "R.transduce"
        ],
        "examples": [
            "R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n     R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n     R.aperture(7, [1, 2, 3, 4, 5]); //=> []"
        ],
        "name": "aperture",
        "longname": "R.aperture",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1107,
                1132
            ],
            "filename": "aperture.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000916",
                "name": "module.exports",
                "type": "Identifier",
                "value": "aperture",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "append.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000924",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "append.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000930",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */",
        "meta": {
            "range": [
                797,
                888
            ],
            "filename": "append.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000936",
                "name": "append",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list containing the contents of the given list, followed by\nthe given element.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> [a] -> [a]",
                "value": "a -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The element to add to the end of the new list.",
                "name": "el"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of elements to add a new item to.\n       list.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new list containing the elements of the old list followed by `el`."
            }
        ],
        "see": [
            "R.prepend"
        ],
        "examples": [
            "R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     R.append('tests', []); //=> ['tests']\n     R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]"
        ],
        "name": "append",
        "longname": "R.append",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                891,
                914
            ],
            "filename": "append.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000952",
                "name": "module.exports",
                "type": "Identifier",
                "value": "append",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "apply.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000960",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      const nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */",
        "meta": {
            "range": [
                730,
                820
            ],
            "filename": "apply.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000966",
                "name": "apply",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Applies function `fn` to the argument list `args`. This is useful for\ncreating a fixed-arity function from a variadic function. `fn` should be a\nbound function if context is significant.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.7.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(*... -> a) -> [*] -> a",
                "value": "(*... -> a) -> [*] -> a"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.apply(f, [a, b, c]) = f(a, b, c)",
                "value": "R.apply(f, [a, b, c]) = f(a, b, c)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function which will be called with `args`",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The arguments to call `fn` with",
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "result The result, equivalent to `fn(...args)`"
            }
        ],
        "see": [
            "R.call, R.unapply"
        ],
        "examples": [
            "const nums = [1, 2, 3, -99, 42, 6, 7];\n     R.apply(Math.max, nums); //=> 42"
        ],
        "name": "apply",
        "longname": "R.apply",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                823,
                845
            ],
            "filename": "apply.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000983",
                "name": "module.exports",
                "type": "Identifier",
                "value": "apply",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "applySpec.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000991",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "applySpec.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100000997",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                175
            ],
            "filename": "applySpec.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001003",
                "name": "apply",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "apply",
        "longname": "apply",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                182,
                227
            ],
            "filename": "applySpec.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001009",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                234,
                273
            ],
            "filename": "applySpec.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001015",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "max",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                280,
                323
            ],
            "filename": "applySpec.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001021",
                "name": "pluck",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pluck",
        "longname": "pluck",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                330,
                375
            ],
            "filename": "applySpec.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001027",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                382,
                423
            ],
            "filename": "applySpec.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001033",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                430,
                475
            ],
            "filename": "applySpec.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001039",
                "name": "values",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "values",
        "longname": "values",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                602,
                766
            ],
            "filename": "applySpec.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001044",
                "name": "mapValues",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fn",
                    "obj"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "mapValues",
        "longname": "mapValues",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                714,
                737
            ],
            "filename": "applySpec.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001070",
                "name": "acc[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc[undefined]",
        "longname": "acc[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      const getMetrics = R.applySpec({\n *        sum: R.add,\n *        nested: { mul: R.multiply }\n *      });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */",
        "meta": {
            "range": [
                1795,
                2146
            ],
            "filename": "applySpec.js",
            "lineno": 72,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001083",
                "name": "applySpec",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Given a spec object recursively mapping properties to functions, creates a\nfunction producing an object of the same structure, by mapping each property\nto the result of calling its associated function with the supplied arguments.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.20.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})",
                "value": "{k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }",
                "value": "R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "an object recursively mapping properties to functions for\n       producing the values for these properties.",
                "name": "spec"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that returns an object of the same structure\nas `spec', with each property set to the value returned by calling its\nassociated function with the supplied arguments."
            }
        ],
        "see": [
            "R.converge, R.juxt"
        ],
        "examples": [
            "const getMetrics = R.applySpec({\n       sum: R.add,\n       nested: { mul: R.multiply }\n     });\n     getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }"
        ],
        "name": "applySpec",
        "longname": "R.applySpec",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1858,
                1954
            ],
            "filename": "applySpec.js",
            "lineno": 75,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001092",
                "name": "spec",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "spec",
        "longname": "<anonymous>~spec",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2041,
                2057
            ],
            "filename": "applySpec.js",
            "lineno": 79,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001126",
                "name": "args",
                "type": "Identifier",
                "value": "arguments"
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2149,
                2175
            ],
            "filename": "applySpec.js",
            "lineno": 86,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001142",
                "name": "module.exports",
                "type": "Identifier",
                "value": "applySpec",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "applyTo.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001150",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a value and applies a function to it.\n *\n * This function is also known as the `thrush` combinator.\n *\n * @func\n * @memberOf R\n * @since v0.25.0\n * @category Function\n * @sig a -> (a -> b) -> b\n * @param {*} x The value\n * @param {Function} f The function to apply\n * @return {*} The result of applying `f` to `x`\n * @example\n *\n *      const t42 = R.applyTo(42);\n *      t42(R.identity); //=> 42\n *      t42(R.add(1)); //=> 43\n */",
        "meta": {
            "range": [
                513,
                587
            ],
            "filename": "applyTo.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001156",
                "name": "applyTo",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a value and applies a function to it.\n\nThis function is also known as the `thrush` combinator.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.25.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> (a -> b) -> b",
                "value": "a -> (a -> b) -> b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to apply",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The result of applying `f` to `x`"
            }
        ],
        "examples": [
            "const t42 = R.applyTo(42);\n     t42(R.identity); //=> 42\n     t42(R.add(1)); //=> 43"
        ],
        "name": "applyTo",
        "longname": "R.applyTo",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                590,
                614
            ],
            "filename": "applyTo.js",
            "lineno": 31,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001170",
                "name": "module.exports",
                "type": "Identifier",
                "value": "applyTo",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "ascend.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001178",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @see R.descend\n * @example\n *\n *      const byAge = R.ascend(R.prop('age'));\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByYoungestFirst = R.sort(byAge, people);\n *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]\n */",
        "meta": {
            "range": [
                968,
                1106
            ],
            "filename": "ascend.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001184",
                "name": "ascend",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Makes an ascending comparator function out of a function that returns a value\nthat can be compared with `<` and `>`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.23.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord b => (a -> b) -> a -> a -> Number",
                "value": "Ord b => (a -> b) -> a -> a -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function of arity one that returns a value that can be compared",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The first item to be compared.",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The second item to be compared.",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "`-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`"
            }
        ],
        "see": [
            "R.descend"
        ],
        "examples": [
            "const byAge = R.ascend(R.prop('age'));\n     const people = [\n       { name: 'Emma', age: 70 },\n       { name: 'Peter', age: 78 },\n       { name: 'Mikhail', age: 62 },\n     ];\n     const peopleByYoungestFirst = R.sort(byAge, people);\n       //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]"
        ],
        "name": "ascend",
        "longname": "R.ascend",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1033,
                1043
            ],
            "filename": "ascend.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001195",
                "name": "aa",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "aa",
        "longname": "<anonymous>~aa",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1051,
                1061
            ],
            "filename": "ascend.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001201",
                "name": "bb",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "bb",
        "longname": "<anonymous>~bb",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1109,
                1132
            ],
            "filename": "ascend.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001220",
                "name": "module.exports",
                "type": "Identifier",
                "value": "ascend",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "assoc.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001228",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                118
            ],
            "filename": "assoc.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001234",
                "name": "assocPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "assocPath",
        "longname": "assocPath",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig Idx -> a -> {k: v} -> {k: v}\n * @param {String|Number} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc, R.pick\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */",
        "meta": {
            "range": [
                848,
                951
            ],
            "filename": "assoc.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001240",
                "name": "assoc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value. Note that this copies and flattens prototype\nproperties onto the new object as well. All non-primitive properties are\ncopied by reference.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int",
                "value": "Idx = String | Int"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Idx -> a -> {k: v} -> {k: v}",
                "value": "Idx -> a -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Number"
                    ]
                },
                "description": "The property name to set",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The new value",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to clone",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A new object equivalent to the original except for the changed property."
            }
        ],
        "see": [
            "R.dissoc, R.pick"
        ],
        "examples": [
            "R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}"
        ],
        "name": "assoc",
        "longname": "R.assoc",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                954,
                976
            ],
            "filename": "assoc.js",
            "lineno": 37,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001258",
                "name": "module.exports",
                "type": "Identifier",
                "value": "assoc",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "assocPath.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001266",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "assocPath.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001272",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                186
            ],
            "filename": "assocPath.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001278",
                "name": "_isInteger",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isInteger",
        "longname": "_isInteger",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                193,
                247
            ],
            "filename": "assocPath.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001284",
                "name": "_assoc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_assoc",
        "longname": "_assoc",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                254,
                297
            ],
            "filename": "assocPath.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001290",
                "name": "isNil",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isNil",
        "longname": "isNil",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */",
        "meta": {
            "range": [
                1237,
                1638
            ],
            "filename": "assocPath.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001296",
                "name": "assocPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Makes a shallow clone of an object, setting or overriding the nodes required\nto create the given path, and placing the specific value at the tail end of\nthat path. Note that this copies and flattens prototype properties onto the\nnew object as well. All non-primitive properties are copied by reference.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Idx] -> a -> {a} -> {a}",
                "value": "[Idx] -> a -> {a} -> {a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "the path to set",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The new value",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to clone",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A new object equivalent to the original except along the specified path."
            }
        ],
        "see": [
            "R.dissocPath"
        ],
        "examples": [
            "R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n\n     // Any missing or non-object keys in path will be overridden\n     R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}"
        ],
        "name": "assocPath",
        "longname": "R.assocPath",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1362,
                1375
            ],
            "filename": "assocPath.js",
            "lineno": 53,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001316",
                "name": "idx",
                "type": "MemberExpression",
                "value": "path[0]"
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1411,
                1525
            ],
            "filename": "assocPath.js",
            "lineno": 56,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001329",
                "name": "nextObj",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nextObj",
        "longname": "<anonymous>~nextObj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1531,
                1597
            ],
            "filename": "assocPath.js",
            "lineno": 57,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001360",
                "name": "val",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1641,
                1667
            ],
            "filename": "assocPath.js",
            "lineno": 63,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001383",
                "name": "module.exports",
                "type": "Identifier",
                "value": "assocPath",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "binary.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001391",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "binary.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001397",
                "name": "nAry",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nAry",
        "longname": "nAry",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> ((a, b) -> z)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      const takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      const takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */",
        "meta": {
            "range": [
                1044,
                1121
            ],
            "filename": "binary.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001403",
                "name": "binary",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Wraps a function of any arity (including nullary) in a function that accepts\nexactly 2 parameters. Any extraneous parameters will not be passed to the\nsupplied function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> b -> c -> ... -> z) -> ((a, b) -> z)",
                "value": "(a -> b -> c -> ... -> z) -> ((a, b) -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.binary(f)(a, b, c) = f(a, b)",
                "value": "R.binary(f)(a, b, c) = f(a, b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to wrap.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new function wrapping `fn`. The new function is guaranteed to be of\n        arity 2."
            }
        ],
        "see": [
            "R.nAry, R.unary"
        ],
        "examples": [
            "const takesThreeArgs = function(a, b, c) {\n       return [a, b, c];\n     };\n     takesThreeArgs.length; //=> 3\n     takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n\n     const takesTwoArgs = R.binary(takesThreeArgs);\n     takesTwoArgs.length; //=> 2\n     // Only 2 arguments are passed to the wrapped function\n     takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]"
        ],
        "name": "binary",
        "longname": "R.binary",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1124,
                1147
            ],
            "filename": "binary.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001417",
                "name": "module.exports",
                "type": "Identifier",
                "value": "binary",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "bind.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001425",
                "name": "_arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arity",
        "longname": "_arity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "bind.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001431",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      const log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */",
        "meta": {
            "range": [
                943,
                1091
            ],
            "filename": "bind.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001437",
                "name": "bind",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a function that is bound to a context.\nNote: `R.bind` does not provide the additional argument-binding capabilities of\n[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.6.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(* -> *) -> {*} -> (* -> *)",
                "value": "(* -> *) -> {*} -> (* -> *)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.bind(f, o)(a, b) = f.call(o, a, b)",
                "value": "R.bind(f, o)(a, b) = f.call(o, a, b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to bind to context",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The context to bind `fn` to",
                "name": "thisObj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that will execute in the context of `thisObj`."
            }
        ],
        "see": [
            "R.partial"
        ],
        "examples": [
            "const log = R.bind(console.log, console);\n     R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n     // logs {a: 2}"
        ],
        "name": "bind",
        "longname": "R.bind",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1094,
                1115
            ],
            "filename": "bind.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001462",
                "name": "module.exports",
                "type": "Identifier",
                "value": "bind",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "both.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001470",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                131
            ],
            "filename": "both.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001476",
                "name": "_isFunction",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isFunction",
        "longname": "_isFunction",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                138,
                177
            ],
            "filename": "both.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001482",
                "name": "and",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "and",
        "longname": "and",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                184,
                225
            ],
            "filename": "both.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001488",
                "name": "lift",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lift",
        "longname": "lift",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.either, R.allPass, R.and\n * @example\n *\n *      const gt10 = R.gt(R.__, 10)\n *      const lt20 = R.lt(R.__, 20)\n *      const f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n *\n *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\n *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]\n */",
        "meta": {
            "range": [
                1361,
                1547
            ],
            "filename": "both.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001494",
                "name": "both",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "A function which calls the two provided functions and returns the `&&`\nof the results.\nIt returns the result of the first function if it is false-y and the result\nof the second function otherwise. Note that this is short-circuited,\nmeaning that the second function will not be invoked if the first returns a\nfalse-y value.\n\nIn addition to functions, `R.both` also accepts any fantasy-land compatible\napplicative functor.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.12.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)",
                "value": "(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Another predicate",
                "name": "g"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "a function that applies its arguments to `f` and `g` and `&&`s their outputs together."
            }
        ],
        "see": [
            "R.either, R.allPass, R.and"
        ],
        "examples": [
            "const gt10 = R.gt(R.__, 10)\n     const lt20 = R.lt(R.__, 20)\n     const f = R.both(gt10, lt20);\n     f(15); //=> true\n     f(30); //=> false\n\n     R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\n     R.both([false, false, 'a'], [11]); //=> [false, false, 11]"
        ],
        "name": "both",
        "longname": "R.both",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1550,
                1571
            ],
            "filename": "both.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001532",
                "name": "module.exports",
                "type": "Identifier",
                "value": "both",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "call.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001540",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig ((*... -> a), *...) -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(\n *        R.repeat(' '),\n *        R.join(''),\n *        R.replace(/^(?!$)/gm)\n *      );\n *\n *      const format = R.converge(\n *        R.call,\n *        [\n *          R.pipe(R.prop('indent'), indentN),\n *          R.prop('value')\n *        ]\n *      );\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */",
        "meta": {
            "range": [
                1112,
                1230
            ],
            "filename": "call.js",
            "lineno": 43,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001546",
                "name": "call",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the result of calling its first argument with the remaining\narguments. This is occasionally useful as a converging function for\n[`R.converge`](#converge): the first branch can produce a function while the\nremaining branches produce values to be passed to that function as its\narguments.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((*... -> a), *...) -> a",
                "value": "((*... -> a), *...) -> a"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.call(f, a, b) = f(a, b)",
                "value": "R.call(f, a, b) = f(a, b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to apply to the remaining arguments.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "variable": true,
                "description": "Any number of positional arguments.",
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.apply"
        ],
        "examples": [
            "R.call(R.add, 1, 2); //=> 3\n\n     const indentN = R.pipe(\n       R.repeat(' '),\n       R.join(''),\n       R.replace(/^(?!$)/gm)\n     );\n\n     const format = R.converge(\n       R.call,\n       [\n         R.pipe(R.prop('indent'), indentN),\n         R.prop('value')\n       ]\n     );\n\n     format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'"
        ],
        "name": "call",
        "longname": "R.call",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1233,
                1254
            ],
            "filename": "call.js",
            "lineno": 49,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001571",
                "name": "module.exports",
                "type": "Identifier",
                "value": "call",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "chain.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001579",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "chain.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001585",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                202
            ],
            "filename": "chain.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001591",
                "name": "_makeFlat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_makeFlat",
        "longname": "_makeFlat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                209,
                265
            ],
            "filename": "chain.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001597",
                "name": "_xchain",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xchain",
        "longname": "_xchain",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                272,
                311
            ],
            "filename": "chain.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001603",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries.\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      const duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */",
        "meta": {
            "range": [
                1230,
                1510
            ],
            "filename": "chain.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001609",
                "name": "chain",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "`chain` maps a function over a list and concatenates the results. `chain`\nis also known as `flatMap` in some libraries.\n\nDispatches to the `chain` method of the second argument, if present,\naccording to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n\nIf second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Chain m => (a -> m b) -> m a -> m b",
                "value": "Chain m => (a -> m b) -> m a -> m b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to map with",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to map over",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The result of flat-mapping `list` with `fn`"
            }
        ],
        "examples": [
            "const duplicate = n => [n, n];\n     R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n\n     R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]"
        ],
        "name": "chain",
        "longname": "R.chain",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1513,
                1535
            ],
            "filename": "chain.js",
            "lineno": 62,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001652",
                "name": "module.exports",
                "type": "Identifier",
                "value": "chain",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "clamp.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001660",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */",
        "meta": {
            "range": [
                707,
                936
            ],
            "filename": "clamp.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001666",
                "name": "clamp",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Restricts a number to be within a range.\n\nAlso works for other ordered types such as Strings and Dates.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.20.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord a => a -> a -> a -> a",
                "value": "Ord a => a -> a -> a -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The lower limit of the clamp (inclusive)",
                "name": "minimum"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The upper limit of the clamp (inclusive)",
                "name": "maximum"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Value to be clamped",
                "name": "value"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise"
            }
        ],
        "examples": [
            "R.clamp(1, 10, -5) // => 1\n     R.clamp(1, 10, 15) // => 10\n     R.clamp(1, 10, 4)  // => 4"
        ],
        "name": "clamp",
        "longname": "R.clamp",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                939,
                961
            ],
            "filename": "clamp.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001698",
                "name": "module.exports",
                "type": "Identifier",
                "value": "clamp",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "clone.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001706",
                "name": "_clone",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_clone",
        "longname": "_clone",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "clone.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001712",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a deep copy of the source that can be used in place of the source\n * object without retaining any references to it.\n * The source object may contain (nested) `Array`s and `Object`s,\n * `Number`s, `String`s, `Boolean`s and `Date`s.\n * `Function`s are assigned by reference rather than copied.\n *\n * Dispatches to a `clone` method if present.\n *\n * Note that if the source object has multiple nodes that share a reference,\n * the returned object will have the same structure, but the references will\n * be pointed to the location within the cloned value.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      const objects = [{}, {}, {}];\n *      const objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */",
        "meta": {
            "range": [
                1074,
                1229
            ],
            "filename": "clone.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001718",
                "name": "clone",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a deep copy of the source that can be used in place of the source\nobject without retaining any references to it.\nThe source object may contain (nested) `Array`s and `Object`s,\n`Number`s, `String`s, `Boolean`s and `Date`s.\n`Function`s are assigned by reference rather than copied.\n\nDispatches to a `clone` method if present.\n\nNote that if the source object has multiple nodes that share a reference,\nthe returned object will have the same structure, but the references will\nbe pointed to the location within the cloned value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{*} -> {*}",
                "value": "{*} -> {*}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The object or array to clone",
                "name": "value"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "A deeply cloned copy of `val`"
            }
        ],
        "examples": [
            "const objects = [{}, {}, {}];\n     const objectsClone = R.clone(objects);\n     objects === objectsClone; //=> false\n     objects[0] === objectsClone[0]; //=> false"
        ],
        "name": "clone",
        "longname": "R.clone",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1232,
                1254
            ],
            "filename": "clone.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001747",
                "name": "module.exports",
                "type": "Identifier",
                "value": "clone",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "collectBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001755",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "collectBy.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001761",
                "name": "_reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_reduce",
        "longname": "_reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Splits a list into sub-lists, based on the result of calling a key-returning function on each element,\n * and grouping the results according to values returned.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> [[b]]\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} list The array to group\n * @return {Array}\n *    An array of arrays where each sub-array contains items for which\n *    the String-returning function has returned the same value.\n * @see R.groupBy, R.partition\n * @example\n *      R.collectBy(R.prop('type'), [\n *        {type: 'breakfast', item: '☕️'},\n *        {type: 'lunch', item: '🌯'},\n *        {type: 'dinner', item: '🍝'},\n *        {type: 'breakfast', item: '🥐'},\n *        {type: 'lunch', item: '🍕'}\n *      ]);\n *\n *      // [ [ {type: 'breakfast', item: '☕️'},\n *      //     {type: 'breakfast', item: '🥐'} ],\n *      //   [ {type: 'lunch', item: '🌯'},\n *      //     {type: 'lunch', item: '🍕'} ],\n *      //   [ {type: 'dinner', item: '🍝'} ] ]\n */",
        "meta": {
            "range": [
                1226,
                1565
            ],
            "filename": "collectBy.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001767",
                "name": "collectBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Splits a list into sub-lists, based on the result of calling a key-returning function on each element,\nand grouping the results according to values returned.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Idx a => (b -> a) -> [b] -> [[b]]",
                "value": "Idx a => (b -> a) -> [b] -> [[b]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function :: a -> Idx",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to group",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of arrays where each sub-array contains items for which\n   the String-returning function has returned the same value."
            }
        ],
        "see": [
            "R.groupBy, R.partition"
        ],
        "examples": [
            "R.collectBy(R.prop('type'), [\n       {type: 'breakfast', item: '☕️'},\n       {type: 'lunch', item: '🌯'},\n       {type: 'dinner', item: '🍝'},\n       {type: 'breakfast', item: '🥐'},\n       {type: 'lunch', item: '🍕'}\n     ]);\n\n     // [ [ {type: 'breakfast', item: '☕️'},\n     //     {type: 'breakfast', item: '🥐'} ],\n     //   [ {type: 'lunch', item: '🌯'},\n     //     {type: 'lunch', item: '🍕'} ],\n     //   [ {type: 'dinner', item: '🍝'} ] ]"
        ],
        "name": "collectBy",
        "longname": "R.collectBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1297,
                1459
            ],
            "filename": "collectBy.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001777",
                "name": "group",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "group",
        "longname": "<anonymous>~group",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1339,
                1350
            ],
            "filename": "collectBy.js",
            "lineno": 45,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001786",
                "name": "tag",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "tag",
        "longname": "<anonymous>~tag",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1391,
                1402
            ],
            "filename": "collectBy.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001799",
                "name": "o[undefined]",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "o[undefined]",
        "longname": "o[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1468,
                1480
            ],
            "filename": "collectBy.js",
            "lineno": 55,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001817",
                "name": "newList",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "newList",
        "longname": "<anonymous>~newList",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1494,
                1497
            ],
            "filename": "collectBy.js",
            "lineno": 57,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001822",
                "name": "tag"
            }
        },
        "undocumented": true,
        "name": "tag",
        "longname": "<anonymous>~tag",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1568,
                1594
            ],
            "filename": "collectBy.js",
            "lineno": 64,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001837",
                "name": "module.exports",
                "type": "Identifier",
                "value": "collectBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "comparator.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001845",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      const byAge = R.comparator((a, b) => a.age < b.age);\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByIncreasingAge = R.sort(byAge, people);\n *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]\n */",
        "meta": {
            "range": [
                955,
                1101
            ],
            "filename": "comparator.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001851",
                "name": "comparator",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Makes a comparator function out of a function that reports whether the first\nelement is less than the second.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b) -> Boolean) -> ((a, b) -> Number)",
                "value": "((a, b) -> Boolean) -> ((a, b) -> Number)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate function of arity two which will return `true` if the first argument\nis less than the second, `false` otherwise",
                "name": "pred"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`"
            }
        ],
        "examples": [
            "const byAge = R.comparator((a, b) => a.age < b.age);\n     const people = [\n       { name: 'Emma', age: 70 },\n       { name: 'Peter', age: 78 },\n       { name: 'Mikhail', age: 62 },\n     ];\n     const peopleByIncreasingAge = R.sort(byAge, people);\n       //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]"
        ],
        "name": "comparator",
        "longname": "R.comparator",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1104,
                1131
            ],
            "filename": "comparator.js",
            "lineno": 37,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001880",
                "name": "module.exports",
                "type": "Identifier",
                "value": "comparator",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                45
            ],
            "filename": "complement.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001888",
                "name": "lift",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lift",
        "longname": "lift",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52,
                91
            ],
            "filename": "complement.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001894",
                "name": "not",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "not",
        "longname": "not",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * `R.complement` may be applied to any functor\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> *) -> (*... -> Boolean)\n * @param {Function} f\n * @return {Function}\n * @see R.not\n * @example\n *\n *      const isNotNil = R.complement(R.isNil);\n *      R.isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      R.isNil(7); //=> false\n *      isNotNil(7); //=> true\n */",
        "meta": {
            "range": [
                725,
                761
            ],
            "filename": "complement.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001900",
                "name": "complement",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function `f` and returns a function `g` such that if called with the same arguments\nwhen `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n\n`R.complement` may be applied to any functor",
        "kind": "function",
        "memberof": "R",
        "since": "v0.12.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(*... -> *) -> (*... -> Boolean)",
                "value": "(*... -> *) -> (*... -> Boolean)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.not"
        ],
        "examples": [
            "const isNotNil = R.complement(R.isNil);\n     R.isNil(null); //=> true\n     isNotNil(null); //=> false\n     R.isNil(7); //=> false\n     isNotNil(7); //=> true"
        ],
        "name": "complement",
        "longname": "R.complement",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                763,
                790
            ],
            "filename": "complement.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001906",
                "name": "module.exports",
                "type": "Identifier",
                "value": "complement",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                45
            ],
            "filename": "compose.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001914",
                "name": "pipe",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pipe",
        "longname": "pipe",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52,
                99
            ],
            "filename": "compose.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001920",
                "name": "reverse",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reverse",
        "longname": "reverse",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Performs right-to-left function composition. The last argument may have\n * any arity; the remaining arguments must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      const classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      const yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n * @symb R.compose(f, g, h)(a)(b) = f(g(h(a)))(b)\n */",
        "meta": {
            "range": [
                1007,
                1176
            ],
            "filename": "compose.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001925",
                "name": "compose",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "description": "Performs right-to-left function composition. The last argument may have\nany arity; the remaining arguments must be unary.\n\n**Note:** The result of compose is not automatically curried.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)",
                "value": "((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.compose(f, g, h)(a, b) = f(g(h(a, b)))",
                "value": "R.compose(f, g, h)(a, b) = f(g(h(a, b)))"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.compose(f, g, h)(a)(b) = f(g(h(a)))(b)",
                "value": "R.compose(f, g, h)(a)(b) = f(g(h(a)))(b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "variable": true,
                "description": "The functions to compose",
                "name": "...functions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.pipe"
        ],
        "examples": [
            "const classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n     const yellGreeting = R.compose(R.toUpper, classyGreeting);\n     yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n\n     R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7"
        ],
        "name": "compose",
        "longname": "R.compose",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1178,
                1202
            ],
            "filename": "compose.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001949",
                "name": "module.exports",
                "type": "Identifier",
                "value": "compose",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "composeWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001957",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                116
            ],
            "filename": "composeWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001963",
                "name": "pipeWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pipeWith",
        "longname": "pipeWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                123,
                170
            ],
            "filename": "composeWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001969",
                "name": "reverse",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reverse",
        "longname": "reverse",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Performs right-to-left function composition using transforming function. The last function may have\n * any arity; the remaining functions must be unary. Unlike `compose`, functions are passed in an array.\n *\n * **Note:** The result of composeWith is not automatically curried. Transforming function is not used\n * on the last argument.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\n * @param {Function} transformer The transforming function\n * @param {Array} functions The functions to compose\n * @return {Function}\n * @see R.compose, R.pipeWith\n * @example\n *\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\n *\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\n *\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))\n */",
        "meta": {
            "range": [
                1181,
                1304
            ],
            "filename": "composeWith.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001975",
                "name": "composeWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Performs right-to-left function composition using transforming function. The last function may have\nany arity; the remaining functions must be unary. Unlike `compose`, functions are passed in an array.\n\n**Note:** The result of composeWith is not automatically curried. Transforming function is not used\non the last argument.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)",
                "value": "((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))",
                "value": "R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The transforming function",
                "name": "transformer"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The functions to compose",
                "name": "functions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.compose, R.pipeWith"
        ],
        "examples": [
            "const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\n\n     composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\n     composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined"
        ],
        "name": "composeWith",
        "longname": "R.composeWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1307,
                1335
            ],
            "filename": "composeWith.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100001996",
                "name": "module.exports",
                "type": "Identifier",
                "value": "composeWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "concat.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002004",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "concat.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002010",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                196
            ],
            "filename": "concat.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002016",
                "name": "_isFunction",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isFunction",
        "longname": "_isFunction",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                203,
                263
            ],
            "filename": "concat.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002022",
                "name": "_isString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isString",
        "longname": "_isString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                270,
                319
            ],
            "filename": "concat.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002028",
                "name": "toString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "toString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */",
        "meta": {
            "range": [
                1317,
                1934
            ],
            "filename": "concat.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002034",
                "name": "concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the result of concatenating the given lists or strings.\n\nNote: `R.concat` expects both arguments to be of the same type,\nunlike the native `Array.prototype.concat` method. It will throw\nan error if you `concat` an Array with a non-Array value.\n\nDispatches to the `concat` method of the first argument, if present.\nCan also concatenate two members of a [fantasy-land\ncompatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a] -> [a]",
                "value": "[a] -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String -> String",
                "value": "String -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "String"
                    ]
                },
                "description": "The first list",
                "name": "firstList"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "String"
                    ]
                },
                "description": "The second list",
                "name": "secondList"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array",
                        "String"
                    ]
                },
                "description": "A list consisting of the elements of `firstList` followed by the elements of\n`secondList`."
            }
        ],
        "examples": [
            "R.concat('ABC', 'DEF'); // 'ABCDEF'\n     R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     R.concat([], []); //=> []"
        ],
        "name": "concat",
        "longname": "R.concat",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1937,
                1960
            ],
            "filename": "concat.js",
            "lineno": 80,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002132",
                "name": "module.exports",
                "type": "Identifier",
                "value": "concat",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "cond.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002140",
                "name": "_arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arity",
        "longname": "_arity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "cond.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002146",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                128,
                167
            ],
            "filename": "cond.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002152",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                174,
                213
            ],
            "filename": "cond.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002158",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "max",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                220,
                265
            ],
            "filename": "cond.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002164",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * **Please note**: This is not a direct substitute for a `switch` statement.\n * Remember that both elements of every pair passed to `cond` are *functions*,\n * and `cond` returns a function.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @see R.ifElse, R.unless, R.when\n * @example\n *\n *      const fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */",
        "meta": {
            "range": [
                1530,
                1904
            ],
            "filename": "cond.js",
            "lineno": 53,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002170",
                "name": "cond",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n`R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\nto `fn` are applied to each of the predicates in turn until one returns a\n\"truthy\" value, at which point `fn` returns the result of applying its\narguments to the corresponding transformer. If none of the predicates\nmatches, `fn` returns undefined.\n\n**Please note**: This is not a direct substitute for a `switch` statement.\nRemember that both elements of every pair passed to `cond` are *functions*,\nand `cond` returns a function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.6.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[[(*... -> Boolean),(*... -> *)]] -> (*... -> *)",
                "value": "[[(*... -> Boolean),(*... -> *)]] -> (*... -> *)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A list of [predicate, transformer]",
                "name": "pairs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.ifElse, R.unless, R.when"
        ],
        "examples": [
            "const fn = R.cond([\n       [R.equals(0),   R.always('water freezes at 0°C')],\n       [R.equals(100), R.always('water boils at 100°C')],\n       [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n     ]);\n     fn(0); //=> 'water freezes at 0°C'\n     fn(50); //=> 'nothing special happens at 50°C'\n     fn(100); //=> 'water boils at 100°C'"
        ],
        "name": "cond",
        "longname": "R.cond",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1588,
                1672
            ],
            "filename": "cond.js",
            "lineno": 56,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002179",
                "name": "arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "arity",
        "longname": "<anonymous>~arity",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1719,
                1726
            ],
            "filename": "cond.js",
            "lineno": 60,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002204",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1880,
                1888
            ],
            "filename": "cond.js",
            "lineno": 67,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002238",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1907,
                1928
            ],
            "filename": "cond.js",
            "lineno": 72,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002242",
                "name": "module.exports",
                "type": "Identifier",
                "value": "cond",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "construct.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002250",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                120
            ],
            "filename": "construct.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002256",
                "name": "constructN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "constructN",
        "longname": "constructN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      const AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      const animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      const animalSighting = R.invoker(0, 'sighting');\n *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */",
        "meta": {
            "range": [
                1220,
                1317
            ],
            "filename": "construct.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002262",
                "name": "construct",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Wraps a constructor function inside a curried function that can be called\nwith the same arguments and returns the same type.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(* -> {*}) -> (* -> {*})",
                "value": "(* -> {*}) -> (* -> {*})"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The constructor function to wrap.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A wrapped, curried constructor function."
            }
        ],
        "see": [
            "R.invoker"
        ],
        "examples": [
            "// Constructor function\n     function Animal(kind) {\n       this.kind = kind;\n     };\n     Animal.prototype.sighting = function() {\n       return \"It's a \" + this.kind + \"!\";\n     }\n\n     const AnimalConstructor = R.construct(Animal)\n\n     // Notice we no longer need the 'new' keyword:\n     AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n\n     const animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n     const animalSighting = R.invoker(0, 'sighting');\n     const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n     R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]"
        ],
        "name": "construct",
        "longname": "R.construct",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1320,
                1346
            ],
            "filename": "construct.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002278",
                "name": "module.exports",
                "type": "Identifier",
                "value": "construct",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "constructN.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002286",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "constructN.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002292",
                "name": "curry",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curry",
        "longname": "curry",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                117,
                158
            ],
            "filename": "constructN.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002298",
                "name": "nAry",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nAry",
        "longname": "nAry",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      }\n *\n *      Salad.prototype.recipe = function() {\n *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\n *        return R.join('\\n', instructions);\n *      };\n *\n *      const ThreeLayerSalad = R.constructN(3, Salad);\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\n *\n *      console.log(salad.recipe());\n *      // Add a dollop of Mayonnaise\n *      // Add a dollop of Potato Chips\n *      // Add a dollop of Ketchup\n */",
        "meta": {
            "range": [
                1432,
                2369
            ],
            "filename": "constructN.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002304",
                "name": "constructN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Wraps a constructor function inside a curried function that can be called\nwith the same arguments and returns the same type. The arity of the function\nreturned is specified to allow using variadic constructor functions.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.4.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> (* -> {*}) -> (* -> {*})",
                "value": "Number -> (* -> {*}) -> (* -> {*})"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The arity of the constructor function.",
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The constructor function to wrap.",
                "name": "Fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A wrapped, curried constructor function."
            }
        ],
        "examples": [
            "// Variadic Constructor function\n     function Salad() {\n       this.ingredients = arguments;\n     }\n\n     Salad.prototype.recipe = function() {\n       const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\n       return R.join('\\n', instructions);\n     };\n\n     const ThreeLayerSalad = R.constructN(3, Salad);\n\n     // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n     const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\n\n     console.log(salad.recipe());\n     // Add a dollop of Mayonnaise\n     // Add a dollop of Potato Chips\n     // Add a dollop of Ketchup"
        ],
        "name": "constructN",
        "longname": "R.constructN",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2372,
                2399
            ],
            "filename": "constructN.js",
            "lineno": 97,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002459",
                "name": "module.exports",
                "type": "Identifier",
                "value": "constructN",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "converge.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002467",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "converge.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002473",
                "name": "_map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_map",
        "longname": "_map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                169
            ],
            "filename": "converge.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002479",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                176,
                215
            ],
            "filename": "converge.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002485",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "max",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                222,
                265
            ],
            "filename": "converge.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002491",
                "name": "pluck",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pluck",
        "longname": "pluck",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                272,
                317
            ],
            "filename": "converge.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002497",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. The arity of the new function is the same as the arity of\n * the longest branching function. When invoked, this new function is applied\n * to some arguments, and each branching function is applied to those same\n * arguments. The results of each branching function are passed as arguments\n * to the converging function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      const average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */",
        "meta": {
            "range": [
                1500,
                1796
            ],
            "filename": "converge.js",
            "lineno": 54,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002503",
                "name": "converge",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Accepts a converging function and a list of branching functions and returns\na new function. The arity of the new function is the same as the arity of\nthe longest branching function. When invoked, this new function is applied\nto some arguments, and each branching function is applied to those same\narguments. The results of each branching function are passed as arguments\nto the converging function to produce the return value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.4.2",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)",
                "value": "((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))",
                "value": "R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function. `after` will be invoked with the return values of\n       `fn1` and `fn2` as its arguments.",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A list of functions.",
                "name": "functions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new function."
            }
        ],
        "see": [
            "R.useWith"
        ],
        "examples": [
            "const average = R.converge(R.divide, [R.sum, R.length])\n     average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n\n     const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n     strangeConcat(\"Yodel\") //=> \"YODELyodel\""
        ],
        "name": "converge",
        "longname": "R.converge",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1641,
                1657
            ],
            "filename": "converge.js",
            "lineno": 58,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002526",
                "name": "args",
                "type": "Identifier",
                "value": "arguments"
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1667,
                1681
            ],
            "filename": "converge.js",
            "lineno": 59,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002530",
                "name": "context",
                "type": "ThisExpression",
                "value": "this"
            }
        },
        "undocumented": true,
        "name": "context",
        "longname": "<anonymous>~context",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1799,
                1824
            ],
            "filename": "converge.js",
            "lineno": 66,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002553",
                "name": "module.exports",
                "type": "Identifier",
                "value": "converge",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "count.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002561",
                "name": "_reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_reduce",
        "longname": "_reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "count.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002567",
                "name": "curry",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curry",
        "longname": "curry",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the number of items in a given `list` matching the predicate `f`\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} predicate to match items against\n * @return {Array} list of items to count in\n * @example\n *\n *      const even = x => x % 2 == 0;\n *\n *      R.count(even, [1, 2, 3, 4, 5]); // => 2\n *      R.map(R.count(even), [[1, 1, 1], [2, 3, 4, 5], [6]]); // => [0, 2, 1]\n */",
        "meta": {
            "range": [
                586,
                722
            ],
            "filename": "count.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002573",
                "name": "count",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the number of items in a given `list` matching the predicate `f`",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> Number",
                "value": "(a -> Boolean) -> [a] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "to match items against",
                "name": "predicate"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "list of items to count in"
            }
        ],
        "examples": [
            "const even = x => x % 2 == 0;\n\n     R.count(even, [1, 2, 3, 4, 5]); // => 2\n     R.map(R.count(even), [[1, 1, 1], [2, 3, 4, 5], [6]]); // => [0, 2, 1]"
        ],
        "name": "count",
        "longname": "R.count",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                724,
                746
            ],
            "filename": "count.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002600",
                "name": "module.exports",
                "type": "Identifier",
                "value": "count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                53
            ],
            "filename": "countBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002608",
                "name": "reduceBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduceBy",
        "longname": "reduceBy",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */",
        "meta": {
            "range": [
                1020,
                1099
            ],
            "filename": "countBy.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002614",
                "name": "countBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Counts the elements of a list according to how many match each value of a\nkey generated by the supplied function. Returns an object mapping the keys\nproduced by `fn` to the number of occurrences in the list. Note that all\nkeys are coerced to strings because of how JavaScript objects work.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> String) -> [a] -> {*}",
                "value": "(a -> String) -> [a] -> {*}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function used to map values to keys.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to count elements from.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object mapping keys to number of occurrences in the list."
            }
        ],
        "examples": [
            "const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n     R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n\n     const letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n     R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}"
        ],
        "name": "countBy",
        "longname": "R.countBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1101,
                1125
            ],
            "filename": "countBy.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002628",
                "name": "module.exports",
                "type": "Identifier",
                "value": "countBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "curry.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002636",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "curry.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002642",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * Please note that default parameters don't count towards a [function arity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)\n * and therefore `curry` won't work well with those.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n *\n *      // R.curry not working well with default parameters\n *      const h = R.curry((a, b, c = 2) => a + b + c);\n *      h(1)(2)(7); //=> Error! (`3` is not a function!)\n */",
        "meta": {
            "range": [
                1764,
                1849
            ],
            "filename": "curry.js",
            "lineno": 57,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002648",
                "name": "curry",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a curried equivalent of the provided function. The curried function\nhas two unusual capabilities. First, its arguments needn't be provided one\nat a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\nfollowing are equivalent:\n\n  - `g(1)(2)(3)`\n  - `g(1)(2, 3)`\n  - `g(1, 2)(3)`\n  - `g(1, 2, 3)`\n\nSecondly, the special placeholder value [`R.__`](#__) may be used to specify\n\"gaps\", allowing partial application of any combination of arguments,\nregardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\nthe following are equivalent:\n\n  - `g(1, 2, 3)`\n  - `g(_, 2, 3)(1)`\n  - `g(_, _, 3)(1)(2)`\n  - `g(_, _, 3)(1, 2)`\n  - `g(_, 2)(1)(3)`\n  - `g(_, 2)(1, 3)`\n  - `g(_, 2)(_, 3)(1)`\n\nPlease note that default parameters don't count towards a [function arity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)\nand therefore `curry` won't work well with those.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(* -> a) -> (* -> a)",
                "value": "(* -> a) -> (* -> a)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to curry.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new, curried function."
            }
        ],
        "see": [
            "R.curryN, R.partial"
        ],
        "examples": [
            "const addFourNumbers = (a, b, c, d) => a + b + c + d;\n     const curriedAddFourNumbers = R.curry(addFourNumbers);\n     const f = curriedAddFourNumbers(1, 2);\n     const g = f(3);\n     g(4); //=> 10\n\n     // R.curry not working well with default parameters\n     const h = R.curry((a, b, c = 2) => a + b + c);\n     h(1)(2)(7); //=> Error! (`3` is not a function!)"
        ],
        "name": "curry",
        "longname": "R.curry",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1852,
                1874
            ],
            "filename": "curry.js",
            "lineno": 63,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002664",
                "name": "module.exports",
                "type": "Identifier",
                "value": "curry",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "curryN.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002672",
                "name": "_arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arity",
        "longname": "_arity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "curryN.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002678",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                128,
                184
            ],
            "filename": "curryN.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002684",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                191,
                247
            ],
            "filename": "curryN.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002690",
                "name": "_curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curryN",
        "longname": "_curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */",
        "meta": {
            "range": [
                1541,
                1705
            ],
            "filename": "curryN.js",
            "lineno": 60,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002696",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a curried equivalent of the provided function, with the specified\narity. The curried function has two unusual capabilities. First, its\narguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\nfollowing are equivalent:\n\n  - `g(1)(2)(3)`\n  - `g(1)(2, 3)`\n  - `g(1, 2)(3)`\n  - `g(1, 2, 3)`\n\nSecondly, the special placeholder value [`R.__`](#__) may be used to specify\n\"gaps\", allowing partial application of any combination of arguments,\nregardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\nthe following are equivalent:\n\n  - `g(1, 2, 3)`\n  - `g(_, 2, 3)(1)`\n  - `g(_, _, 3)(1)(2)`\n  - `g(_, _, 3)(1, 2)`\n  - `g(_, 2)(1)(3)`\n  - `g(_, 2)(1, 3)`\n  - `g(_, 2)(_, 3)(1)`",
        "kind": "function",
        "memberof": "R",
        "since": "v0.5.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> (* -> a) -> (* -> a)",
                "value": "Number -> (* -> a) -> (* -> a)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The arity for the returned function.",
                "name": "length"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to curry.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new, curried function."
            }
        ],
        "see": [
            "R.curry"
        ],
        "examples": [
            "const sumArgs = (...args) => R.sum(args);\n\n     const curriedAddFourNumbers = R.curryN(4, sumArgs);\n     const f = curriedAddFourNumbers(1, 2);\n     const g = f(3);\n     g(4); //=> 10"
        ],
        "name": "curryN",
        "longname": "R.curryN",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1708,
                1731
            ],
            "filename": "curryN.js",
            "lineno": 70,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002724",
                "name": "module.exports",
                "type": "Identifier",
                "value": "curryN",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                43
            ],
            "filename": "dec.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002732",
                "name": "add",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "add",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Decrements its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n - 1\n * @see R.inc\n * @example\n *\n *      R.dec(42); //=> 41\n */",
        "meta": {
            "range": [
                277,
                304
            ],
            "filename": "dec.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002738",
                "name": "dec",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Decrements its argument.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number",
                "value": "Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "n"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "n - 1"
            }
        ],
        "see": [
            "R.inc"
        ],
        "examples": [
            "R.dec(42); //=> 41"
        ],
        "name": "dec",
        "longname": "R.dec",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                306,
                326
            ],
            "filename": "dec.js",
            "lineno": 24,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002745",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dec",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "defaultTo.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002753",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      const defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42(false);  //=> false\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */",
        "meta": {
            "range": [
                853,
                955
            ],
            "filename": "defaultTo.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002759",
                "name": "defaultTo",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the second argument if it is not `null`, `undefined` or `NaN`;\notherwise the first argument is returned.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> b -> a | b",
                "value": "a -> b -> a | b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "a"
                    ]
                },
                "description": "The default value.",
                "name": "default"
            },
            {
                "type": {
                    "names": [
                        "b"
                    ]
                },
                "description": "`val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value"
            }
        ],
        "examples": [
            "const defaultTo42 = R.defaultTo(42);\n\n     defaultTo42(null);  //=> 42\n     defaultTo42(undefined);  //=> 42\n     defaultTo42(false);  //=> false\n     defaultTo42('Ramda');  //=> 'Ramda'\n     // parseInt('string') results in NaN\n     defaultTo42(parseInt('string')); //=> 42"
        ],
        "name": "defaultTo",
        "longname": "R.defaultTo",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                958,
                984
            ],
            "filename": "defaultTo.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002780",
                "name": "module.exports",
                "type": "Identifier",
                "value": "defaultTo",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "descend.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002788",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @see R.ascend\n * @example\n *\n *      const byAge = R.descend(R.prop('age'));\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByOldestFirst = R.sort(byAge, people);\n *        //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]\n */",
        "meta": {
            "range": [
                967,
                1107
            ],
            "filename": "descend.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002794",
                "name": "descend",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Makes a descending comparator function out of a function that returns a value\nthat can be compared with `<` and `>`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.23.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord b => (a -> b) -> a -> a -> Number",
                "value": "Ord b => (a -> b) -> a -> a -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function of arity one that returns a value that can be compared",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The first item to be compared.",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The second item to be compared.",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "`-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`"
            }
        ],
        "see": [
            "R.ascend"
        ],
        "examples": [
            "const byAge = R.descend(R.prop('age'));\n     const people = [\n       { name: 'Emma', age: 70 },\n       { name: 'Peter', age: 78 },\n       { name: 'Mikhail', age: 62 },\n     ];\n     const peopleByOldestFirst = R.sort(byAge, people);\n       //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]"
        ],
        "name": "descend",
        "longname": "R.descend",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1034,
                1044
            ],
            "filename": "descend.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002805",
                "name": "aa",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "aa",
        "longname": "<anonymous>~aa",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1052,
                1062
            ],
            "filename": "descend.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002811",
                "name": "bb",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "bb",
        "longname": "<anonymous>~bb",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1110,
                1134
            ],
            "filename": "descend.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002830",
                "name": "module.exports",
                "type": "Identifier",
                "value": "descend",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "difference.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002838",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "difference.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002844",
                "name": "_Set",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_Set",
        "longname": "_Set",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */",
        "meta": {
            "range": [
                858,
                1282
            ],
            "filename": "difference.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002850",
                "name": "difference",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Finds the set (i.e. no duplicates) of all elements in the first list not\ncontained in the second list. Objects and Arrays are compared in terms of\nvalue equality, not reference equality.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[*] -> [*] -> [*]",
                "value": "[*] -> [*] -> [*]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first list.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second list.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The elements in `list1` that are not in `list2`."
            }
        ],
        "see": [
            "R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without"
        ],
        "examples": [
            "R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n     R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]"
        ],
        "name": "difference",
        "longname": "R.difference",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                936,
                944
            ],
            "filename": "difference.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002860",
                "name": "out",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                952,
                959
            ],
            "filename": "difference.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002864",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                967,
                990
            ],
            "filename": "difference.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002868",
                "name": "firstLen",
                "type": "MemberExpression",
                "value": "first.length"
            }
        },
        "undocumented": true,
        "name": "firstLen",
        "longname": "<anonymous>~firstLen",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                998,
                1023
            ],
            "filename": "difference.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002874",
                "name": "secondLen",
                "type": "MemberExpression",
                "value": "second.length"
            }
        },
        "undocumented": true,
        "name": "secondLen",
        "longname": "<anonymous>~secondLen",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1031,
                1055
            ],
            "filename": "difference.js",
            "lineno": 37,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002880",
                "name": "toFilterOut",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "toFilterOut",
        "longname": "<anonymous>~toFilterOut",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1069,
                1074
            ],
            "filename": "difference.js",
            "lineno": 39,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002886",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1091,
                1097
            ],
            "filename": "difference.js",
            "lineno": 39,
            "columnno": 33,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002892",
                "name": "i",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1210,
                1238
            ],
            "filename": "difference.js",
            "lineno": 45,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002919",
                "name": "out[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "first[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~out.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1251,
                1259
            ],
            "filename": "difference.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002929",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1285,
                1312
            ],
            "filename": "difference.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002935",
                "name": "module.exports",
                "type": "Identifier",
                "value": "difference",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                72
            ],
            "filename": "differenceWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002943",
                "name": "_includesWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_includesWith",
        "longname": "_includesWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79,
                135
            ],
            "filename": "differenceWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002949",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      const cmp = (x, y) => x.a === y.a;\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      const l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n *\n *      R.differenceWith(R.equals, [1, 2, 3, 3, 3], []); //=> [1, 2, 3]\n *      R.differenceWith(R.equals, [1, 2, 3, 3, 3], [1]); //=> [2, 3]\n */",
        "meta": {
            "range": [
                1139,
                1478
            ],
            "filename": "differenceWith.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002955",
                "name": "differenceWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Finds the set (i.e. no duplicates) of all elements in the first list not\ncontained in the second list. Duplication is determined according to the\nvalue returned by applying the supplied predicate to two list elements.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> Boolean) -> [a] -> [a] -> [a]",
                "value": "((a, a) -> Boolean) -> [a] -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate used to test whether two items are equal.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first list.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second list.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The elements in `list1` that are not in `list2`."
            }
        ],
        "see": [
            "R.difference, R.symmetricDifference, R.symmetricDifferenceWith"
        ],
        "examples": [
            "const cmp = (x, y) => x.a === y.a;\n     const l1 = [{a: 1}, {a: 2}, {a: 3}];\n     const l2 = [{a: 3}, {a: 4}];\n     R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n\n     R.differenceWith(R.equals, [1, 2, 3, 3, 3], []); //=> [1, 2, 3]\n     R.differenceWith(R.equals, [1, 2, 3, 3, 3], [1]); //=> [2, 3]"
        ],
        "name": "differenceWith",
        "longname": "R.differenceWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1231,
                1239
            ],
            "filename": "differenceWith.js",
            "lineno": 38,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002966",
                "name": "out",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1247,
                1254
            ],
            "filename": "differenceWith.js",
            "lineno": 39,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002970",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1262,
                1285
            ],
            "filename": "differenceWith.js",
            "lineno": 40,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100002974",
                "name": "firstLen",
                "type": "MemberExpression",
                "value": "first.length"
            }
        },
        "undocumented": true,
        "name": "firstLen",
        "longname": "<anonymous>~firstLen",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1447,
                1455
            ],
            "filename": "differenceWith.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003012",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1481,
                1512
            ],
            "filename": "differenceWith.js",
            "lineno": 53,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003018",
                "name": "module.exports",
                "type": "Identifier",
                "value": "differenceWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "dissoc.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003026",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                120
            ],
            "filename": "dissoc.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003032",
                "name": "dissocPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "dissocPath",
        "longname": "dissocPath",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc, R.omit\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */",
        "meta": {
            "range": [
                602,
                698
            ],
            "filename": "dissoc.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003038",
                "name": "dissoc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new object that does not contain a `prop` property.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> {k: v} -> {k: v}",
                "value": "String -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the property to dissociate",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to clone",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A new object equivalent to the original but without the specified property"
            }
        ],
        "see": [
            "R.assoc, R.omit"
        ],
        "examples": [
            "R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}"
        ],
        "name": "dissoc",
        "longname": "R.dissoc",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                701,
                724
            ],
            "filename": "dissoc.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003054",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dissoc",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "dissocPath.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003062",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "dissocPath.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003068",
                "name": "_dissoc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dissoc",
        "longname": "_dissoc",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                130,
                192
            ],
            "filename": "dissocPath.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003074",
                "name": "_isInteger",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isInteger",
        "longname": "_isInteger",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                199,
                257
            ],
            "filename": "dissocPath.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003080",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                264,
                307
            ],
            "filename": "dissocPath.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003086",
                "name": "assoc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "assoc",
        "longname": "assoc",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Makes a shallow clone of an object. Note that this copies and flattens\n * prototype properties onto the new object as well. All non-primitive\n * properties are copied by reference.\n *\n * @private\n * @param {String|Integer} prop The prop operating\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original.\n */",
        "meta": {
            "range": [
                685,
                892
            ],
            "filename": "dissocPath.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003091",
                "name": "_shallowCloneObject",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "prop",
                    "obj"
                ]
            },
            "vars": {
                "result": "_shallowCloneObject~result",
                "p": "_shallowCloneObject~p",
                "result[undefined]": "_shallowCloneObject~result.undefined]"
            }
        },
        "description": "Makes a shallow clone of an object. Note that this copies and flattens\nprototype properties onto the new object as well. All non-primitive\nproperties are copied by reference.",
        "access": "private",
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Integer"
                    ]
                },
                "description": "The prop operating",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "Array"
                    ]
                },
                "description": "The object to clone",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object",
                        "Array"
                    ]
                },
                "description": "A new object equivalent to the original."
            }
        ],
        "name": "_shallowCloneObject",
        "longname": "_shallowCloneObject",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                808,
                819
            ],
            "filename": "dissocPath.js",
            "lineno": 37,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003112",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "_shallowCloneObject~result",
        "kind": "member",
        "memberof": "_shallowCloneObject",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                833,
                834
            ],
            "filename": "dissocPath.js",
            "lineno": 39,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003117",
                "name": "p"
            }
        },
        "undocumented": true,
        "name": "p",
        "longname": "_shallowCloneObject~p",
        "kind": "member",
        "memberof": "_shallowCloneObject",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                849,
                867
            ],
            "filename": "dissocPath.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003122",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "_shallowCloneObject",
                "value": "obj[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "_shallowCloneObject~result.undefined]",
        "kind": "member",
        "memberof": "_shallowCloneObject~result",
        "scope": "static"
    },
    {
        "comment": "/**\n * Makes a shallow clone of an object, omitting the property at the given path.\n * Note that this copies and flattens prototype properties onto the new object\n * as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.11.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {k: v} -> {k: v}\n * @param {Array} path The path to the value to omit\n * @param {Object} obj The object to clone\n * @return {Object} A new object without the property at path\n * @see R.assocPath\n * @example\n *\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n */",
        "meta": {
            "range": [
                1541,
                2020
            ],
            "filename": "dissocPath.js",
            "lineno": 66,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003132",
                "name": "dissocPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Makes a shallow clone of an object, omitting the property at the given path.\nNote that this copies and flattens prototype properties onto the new object\nas well. All non-primitive properties are copied by reference.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.11.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Idx] -> {k: v} -> {k: v}",
                "value": "[Idx] -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The path to the value to omit",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to clone",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A new object without the property at path"
            }
        ],
        "see": [
            "R.assocPath"
        ],
        "examples": [
            "R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}"
        ],
        "name": "dissocPath",
        "longname": "R.dissocPath",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1779,
                1793
            ],
            "filename": "dissocPath.js",
            "lineno": 81,
            "columnno": 10,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003167",
                "name": "head",
                "type": "MemberExpression",
                "value": "path[0]"
            }
        },
        "undocumented": true,
        "name": "head",
        "longname": "<anonymous>~head",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1805,
                1847
            ],
            "filename": "dissocPath.js",
            "lineno": 82,
            "columnno": 10,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003173",
                "name": "tail",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "tail",
        "longname": "<anonymous>~tail",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2023,
                2050
            ],
            "filename": "dissocPath.js",
            "lineno": 93,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003210",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dissocPath",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "divide.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003218",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Divides two numbers. Equivalent to `a / b`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a / b`.\n * @see R.multiply\n * @example\n *\n *      R.divide(71, 100); //=> 0.71\n *\n *      const half = R.divide(R.__, 2);\n *      half(42); //=> 21\n *\n *      const reciprocal = R.divide(1);\n *      reciprocal(4);   //=> 0.25\n */",
        "meta": {
            "range": [
                558,
                631
            ],
            "filename": "divide.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003224",
                "name": "divide",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Divides two numbers. Equivalent to `a / b`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> Number",
                "value": "Number -> Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The first value.",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The second value.",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The result of `a / b`."
            }
        ],
        "see": [
            "R.multiply"
        ],
        "examples": [
            "R.divide(71, 100); //=> 0.71\n\n     const half = R.divide(R.__, 2);\n     half(42); //=> 21\n\n     const reciprocal = R.divide(1);\n     reciprocal(4);   //=> 0.25"
        ],
        "name": "divide",
        "longname": "R.divide",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                634,
                657
            ],
            "filename": "divide.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003238",
                "name": "module.exports",
                "type": "Identifier",
                "value": "divide",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "drop.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003246",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "drop.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003252",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                196
            ],
            "filename": "drop.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003258",
                "name": "_xdrop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xdrop",
        "longname": "_xdrop",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                203,
                246
            ],
            "filename": "drop.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003264",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */",
        "meta": {
            "range": [
                1032,
                1180
            ],
            "filename": "drop.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003270",
                "name": "drop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns all but the first `n` elements of the given list, string, or\ntransducer/transformer (or object with a `drop` method).\n\nDispatches to the `drop` method of the second argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> [a]",
                "value": "Number -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> String -> String",
                "value": "Number -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "A copy of list without the first `n` elements"
            }
        ],
        "see": [
            "R.take, R.transduce, R.dropLast, R.dropWhile"
        ],
        "examples": [
            "R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     R.drop(3, ['foo', 'bar', 'baz']); //=> []\n     R.drop(4, ['foo', 'bar', 'baz']); //=> []\n     R.drop(3, 'ramda');               //=> 'da'"
        ],
        "name": "drop",
        "longname": "R.drop",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1183,
                1204
            ],
            "filename": "drop.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003296",
                "name": "module.exports",
                "type": "Identifier",
                "value": "drop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "dropLast.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003304",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "dropLast.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003310",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                202
            ],
            "filename": "dropLast.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003316",
                "name": "_dropLast",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dropLast",
        "longname": "_dropLast",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                209,
                271
            ],
            "filename": "dropLast.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003322",
                "name": "_xdropLast",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xdropLast",
        "longname": "_xdropLast",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */",
        "meta": {
            "range": [
                1131,
                1220
            ],
            "filename": "dropLast.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003328",
                "name": "dropLast",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a list containing all but the last `n` elements of the given `list`.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> [a]",
                "value": "Number -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> String -> String",
                "value": "Number -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The number of elements of `list` to skip.",
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of elements to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A copy of the list with only the first `list.length - n` elements"
            }
        ],
        "see": [
            "R.takeLast, R.drop, R.dropWhile, R.dropLastWhile"
        ],
        "examples": [
            "R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     R.dropLast(3, 'ramda');               //=> 'ra'"
        ],
        "name": "dropLast",
        "longname": "R.dropLast",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1223,
                1248
            ],
            "filename": "dropLast.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003338",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dropLast",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "dropLastWhile.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003346",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "dropLastWhile.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003352",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                212
            ],
            "filename": "dropLastWhile.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003358",
                "name": "_dropLastWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dropLastWhile",
        "longname": "_dropLastWhile",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                219,
                291
            ],
            "filename": "dropLastWhile.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003364",
                "name": "_xdropLastWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xdropLastWhile",
        "longname": "_xdropLastWhile",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements until the predicate\n * function returns a `falsy` value. The predicate function is applied to one argument:\n * *(value)*.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} predicate The function to be called on each element\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'\n */",
        "meta": {
            "range": [
                1350,
                1454
            ],
            "filename": "dropLastWhile.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003370",
                "name": "dropLastWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list excluding all the tailing elements of a given list which\nsatisfy the supplied predicate function. It passes each value from the right\nto the supplied predicate function, skipping elements until the predicate\nfunction returns a `falsy` value. The predicate function is applied to one argument:\n*(value)*.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> [a]",
                "value": "(a -> Boolean) -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> String -> String",
                "value": "(a -> Boolean) -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to be called on each element",
                "name": "predicate"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The collection to iterate over.",
                "name": "xs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new array without any trailing elements that return `falsy` values from the `predicate`."
            }
        ],
        "see": [
            "R.takeLastWhile, R.addIndex, R.drop, R.dropWhile"
        ],
        "examples": [
            "const lteThree = x => x <= 3;\n\n     R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n\n     R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'"
        ],
        "name": "dropLastWhile",
        "longname": "R.dropLastWhile",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1457,
                1487
            ],
            "filename": "dropLastWhile.js",
            "lineno": 51,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003380",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dropLastWhile",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "dropRepeats.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003388",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "dropRepeats.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003394",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                218
            ],
            "filename": "dropRepeats.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003400",
                "name": "_xdropRepeatsWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xdropRepeatsWith",
        "longname": "_xdropRepeatsWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                225,
                288
            ],
            "filename": "dropRepeats.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003406",
                "name": "dropRepeatsWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "dropRepeatsWith",
        "longname": "dropRepeatsWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                295,
                340
            ],
            "filename": "dropRepeats.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003412",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */",
        "meta": {
            "range": [
                840,
                1001
            ],
            "filename": "dropRepeats.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003418",
                "name": "dropRepeats",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list without any consecutively repeating elements.\n[`R.equals`](#equals) is used to determine equality.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a]",
                "value": "[a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "`list` without repeating elements."
            }
        ],
        "see": [
            "R.transduce"
        ],
        "examples": [
            "R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]"
        ],
        "name": "dropRepeats",
        "longname": "R.dropRepeats",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1004,
                1032
            ],
            "filename": "dropRepeats.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003435",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dropRepeats",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "dropRepeatsBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003443",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "dropRepeatsBy.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003449",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                218
            ],
            "filename": "dropRepeatsBy.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003455",
                "name": "_xdropRepeatsWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xdropRepeatsWith",
        "longname": "_xdropRepeatsWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                225,
                288
            ],
            "filename": "dropRepeatsBy.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003461",
                "name": "dropRepeatsWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "dropRepeatsWith",
        "longname": "dropRepeatsWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                295,
                336
            ],
            "filename": "dropRepeatsBy.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003467",
                "name": "eqBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "eqBy",
        "longname": "eqBy",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list without any consecutively repeating elements,\n * based upon the value returned by applying the supplied function to\n * each list element. [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeatsBy(Math.abs, [1, -1, -1, 2, 3, -4, 4, 2, 2]); //=> [1, 2, 3, -4, 2]\n */",
        "meta": {
            "range": [
                1039,
                1221
            ],
            "filename": "dropRepeatsBy.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003473",
                "name": "dropRepeatsBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list without any consecutively repeating elements,\nbased upon the value returned by applying the supplied function to\neach list element. [`R.equals`](#equals) is used to determine equality.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.29.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> b) -> [a] -> [a]",
                "value": "(a -> b) -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function used to produce a value to use during comparisons.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "`list` without repeating elements."
            }
        ],
        "see": [
            "R.transduce"
        ],
        "examples": [
            "R.dropRepeatsBy(Math.abs, [1, -1, -1, 2, 3, -4, 4, 2, 2]); //=> [1, 2, 3, -4, 2]"
        ],
        "name": "dropRepeatsBy",
        "longname": "R.dropRepeatsBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1224,
                1254
            ],
            "filename": "dropRepeatsBy.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003501",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dropRepeatsBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003509",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003515",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                218
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003521",
                "name": "_xdropRepeatsWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xdropRepeatsWith",
        "longname": "_xdropRepeatsWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                225,
                266
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003527",
                "name": "last",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "last",
        "longname": "last",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */",
        "meta": {
            "range": [
                1037,
                1440
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003533",
                "name": "dropRepeatsWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list without any consecutively repeating elements. Equality is\ndetermined by applying the supplied predicate to each pair of consecutive elements. The\nfirst element in a series of equal elements will be preserved.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> Boolean) -> [a] -> [a]",
                "value": "((a, a) -> Boolean) -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate used to test whether two items are equal.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "`list` without repeating elements."
            }
        ],
        "see": [
            "R.transduce"
        ],
        "examples": [
            "const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n     R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]"
        ],
        "name": "dropRepeatsWith",
        "longname": "R.dropRepeatsWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1174,
                1185
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003547",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1193,
                1200
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 45,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003551",
                "name": "idx",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1208,
                1225
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003555",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1251,
                1270
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003566",
                "name": "result[0]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "list[0]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "0]",
        "longname": "<anonymous>~result.0]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1349,
                1382
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 53,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003590",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "list[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1399,
                1407
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 56,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003600",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1443,
                1475
            ],
            "filename": "dropRepeatsWith.js",
            "lineno": 63,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003606",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dropRepeatsWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "dropWhile.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003614",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "dropWhile.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003620",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                206
            ],
            "filename": "dropWhile.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003626",
                "name": "_xdropWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xdropWhile",
        "longname": "_xdropWhile",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                213,
                256
            ],
            "filename": "dropWhile.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003632",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      const lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n *\n *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\n */",
        "meta": {
            "range": [
                1247,
                1504
            ],
            "filename": "dropWhile.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003638",
                "name": "dropWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list excluding the leading elements of a given list which\nsatisfy the supplied predicate function. It passes each value to the supplied\npredicate function, skipping elements while the predicate function returns\n`true`. The predicate function is applied to one argument: *(value)*.\n\nDispatches to the `dropWhile` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> [a]",
                "value": "(a -> Boolean) -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> String -> String",
                "value": "(a -> Boolean) -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function called per iteration.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The collection to iterate over.",
                "name": "xs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new array."
            }
        ],
        "see": [
            "R.takeWhile, R.transduce, R.addIndex"
        ],
        "examples": [
            "const lteTwo = x => x <= 2;\n\n     R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n\n     R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'"
        ],
        "name": "dropWhile",
        "longname": "R.dropWhile",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1375,
                1382
            ],
            "filename": "dropWhile.js",
            "lineno": 51,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003653",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1390,
                1405
            ],
            "filename": "dropWhile.js",
            "lineno": 52,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003657",
                "name": "len",
                "type": "MemberExpression",
                "value": "xs.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1451,
                1459
            ],
            "filename": "dropWhile.js",
            "lineno": 55,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003674",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1507,
                1533
            ],
            "filename": "dropWhile.js",
            "lineno": 61,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003684",
                "name": "module.exports",
                "type": "Identifier",
                "value": "dropWhile",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "either.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003692",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                131
            ],
            "filename": "either.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003698",
                "name": "_isFunction",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isFunction",
        "longname": "_isFunction",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                138,
                179
            ],
            "filename": "either.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003704",
                "name": "lift",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lift",
        "longname": "lift",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                186,
                223
            ],
            "filename": "either.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003710",
                "name": "or",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "or",
        "longname": "or",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.both, R.anyPass, R.or\n * @example\n *\n *      const gt10 = x => x > 10;\n *      const even = x => x % 2 === 0;\n *      const f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n *\n *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)\n *      R.either([false, false, 'a'], [11]) // => [11, 11, \"a\"]\n */",
        "meta": {
            "range": [
                1334,
                1525
            ],
            "filename": "either.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003716",
                "name": "either",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "A function wrapping calls to the two functions in an `||` operation,\nreturning the result of the first function if it is truth-y and the result\nof the second function otherwise. Note that this is short-circuited,\nmeaning that the second function will not be invoked if the first returns a\ntruth-y value.\n\nIn addition to functions, `R.either` also accepts any fantasy-land compatible\napplicative functor.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.12.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)",
                "value": "(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "a predicate",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "another predicate",
                "name": "g"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "a function that applies its arguments to `f` and `g` and `||`s their outputs together."
            }
        ],
        "see": [
            "R.both, R.anyPass, R.or"
        ],
        "examples": [
            "const gt10 = x => x > 10;\n     const even = x => x % 2 === 0;\n     const f = R.either(gt10, even);\n     f(101); //=> true\n     f(8); //=> true\n\n     R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)\n     R.either([false, false, 'a'], [11]) // => [11, 11, \"a\"]"
        ],
        "name": "either",
        "longname": "R.either",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1528,
                1551
            ],
            "filename": "either.js",
            "lineno": 56,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003754",
                "name": "module.exports",
                "type": "Identifier",
                "value": "either",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "empty.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003762",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                133
            ],
            "filename": "empty.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003768",
                "name": "_isArguments",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArguments",
        "longname": "_isArguments",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                198
            ],
            "filename": "empty.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003774",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                205,
                265
            ],
            "filename": "empty.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003780",
                "name": "_isObject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isObject",
        "longname": "_isObject",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                272,
                332
            ],
            "filename": "empty.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003786",
                "name": "_isString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isString",
        "longname": "_isString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                339,
                407
            ],
            "filename": "empty.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003792",
                "name": "_isTypedArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isTypedArray",
        "longname": "_isTypedArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`),\n * TypedArray (`Uint8Array []`, `Float32Array []`, etc), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));               //=> Nothing()\n *      R.empty([1, 2, 3]);              //=> []\n *      R.empty('unicorns');             //=> ''\n *      R.empty({x: 1, y: 2});           //=> {}\n *      R.empty(Uint8Array.from('123')); //=> Uint8Array []\n */",
        "meta": {
            "range": [
                1277,
                1912
            ],
            "filename": "empty.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003798",
                "name": "empty",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the empty value of its argument's type. Ramda defines the empty\nvalue of Array (`[]`), Object (`{}`), String (`''`),\nTypedArray (`Uint8Array []`, `Float32Array []`, etc), and Arguments. Other\ntypes are supported if they define `<Type>.empty`,\n`<Type>.prototype.empty` or implement the\n[FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n\nDispatches to the `empty` method of the first argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> a",
                "value": "a -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "examples": [
            "R.empty(Just(42));               //=> Nothing()\n     R.empty([1, 2, 3]);              //=> []\n     R.empty('unicorns');             //=> ''\n     R.empty({x: 1, y: 2});           //=> {}\n     R.empty(Uint8Array.from('123')); //=> Uint8Array []"
        ],
        "name": "empty",
        "longname": "R.empty",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1915,
                1937
            ],
            "filename": "empty.js",
            "lineno": 60,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003925",
                "name": "module.exports",
                "type": "Identifier",
                "value": "empty",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "endsWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003933",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "endsWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003939",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                168
            ],
            "filename": "endsWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003945",
                "name": "takeLast",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "takeLast",
        "longname": "takeLast",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Checks if a list ends with the provided sublist.\n *\n * Similarly, checks if a string ends with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} suffix\n * @param {*} list\n * @return {Boolean}\n * @see R.startsWith\n * @example\n *\n *      R.endsWith('c', 'abc')                //=> true\n *      R.endsWith('b', 'abc')                //=> false\n *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n */",
        "meta": {
            "range": [
                758,
                875
            ],
            "filename": "endsWith.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003951",
                "name": "endsWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Checks if a list ends with the provided sublist.\n\nSimilarly, checks if a string ends with the provided substring.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a] -> Boolean",
                "value": "[a] -> [a] -> Boolean"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String -> Boolean",
                "value": "String -> String -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "suffix"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.startsWith"
        ],
        "examples": [
            "R.endsWith('c', 'abc')                //=> true\n     R.endsWith('b', 'abc')                //=> false\n     R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n     R.endsWith(['b'], ['a', 'b', 'c'])    //=> false"
        ],
        "name": "endsWith",
        "longname": "R.endsWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                878,
                903
            ],
            "filename": "endsWith.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003970",
                "name": "module.exports",
                "type": "Identifier",
                "value": "endsWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "eqBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003978",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "eqBy.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003984",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */",
        "meta": {
            "range": [
                510,
                595
            ],
            "filename": "eqBy.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100003990",
                "name": "eqBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function and two values in its domain and returns `true` if the\nvalues map to the same value in the codomain; `false` otherwise.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.18.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> b) -> a -> a -> Boolean",
                "value": "(a -> b) -> a -> a -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "R.eqBy(Math.abs, 5, -5); //=> true"
        ],
        "name": "eqBy",
        "longname": "R.eqBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                598,
                619
            ],
            "filename": "eqBy.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004010",
                "name": "module.exports",
                "type": "Identifier",
                "value": "eqBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "eqProps.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004018",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "eqProps.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004024",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Reports whether two objects have the same value, in [`R.equals`](#equals)\n * terms, for the specified property. Useful as a curried predicate.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig k -> {k: v} -> {k: v} -> Boolean\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      const o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      const o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      R.eqProps('a', o1, o2); //=> false\n *      R.eqProps('c', o1, o2); //=> true\n */",
        "meta": {
            "range": [
                708,
                820
            ],
            "filename": "eqProps.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004030",
                "name": "eqProps",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Reports whether two objects have the same value, in [`R.equals`](#equals)\nterms, for the specified property. Useful as a curried predicate.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "k -> {k: v} -> {k: v} -> Boolean",
                "value": "k -> {k: v} -> {k: v} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the property to compare",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "obj1"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "obj2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const o1 = { a: 1, b: 2, c: 3, d: 4 };\n     const o2 = { a: 10, b: 20, c: 3, d: 40 };\n     R.eqProps('a', o1, o2); //=> false\n     R.eqProps('c', o1, o2); //=> true"
        ],
        "name": "eqProps",
        "longname": "R.eqProps",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                823,
                847
            ],
            "filename": "eqProps.js",
            "lineno": 37,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004050",
                "name": "module.exports",
                "type": "Identifier",
                "value": "eqProps",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "equals.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004058",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "equals.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004064",
                "name": "_equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_equals",
        "longname": "_equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */",
        "meta": {
            "range": [
                716,
                805
            ],
            "filename": "equals.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004070",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if its arguments are equivalent, `false` otherwise. Handles\ncyclical data structures.\n\nDispatches symmetrically to the `equals` methods of both arguments, if\npresent.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.15.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> b -> Boolean",
                "value": "a -> b -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "R.equals(1, 1); //=> true\n     R.equals(1, '1'); //=> false\n     R.equals([1, 2, 3], [1, 2, 3]); //=> true\n\n     const a = {}; a.v = a;\n     const b = {}; b.v = b;\n     R.equals(a, b); //=> true"
        ],
        "name": "equals",
        "longname": "R.equals",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                808,
                831
            ],
            "filename": "equals.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004087",
                "name": "module.exports",
                "type": "Identifier",
                "value": "equals",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "evolve.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004095",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "evolve.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004101",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                192
            ],
            "filename": "evolve.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004107",
                "name": "_isObject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isObject",
        "longname": "_isObject",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object by recursively evolving a shallow copy of `object`,\n * according to the `transformation` functions. All non-primitive properties\n * are copied by reference.\n *\n * A `transformation` function will not be invoked if its corresponding key\n * does not exist in the evolved object.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n * @param {Object} transformations The object specifying transformation functions to apply\n *        to the object.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const tomato = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n *      const transformations = {\n *        firstName: R.trim,\n *        lastName: R.trim, // Will not get invoked.\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n *      };\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n */",
        "meta": {
            "range": [
                1244,
                1759
            ],
            "filename": "evolve.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004113",
                "name": "evolve",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object by recursively evolving a shallow copy of `object`,\naccording to the `transformation` functions. All non-primitive properties\nare copied by reference.\n\nA `transformation` function will not be invoked if its corresponding key\ndoes not exist in the evolved object.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{k: (v -> v)} -> {k: v} -> {k: v}",
                "value": "{k: (v -> v)} -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object specifying transformation functions to apply\n       to the object.",
                "name": "transformations"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to be transformed.",
                "name": "object"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The transformed object."
            }
        ],
        "examples": [
            "const tomato = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n     const transformations = {\n       firstName: R.trim,\n       lastName: R.trim, // Will not get invoked.\n       data: {elapsed: R.add(1), remaining: R.add(-1)}\n     };\n     R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}"
        ],
        "name": "evolve",
        "longname": "R.evolve",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1397,
                1439
            ],
            "filename": "evolve.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004136",
                "name": "result",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1447,
                1461
            ],
            "filename": "evolve.js",
            "lineno": 49,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004145",
                "name": "transformation"
            }
        },
        "undocumented": true,
        "name": "transformation",
        "longname": "<anonymous>~transformation",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1463,
                1466
            ],
            "filename": "evolve.js",
            "lineno": 49,
            "columnno": 22,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004147",
                "name": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1468,
                1472
            ],
            "filename": "evolve.js",
            "lineno": 49,
            "columnno": 27,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004149",
                "name": "type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "<anonymous>~type",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1503,
                1540
            ],
            "filename": "evolve.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004156",
                "name": "transformation",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "transformations[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "transformation",
        "longname": "<anonymous>~transformation",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1546,
                1574
            ],
            "filename": "evolve.js",
            "lineno": 53,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004162",
                "name": "type",
                "type": "UnaryExpression",
                "funcscope": "<anonymous>",
                "value": "typeoftransformation",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "<anonymous>~type",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1580,
                1733
            ],
            "filename": "evolve.js",
            "lineno": 54,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004167",
                "name": "result[undefined]",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1762,
                1785
            ],
            "filename": "evolve.js",
            "lineno": 60,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004198",
                "name": "module.exports",
                "type": "Identifier",
                "value": "evolve",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                70
            ],
            "filename": "filter.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004206",
                "name": "_arrayReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arrayReduce",
        "longname": "_arrayReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77,
                133
            ],
            "filename": "filter.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004212",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                208
            ],
            "filename": "filter.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004218",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                215,
                271
            ],
            "filename": "filter.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004224",
                "name": "_filter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_filter",
        "longname": "_filter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                278,
                338
            ],
            "filename": "filter.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004230",
                "name": "_isObject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isObject",
        "longname": "_isObject",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                345,
                403
            ],
            "filename": "filter.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004236",
                "name": "_xfilter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xfilter",
        "longname": "_xfilter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                410,
                451
            ],
            "filename": "filter.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004242",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @category Object\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */",
        "meta": {
            "range": [
                1335,
                1697
            ],
            "filename": "filter.js",
            "lineno": 58,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004248",
                "name": "filter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a predicate and a `Filterable`, and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate. Filterable objects include plain objects or any object\nthat has a filter method such as `Array`.\n\nDispatches to the `filter` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Filterable f => (a -> Boolean) -> f a -> f a",
                "value": "Filterable f => (a -> Boolean) -> f a -> f a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "filterable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "Filterable"
            }
        ],
        "see": [
            "R.reject, R.transduce, R.addIndex"
        ],
        "examples": [
            "const isEven = n => n % 2 === 0;\n\n     R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n\n     R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}"
        ],
        "name": "filter",
        "longname": "R.filter",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1577,
                1603
            ],
            "filename": "filter.js",
            "lineno": 65,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004281",
                "name": "acc[undefined]",
                "type": "MemberExpression",
                "value": "filterable[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc[undefined]",
        "longname": "acc[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1700,
                1723
            ],
            "filename": "filter.js",
            "lineno": 73,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004299",
                "name": "module.exports",
                "type": "Identifier",
                "value": "filter",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "find.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004307",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "find.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004313",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                196
            ],
            "filename": "find.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004319",
                "name": "_xfind",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xfind",
        "longname": "_xfind",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq(2, 'a'))(xs); //=> {a: 2}\n *      R.find(R.propEq(4, 'a'))(xs); //=> undefined\n */",
        "meta": {
            "range": [
                971,
                1213
            ],
            "filename": "find.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004325",
                "name": "find",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the first element of the list which matches the predicate, or\n`undefined` if no element matches.\n\nDispatches to the `find` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> a | undefined",
                "value": "(a -> Boolean) -> [a] -> a | undefined"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate function used to determine if the element is the\n       desired one.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The element found, or `undefined`."
            }
        ],
        "see": [
            "R.transduce"
        ],
        "examples": [
            "const xs = [{a: 1}, {a: 2}, {a: 3}];\n     R.find(R.propEq(2, 'a'))(xs); //=> {a: 2}\n     R.find(R.propEq(4, 'a'))(xs); //=> undefined"
        ],
        "name": "find",
        "longname": "R.find",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1079,
                1086
            ],
            "filename": "find.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004340",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1094,
                1111
            ],
            "filename": "find.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004344",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1196,
                1204
            ],
            "filename": "find.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004366",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1216,
                1237
            ],
            "filename": "find.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004370",
                "name": "module.exports",
                "type": "Identifier",
                "value": "find",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "findIndex.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004378",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "findIndex.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004384",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                206
            ],
            "filename": "findIndex.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004390",
                "name": "_xfindIndex",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xfindIndex",
        "longname": "_xfindIndex",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce, R.indexOf\n * @example\n *\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.findIndex(R.propEq(2, 'a'))(xs); //=> 1\n *      R.findIndex(R.propEq(4, 'a'))(xs); //=> -1\n */",
        "meta": {
            "range": [
                914,
                1173
            ],
            "filename": "findIndex.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004396",
                "name": "findIndex",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the index of the first element of the list which matches the\npredicate, or `-1` if no element matches.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> Number",
                "value": "(a -> Boolean) -> [a] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate function used to determine if the element is the\ndesired one.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The index of the element found, or `-1`."
            }
        ],
        "see": [
            "R.transduce, R.indexOf"
        ],
        "examples": [
            "const xs = [{a: 1}, {a: 2}, {a: 3}];\n     R.findIndex(R.propEq(2, 'a'))(xs); //=> 1\n     R.findIndex(R.propEq(4, 'a'))(xs); //=> -1"
        ],
        "name": "findIndex",
        "longname": "R.findIndex",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1031,
                1038
            ],
            "filename": "findIndex.js",
            "lineno": 41,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004410",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1046,
                1063
            ],
            "filename": "findIndex.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004414",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1142,
                1150
            ],
            "filename": "findIndex.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004434",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1176,
                1202
            ],
            "filename": "findIndex.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004441",
                "name": "module.exports",
                "type": "Identifier",
                "value": "findIndex",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "findLast.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004449",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "findLast.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004455",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                204
            ],
            "filename": "findLast.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004461",
                "name": "_xfindLast",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xfindLast",
        "longname": "_xfindLast",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLast(R.propEq(1, 'a'))(xs); //=> {a: 1, b: 1}\n *      R.findLast(R.propEq(4, 'a'))(xs); //=> undefined\n */",
        "meta": {
            "range": [
                914,
                1150
            ],
            "filename": "findLast.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004467",
                "name": "findLast",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the last element of the list which matches the predicate, or\n`undefined` if no element matches.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> a | undefined",
                "value": "(a -> Boolean) -> [a] -> a | undefined"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate function used to determine if the element is the\ndesired one.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The element found, or `undefined`."
            }
        ],
        "see": [
            "R.transduce"
        ],
        "examples": [
            "const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     R.findLast(R.propEq(1, 'a'))(xs); //=> {a: 1, b: 1}\n     R.findLast(R.propEq(4, 'a'))(xs); //=> undefined"
        ],
        "name": "findLast",
        "longname": "R.findLast",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1028,
                1049
            ],
            "filename": "findLast.js",
            "lineno": 41,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004481",
                "name": "idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1133,
                1141
            ],
            "filename": "findLast.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004505",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1153,
                1178
            ],
            "filename": "findLast.js",
            "lineno": 52,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004509",
                "name": "module.exports",
                "type": "Identifier",
                "value": "findLast",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "findLastIndex.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004517",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "findLastIndex.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004523",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                214
            ],
            "filename": "findLastIndex.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004529",
                "name": "_xfindLastIndex",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xfindLastIndex",
        "longname": "_xfindLastIndex",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the index of the last element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce, R.lastIndexOf\n * @example\n *\n *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLastIndex(R.propEq(1, 'a'))(xs); //=> 1\n *      R.findLastIndex(R.propEq(4, 'a'))(xs); //=> -1\n */",
        "meta": {
            "range": [
                936,
                1195
            ],
            "filename": "findLastIndex.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004535",
                "name": "findLastIndex",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the index of the last element of the list which matches the\npredicate, or `-1` if no element matches.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> Number",
                "value": "(a -> Boolean) -> [a] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate function used to determine if the element is the\ndesired one.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The index of the element found, or `-1`."
            }
        ],
        "see": [
            "R.transduce, R.lastIndexOf"
        ],
        "examples": [
            "const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     R.findLastIndex(R.propEq(1, 'a'))(xs); //=> 1\n     R.findLastIndex(R.propEq(4, 'a'))(xs); //=> -1"
        ],
        "name": "findLastIndex",
        "longname": "R.findLastIndex",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1065,
                1086
            ],
            "filename": "findLastIndex.js",
            "lineno": 41,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004549",
                "name": "idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1164,
                1172
            ],
            "filename": "findLastIndex.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004571",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1198,
                1228
            ],
            "filename": "findLastIndex.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004578",
                "name": "module.exports",
                "type": "Identifier",
                "value": "findLastIndex",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "flatten.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004586",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                127
            ],
            "filename": "flatten.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004592",
                "name": "_makeFlat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_makeFlat",
        "longname": "_makeFlat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */",
        "meta": {
            "range": [
                592,
                655
            ],
            "filename": "flatten.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004598",
                "name": "flatten",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list by pulling every item out of it (and all its sub-arrays)\nand putting them in a new array, depth-first.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [b]",
                "value": "[a] -> [b]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The flattened list."
            }
        ],
        "see": [
            "R.unnest"
        ],
        "examples": [
            "R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
        ],
        "name": "flatten",
        "longname": "R.flatten",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                658,
                682
            ],
            "filename": "flatten.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004606",
                "name": "module.exports",
                "type": "Identifier",
                "value": "flatten",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "flip.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004614",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "flip.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004620",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */",
        "meta": {
            "range": [
                761,
                987
            ],
            "filename": "flip.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004626",
                "name": "flip",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new function much like the supplied one, except that the first two\narguments' order is reversed.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)",
                "value": "((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.flip(f)(a, b, c) = f(b, a, c)",
                "value": "R.flip(f)(a, b, c) = f(b, a, c)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to invoke with its first two parameters reversed.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The result of invoking `fn` with its first two parameters' order reversed."
            }
        ],
        "examples": [
            "const mergeThree = (a, b, c) => [].concat(a, b, c);\n\n     mergeThree(1, 2, 3); //=> [1, 2, 3]\n\n     R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]"
        ],
        "name": "flip",
        "longname": "R.flip",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                863,
                910
            ],
            "filename": "flip.js",
            "lineno": 34,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004645",
                "name": "args",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                916,
                927
            ],
            "filename": "flip.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004658",
                "name": "args[0]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "b",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "0]",
        "longname": "<anonymous>~args.0]",
        "kind": "member",
        "memberof": "<anonymous>~args",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                933,
                944
            ],
            "filename": "flip.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004664",
                "name": "args[1]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "a",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "1]",
        "longname": "<anonymous>~args.1]",
        "kind": "member",
        "memberof": "<anonymous>~args",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                990,
                1011
            ],
            "filename": "flip.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004677",
                "name": "module.exports",
                "type": "Identifier",
                "value": "flip",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                76
            ],
            "filename": "forEach.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004685",
                "name": "_checkForMethod",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_checkForMethod",
        "longname": "_checkForMethod",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83,
                139
            ],
            "filename": "forEach.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004691",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */",
        "meta": {
            "range": [
                1333,
                1555
            ],
            "filename": "forEach.js",
            "lineno": 44,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004697",
                "name": "forEach",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Iterate over an input `list`, calling a provided function `fn` for each\nelement in the list.\n\n`fn` receives one argument: *(value)*.\n\nNote: `R.forEach` does not skip deleted or unassigned indices (sparse\narrays), unlike the native `Array.prototype.forEach` method. For more\ndetails on this behavior, see:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n\nAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\nthe original array. In some libraries this function is named `each`.\n\nDispatches to the `forEach` method of the second argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> *) -> [a] -> [a]",
                "value": "(a -> *) -> [a] -> [a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.forEach(f, [a, b, c]) = [a, b, c]",
                "value": "R.forEach(f, [a, b, c]) = [a, b, c]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to invoke. Receives one argument, `value`.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The original list."
            }
        ],
        "see": [
            "R.addIndex"
        ],
        "examples": [
            "const printXPlusFive = x => console.log(x + 5);\n     R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n     // logs 6\n     // logs 7\n     // logs 8"
        ],
        "name": "forEach",
        "longname": "R.forEach",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1442,
                1459
            ],
            "filename": "forEach.js",
            "lineno": 49,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004710",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1467,
                1474
            ],
            "filename": "forEach.js",
            "lineno": 50,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004716",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1522,
                1530
            ],
            "filename": "forEach.js",
            "lineno": 54,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004731",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1558,
                1582
            ],
            "filename": "forEach.js",
            "lineno": 60,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004737",
                "name": "module.exports",
                "type": "Identifier",
                "value": "forEach",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "forEachObjIndexed.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004745",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "forEachObjIndexed.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004751",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * `fn` receives three argument: *(value, key, obj)*.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Object\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      const printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n */",
        "meta": {
            "range": [
                888,
                1135
            ],
            "filename": "forEachObjIndexed.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004757",
                "name": "forEachObjIndexed",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Iterate over an input `object`, calling a provided function `fn` for each\nkey and value in the object.\n\n`fn` receives three argument: *(value, key, obj)*.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.23.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a",
                "value": "((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}",
                "value": "R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to invoke. Receives three argument, `value`, `key`, `obj`.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to iterate over.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The original object."
            }
        ],
        "examples": [
            "const printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n     R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n     // logs x:1\n     // logs y:2"
        ],
        "name": "forEachObjIndexed",
        "longname": "R.forEachObjIndexed",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                974,
                993
            ],
            "filename": "forEachObjIndexed.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004767",
                "name": "keyList",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keyList",
        "longname": "<anonymous>~keyList",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1001,
                1008
            ],
            "filename": "forEachObjIndexed.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004773",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1052,
                1070
            ],
            "filename": "forEachObjIndexed.js",
            "lineno": 39,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004784",
                "name": "key",
                "type": "MemberExpression",
                "value": "keyList[undefined]"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1104,
                1112
            ],
            "filename": "forEachObjIndexed.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004798",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1138,
                1172
            ],
            "filename": "forEachObjIndexed.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004804",
                "name": "module.exports",
                "type": "Identifier",
                "value": "forEachObjIndexed",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "fromPairs.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004812",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */",
        "meta": {
            "range": [
                601,
                810
            ],
            "filename": "fromPairs.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004818",
                "name": "fromPairs",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object from a list key-value pairs. If a key appears in\nmultiple pairs, the rightmost pair is included in the object.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[[k,v]] -> {k: v}",
                "value": "[[k,v]] -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of two-element arrays that will be the keys and values of the output object.",
                "name": "pairs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object made by pairing up `keys` and `values`."
            }
        ],
        "see": [
            "R.toPairs, R.pair"
        ],
        "examples": [
            "R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}"
        ],
        "name": "fromPairs",
        "longname": "R.fromPairs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                669,
                680
            ],
            "filename": "fromPairs.js",
            "lineno": 25,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004827",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                688,
                695
            ],
            "filename": "fromPairs.js",
            "lineno": 26,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004831",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                733,
                770
            ],
            "filename": "fromPairs.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004842",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "pairs[undefined][1]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                776,
                784
            ],
            "filename": "fromPairs.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004856",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                813,
                839
            ],
            "filename": "fromPairs.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004862",
                "name": "module.exports",
                "type": "Identifier",
                "value": "fromPairs",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                76
            ],
            "filename": "groupBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004870",
                "name": "_checkForMethod",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_checkForMethod",
        "longname": "_checkForMethod",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83,
                139
            ],
            "filename": "groupBy.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004876",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                146,
                195
            ],
            "filename": "groupBy.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004882",
                "name": "reduceBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduceBy",
        "longname": "reduceBy",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Splits a list into sub-lists stored in an object, based on the result of\n * calling a key-returning function on each element, and grouping the\n * results according to values returned.\n *\n * Dispatches to the `groupBy` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> {a: [b]}\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} list The array to group\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n *         that produced that key when passed to `fn`.\n * @see R.reduceBy, R.transduce, R.indexBy, R.collectBy\n * @example\n *\n *      const byGrade = R.groupBy(function(student) {\n *        const score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      const students = [{name: 'Abby', score: 84},\n *                      {name: 'Eddy', score: 58},\n *                      // ...\n *                      {name: 'Jack', score: 69}];\n *      byGrade(students);\n *      // {\n *      //   'A': [{name: 'Dianne', score: 99}],\n *      //   'B': [{name: 'Abby', score: 84}]\n *      //   // ...,\n *      //   'F': [{name: 'Eddy', score: 58}]\n *      // }\n */",
        "meta": {
            "range": [
                1656,
                1816
            ],
            "filename": "groupBy.js",
            "lineno": 55,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004888",
                "name": "groupBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Splits a list into sub-lists stored in an object, based on the result of\ncalling a key-returning function on each element, and grouping the\nresults according to values returned.\n\nDispatches to the `groupBy` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Idx a => (b -> a) -> [b] -> {a: [b]}",
                "value": "Idx a => (b -> a) -> [b] -> {a: [b]}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function :: a -> Idx",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to group",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object with the output of `fn` for keys, mapped to arrays of elements\n        that produced that key when passed to `fn`."
            }
        ],
        "see": [
            "R.reduceBy, R.transduce, R.indexBy, R.collectBy"
        ],
        "examples": [
            "const byGrade = R.groupBy(function(student) {\n       const score = student.score;\n       return score < 65 ? 'F' :\n              score < 70 ? 'D' :\n              score < 80 ? 'C' :\n              score < 90 ? 'B' : 'A';\n     });\n     const students = [{name: 'Abby', score: 84},\n                     {name: 'Eddy', score: 58},\n                     // ...\n                     {name: 'Jack', score: 69}];\n     byGrade(students);\n     // {\n     //   'A': [{name: 'Dianne', score: 99}],\n     //   'B': [{name: 'Abby', score: 84}]\n     //   // ...,\n     //   'F': [{name: 'Eddy', score: 58}]\n     // }"
        ],
        "name": "groupBy",
        "longname": "R.groupBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1819,
                1843
            ],
            "filename": "groupBy.js",
            "lineno": 66,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004911",
                "name": "module.exports",
                "type": "Identifier",
                "value": "groupBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "groupWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004919",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all satisfied pairwise comparison according to the provided function.\n * Only adjacent elements are passed to the comparison function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * const isVowel = R.test(/^[aeiou]$/i);\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */",
        "meta": {
            "range": [
                1257,
                1595
            ],
            "filename": "groupWith.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004925",
                "name": "groupWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a list and returns a list of lists where each sublist's elements are\nall satisfied pairwise comparison according to the provided function.\nOnly adjacent elements are passed to the comparison function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.21.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) → Boolean) → [a] → [[a]]",
                "value": "((a, a) → Boolean) → [a] → [[a]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function for determining whether two given (adjacent)\n       elements should be in the same group",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to group. Also accepts a string, which will be\n       treated as a list of characters.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "List"
                    ]
                },
                "description": "A list that contains sublists of elements,\n        whose concatenations are equal to the original list."
            }
        ],
        "examples": [
            "R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n//=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n\nR.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n//=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n\nR.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n//=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n\nconst isVowel = R.test(/^[aeiou]$/i);\nR.groupWith(R.eqBy(isVowel), 'aestiou')\n//=> ['ae', 'st', 'iou']"
        ],
        "name": "groupWith",
        "longname": "R.groupWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1319,
                1327
            ],
            "filename": "groupWith.js",
            "lineno": 40,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004934",
                "name": "res",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "res",
        "longname": "<anonymous>~res",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1335,
                1342
            ],
            "filename": "groupWith.js",
            "lineno": 41,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004938",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1350,
                1367
            ],
            "filename": "groupWith.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004942",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1400,
                1417
            ],
            "filename": "groupWith.js",
            "lineno": 45,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004953",
                "name": "nextidx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nextidx",
        "longname": "<anonymous>~nextidx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1494,
                1506
            ],
            "filename": "groupWith.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004975",
                "name": "nextidx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nextidx",
        "longname": "<anonymous>~nextidx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1559,
                1572
            ],
            "filename": "groupWith.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004990",
                "name": "idx",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "nextidx",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1598,
                1624
            ],
            "filename": "groupWith.js",
            "lineno": 58,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100004996",
                "name": "module.exports",
                "type": "Identifier",
                "value": "groupWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "gt.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005004",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */",
        "meta": {
            "range": [
                509,
                574
            ],
            "filename": "gt.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005010",
                "name": "gt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the first argument is greater than the second; `false`\notherwise.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord a => a -> a -> Boolean",
                "value": "Ord a => a -> a -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.lt"
        ],
        "examples": [
            "R.gt(2, 1); //=> true\n     R.gt(2, 2); //=> false\n     R.gt(2, 3); //=> false\n     R.gt('a', 'z'); //=> false\n     R.gt('z', 'a'); //=> true"
        ],
        "name": "gt",
        "longname": "R.gt",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                577,
                596
            ],
            "filename": "gt.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005024",
                "name": "module.exports",
                "type": "Identifier",
                "value": "gt",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "gte.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005032",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */",
        "meta": {
            "range": [
                536,
                604
            ],
            "filename": "gte.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005038",
                "name": "gte",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the first argument is greater than or equal to the second;\n`false` otherwise.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord a => a -> a -> Boolean",
                "value": "Ord a => a -> a -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.lte"
        ],
        "examples": [
            "R.gte(2, 1); //=> true\n     R.gte(2, 2); //=> true\n     R.gte(2, 3); //=> false\n     R.gte('a', 'z'); //=> false\n     R.gte('z', 'a'); //=> true"
        ],
        "name": "gte",
        "longname": "R.gte",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                607,
                627
            ],
            "filename": "gte.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005052",
                "name": "module.exports",
                "type": "Identifier",
                "value": "gte",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "has.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005060",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                114
            ],
            "filename": "has.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005066",
                "name": "hasPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "hasPath",
        "longname": "hasPath",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      const hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      const point = {x: 0, y: 0};\n *      const pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */",
        "meta": {
            "range": [
                842,
                929
            ],
            "filename": "has.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005072",
                "name": "has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns whether or not an object has an own property with the specified name",
        "kind": "function",
        "memberof": "R",
        "since": "v0.7.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "s -> {s: x} -> Boolean",
                "value": "s -> {s: x} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the property to check for.",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to query.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the property exists."
            }
        ],
        "examples": [
            "const hasName = R.has('name');\n     hasName({name: 'alice'});   //=> true\n     hasName({name: 'bob'});     //=> true\n     hasName({});                //=> false\n\n     const point = {x: 0, y: 0};\n     const pointHas = R.has(R.__, point);\n     pointHas('x');  //=> true\n     pointHas('y');  //=> true\n     pointHas('z');  //=> false"
        ],
        "name": "has",
        "longname": "R.has",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                932,
                952
            ],
            "filename": "has.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005088",
                "name": "module.exports",
                "type": "Identifier",
                "value": "has",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "hasIn.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005096",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "hasIn.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005102",
                "name": "isNil",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isNil",
        "longname": "isNil",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns whether or not an object or its prototype chain has a property with\n * the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      function Rectangle(width, height) {\n *        this.width = width;\n *        this.height = height;\n *      }\n *      Rectangle.prototype.area = function() {\n *        return this.width * this.height;\n *      };\n *\n *      const square = new Rectangle(2, 2);\n *      R.hasIn('width', square);  //=> true\n *      R.hasIn('area', square);  //=> true\n */",
        "meta": {
            "range": [
                848,
                973
            ],
            "filename": "hasIn.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005108",
                "name": "hasIn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns whether or not an object or its prototype chain has a property with\nthe specified name",
        "kind": "function",
        "memberof": "R",
        "since": "v0.7.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "s -> {s: x} -> Boolean",
                "value": "s -> {s: x} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the property to check for.",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to query.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the property exists."
            }
        ],
        "examples": [
            "function Rectangle(width, height) {\n       this.width = width;\n       this.height = height;\n     }\n     Rectangle.prototype.area = function() {\n       return this.width * this.height;\n     };\n\n     const square = new Rectangle(2, 2);\n     R.hasIn('width', square);  //=> true\n     R.hasIn('area', square);  //=> true"
        ],
        "name": "hasIn",
        "longname": "R.hasIn",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                976,
                998
            ],
            "filename": "hasIn.js",
            "lineno": 46,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005129",
                "name": "module.exports",
                "type": "Identifier",
                "value": "hasIn",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "hasPath.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005137",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "hasPath.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005143",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                167
            ],
            "filename": "hasPath.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005149",
                "name": "isNil",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isNil",
        "longname": "isNil",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns whether or not a path exists in an object. Only the object's\n * own properties are checked.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {a} -> Boolean\n * @param {Array} path The path to use.\n * @param {Object} obj The object to check the path in.\n * @return {Boolean} Whether the path exists.\n * @see R.has\n * @example\n *\n *      R.hasPath(['a', 'b'], {a: {b: 2}});         // => true\n *      R.hasPath(['a', 'b'], {a: {b: undefined}}); // => true\n *      R.hasPath(['a', 'b'], {a: {c: 2}});         // => false\n *      R.hasPath(['a', 'b'], {});                  // => false\n */",
        "meta": {
            "range": [
                849,
                1195
            ],
            "filename": "hasPath.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005155",
                "name": "hasPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns whether or not a path exists in an object. Only the object's\nown properties are checked.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Idx] -> {a} -> Boolean",
                "value": "[Idx] -> {a} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The path to use.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to check the path in.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the path exists."
            }
        ],
        "see": [
            "R.has"
        ],
        "examples": [
            "R.hasPath(['a', 'b'], {a: {b: 2}});         // => true\n     R.hasPath(['a', 'b'], {a: {b: undefined}}); // => true\n     R.hasPath(['a', 'b'], {a: {c: 2}});         // => false\n     R.hasPath(['a', 'b'], {});                  // => false"
        ],
        "name": "hasPath",
        "longname": "R.hasPath",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                983,
                992
            ],
            "filename": "hasPath.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005178",
                "name": "val",
                "type": "Identifier",
                "value": "obj"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1000,
                1007
            ],
            "filename": "hasPath.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005182",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1095,
                1116
            ],
            "filename": "hasPath.js",
            "lineno": 47,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005206",
                "name": "val",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "val[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1124,
                1132
            ],
            "filename": "hasPath.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005214",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1198,
                1222
            ],
            "filename": "hasPath.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005223",
                "name": "module.exports",
                "type": "Identifier",
                "value": "hasPath",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                43
            ],
            "filename": "head.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005231",
                "name": "nth",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nth",
        "longname": "nth",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> ''\n */",
        "meta": {
            "range": [
                522,
                549
            ],
            "filename": "head.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005237",
                "name": "head",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the first element of the given list or string. In some libraries\nthis function is named `first`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> a | Undefined",
                "value": "[a] -> a | Undefined"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String",
                "value": "String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "String"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.tail, R.init, R.last"
        ],
        "examples": [
            "R.head(['fi', 'fo', 'fum']); //=> 'fi'\n     R.head([]); //=> undefined\n\n     R.head('abc'); //=> 'a'\n     R.head(''); //=> ''"
        ],
        "name": "head",
        "longname": "R.head",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                551,
                572
            ],
            "filename": "head.js",
            "lineno": 30,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005243",
                "name": "module.exports",
                "type": "Identifier",
                "value": "head",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                64
            ],
            "filename": "identical.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005251",
                "name": "_objectIs",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_objectIs",
        "longname": "_objectIs",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * Note this is merely a curried version of ES6 `Object.is`.\n *\n * `identical` does not support the `__` placeholder.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      const o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */",
        "meta": {
            "range": [
                806,
                1226
            ],
            "filename": "identical.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005257",
                "name": "identical",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns true if its arguments are identical, false otherwise. Values are\nidentical if they reference the same memory. `NaN` is identical to `NaN`;\n`0` and `-0` are not identical.\n\nNote this is merely a curried version of ES6 `Object.is`.\n\n`identical` does not support the `__` placeholder.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.15.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> a -> Boolean",
                "value": "a -> a -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const o = {};\n     R.identical(o, o); //=> true\n     R.identical(1, 1); //=> true\n     R.identical(1, '1'); //=> false\n     R.identical([], []); //=> false\n     R.identical(0, -0); //=> false\n     R.identical(NaN, NaN); //=> true"
        ],
        "name": "identical",
        "longname": "R.identical",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1561,
                1587
            ],
            "filename": "identical.js",
            "lineno": 61,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005303",
                "name": "module.exports",
                "type": "Identifier",
                "value": "identical",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "identity.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005311",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                127
            ],
            "filename": "identity.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005317",
                "name": "_identity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_identity",
        "longname": "_identity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      const obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */",
        "meta": {
            "range": [
                559,
                602
            ],
            "filename": "identity.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005323",
                "name": "identity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "A function that does nothing but return the parameter supplied to it. Good\nas a default or placeholder function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> a",
                "value": "a -> a"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.identity(a) = a",
                "value": "R.identity(a) = a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to return.",
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The input value, `x`."
            }
        ],
        "examples": [
            "R.identity(1); //=> 1\n\n     const obj = {};\n     R.identity(obj) === obj; //=> true"
        ],
        "name": "identity",
        "longname": "R.identity",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                605,
                630
            ],
            "filename": "identity.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005329",
                "name": "module.exports",
                "type": "Identifier",
                "value": "identity",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "ifElse.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005337",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "ifElse.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005343",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * Note that `ifElse` takes its arity from the longest of the three functions passed to it.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when, R.cond\n * @example\n *\n *      const incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({ count: 1 }); //=> { count: 2 }\n *      incCount({});           //=> { count: 1 }\n */",
        "meta": {
            "range": [
                1227,
                1518
            ],
            "filename": "ifElse.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005349",
                "name": "ifElse",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a function that will process either the `onTrue` or the `onFalse`\nfunction depending upon the result of the `condition` predicate.\n\nNote that `ifElse` takes its arity from the longest of the three functions passed to it.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)",
                "value": "(*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate function",
                "name": "condition"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to invoke when the `condition` evaluates to a truthy value.",
                "name": "onTrue"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to invoke when the `condition` evaluates to a falsy value.",
                "name": "onFalse"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new function that will process either the `onTrue` or the `onFalse`\n                   function depending upon the result of the `condition` predicate."
            }
        ],
        "see": [
            "R.unless, R.when, R.cond"
        ],
        "examples": [
            "const incCount = R.ifElse(\n       R.has('count'),\n       R.over(R.lensProp('count'), R.inc),\n       R.assoc('count', 1)\n     );\n     incCount({ count: 1 }); //=> { count: 2 }\n     incCount({});           //=> { count: 1 }"
        ],
        "name": "ifElse",
        "longname": "R.ifElse",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1521,
                1544
            ],
            "filename": "ifElse.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005399",
                "name": "module.exports",
                "type": "Identifier",
                "value": "ifElse",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                43
            ],
            "filename": "inc.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005407",
                "name": "add",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "add",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */",
        "meta": {
            "range": [
                277,
                303
            ],
            "filename": "inc.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005413",
                "name": "inc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Increments its argument.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number",
                "value": "Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "n"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "n + 1"
            }
        ],
        "see": [
            "R.dec"
        ],
        "examples": [
            "R.inc(42); //=> 43"
        ],
        "name": "inc",
        "longname": "R.inc",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                305,
                325
            ],
            "filename": "inc.js",
            "lineno": 24,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005419",
                "name": "module.exports",
                "type": "Identifier",
                "value": "inc",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                64
            ],
            "filename": "includes.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005427",
                "name": "_includes",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_includes",
        "longname": "_includes",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                127
            ],
            "filename": "includes.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005433",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the specified value is equal, in [`R.equals`](#equals)\n * terms, to at least one element of the given list; `false` otherwise.\n * Also works with strings.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category List\n * @sig a -> [a] -> Boolean\n * @param {Object} a The item to compare against.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n * @see R.any\n * @example\n *\n *      R.includes(3, [1, 2, 3]); //=> true\n *      R.includes(4, [1, 2, 3]); //=> false\n *      R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n *      R.includes([42], [[42]]); //=> true\n *      R.includes('ba', 'banana'); //=>true\n */",
        "meta": {
            "range": [
                866,
                909
            ],
            "filename": "includes.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005439",
                "name": "includes",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the specified value is equal, in [`R.equals`](#equals)\nterms, to at least one element of the given list; `false` otherwise.\nAlso works with strings.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> [a] -> Boolean",
                "value": "a -> [a] -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The item to compare against.",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "`true` if an equivalent item is in the list, `false` otherwise."
            }
        ],
        "see": [
            "R.any"
        ],
        "examples": [
            "R.includes(3, [1, 2, 3]); //=> true\n     R.includes(4, [1, 2, 3]); //=> false\n     R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n     R.includes([42], [[42]]); //=> true\n     R.includes('ba', 'banana'); //=>true"
        ],
        "name": "includes",
        "longname": "R.includes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                912,
                937
            ],
            "filename": "includes.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005445",
                "name": "module.exports",
                "type": "Identifier",
                "value": "includes",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                0,
                19
            ],
            "filename": "index.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005453",
                "name": "module.exports",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                71
            ],
            "filename": "index.js",
            "lineno": 2,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005459",
                "name": "module.exports.F",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "F",
        "longname": "F",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73,
                123
            ],
            "filename": "index.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005469",
                "name": "module.exports.T",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "T",
        "longname": "T",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125,
                177
            ],
            "filename": "index.js",
            "lineno": 8,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005479",
                "name": "module.exports.__",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__",
        "longname": "__",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                179,
                233
            ],
            "filename": "index.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005489",
                "name": "module.exports.add",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "add",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                235,
                299
            ],
            "filename": "index.js",
            "lineno": 14,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005499",
                "name": "module.exports.addIndex",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "addIndex",
        "longname": "addIndex",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                301,
                375
            ],
            "filename": "index.js",
            "lineno": 17,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005509",
                "name": "module.exports.addIndexRight",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "addIndexRight",
        "longname": "addIndexRight",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                377,
                437
            ],
            "filename": "index.js",
            "lineno": 20,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005519",
                "name": "module.exports.adjust",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "adjust",
        "longname": "adjust",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                439,
                493
            ],
            "filename": "index.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005529",
                "name": "module.exports.all",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "all",
        "longname": "all",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                495,
                557
            ],
            "filename": "index.js",
            "lineno": 26,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005539",
                "name": "module.exports.allPass",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "allPass",
        "longname": "allPass",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                559,
                619
            ],
            "filename": "index.js",
            "lineno": 29,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005549",
                "name": "module.exports.always",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "always",
        "longname": "always",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                621,
                675
            ],
            "filename": "index.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005559",
                "name": "module.exports.and",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "and",
        "longname": "and",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                677,
                731
            ],
            "filename": "index.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005569",
                "name": "module.exports.any",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "any",
        "longname": "any",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                733,
                795
            ],
            "filename": "index.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005579",
                "name": "module.exports.anyPass",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "anyPass",
        "longname": "anyPass",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                797,
                849
            ],
            "filename": "index.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005589",
                "name": "module.exports.ap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "ap",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                851,
                915
            ],
            "filename": "index.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005599",
                "name": "module.exports.aperture",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "aperture",
        "longname": "aperture",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                917,
                977
            ],
            "filename": "index.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005609",
                "name": "module.exports.append",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "append",
        "longname": "append",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                979,
                1037
            ],
            "filename": "index.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005619",
                "name": "module.exports.apply",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "apply",
        "longname": "apply",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1039,
                1105
            ],
            "filename": "index.js",
            "lineno": 53,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005629",
                "name": "module.exports.applySpec",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "applySpec",
        "longname": "applySpec",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1107,
                1169
            ],
            "filename": "index.js",
            "lineno": 56,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005639",
                "name": "module.exports.applyTo",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "applyTo",
        "longname": "applyTo",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1171,
                1231
            ],
            "filename": "index.js",
            "lineno": 59,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005649",
                "name": "module.exports.ascend",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ascend",
        "longname": "ascend",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1233,
                1291
            ],
            "filename": "index.js",
            "lineno": 62,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005659",
                "name": "module.exports.assoc",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "assoc",
        "longname": "assoc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1293,
                1359
            ],
            "filename": "index.js",
            "lineno": 65,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005669",
                "name": "module.exports.assocPath",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "assocPath",
        "longname": "assocPath",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1361,
                1421
            ],
            "filename": "index.js",
            "lineno": 68,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005679",
                "name": "module.exports.binary",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "binary",
        "longname": "binary",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1423,
                1479
            ],
            "filename": "index.js",
            "lineno": 71,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005689",
                "name": "module.exports.bind",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bind",
        "longname": "bind",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1481,
                1537
            ],
            "filename": "index.js",
            "lineno": 74,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005699",
                "name": "module.exports.both",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "both",
        "longname": "both",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1539,
                1595
            ],
            "filename": "index.js",
            "lineno": 77,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005709",
                "name": "module.exports.call",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "call",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1597,
                1655
            ],
            "filename": "index.js",
            "lineno": 80,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005719",
                "name": "module.exports.chain",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "chain",
        "longname": "chain",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1657,
                1715
            ],
            "filename": "index.js",
            "lineno": 83,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005729",
                "name": "module.exports.clamp",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "clamp",
        "longname": "clamp",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1717,
                1775
            ],
            "filename": "index.js",
            "lineno": 86,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005739",
                "name": "module.exports.clone",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "clone",
        "longname": "clone",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1777,
                1843
            ],
            "filename": "index.js",
            "lineno": 89,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005749",
                "name": "module.exports.collectBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "collectBy",
        "longname": "collectBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1845,
                1913
            ],
            "filename": "index.js",
            "lineno": 92,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005759",
                "name": "module.exports.comparator",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "comparator",
        "longname": "comparator",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1915,
                1983
            ],
            "filename": "index.js",
            "lineno": 95,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005769",
                "name": "module.exports.complement",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "complement",
        "longname": "complement",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1985,
                2047
            ],
            "filename": "index.js",
            "lineno": 98,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005779",
                "name": "module.exports.compose",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "compose",
        "longname": "compose",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2049,
                2119
            ],
            "filename": "index.js",
            "lineno": 101,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005789",
                "name": "module.exports.composeWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "composeWith",
        "longname": "composeWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2121,
                2181
            ],
            "filename": "index.js",
            "lineno": 104,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005799",
                "name": "module.exports.concat",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "concat",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2183,
                2239
            ],
            "filename": "index.js",
            "lineno": 107,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005809",
                "name": "module.exports.cond",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cond",
        "longname": "cond",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2241,
                2307
            ],
            "filename": "index.js",
            "lineno": 110,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005819",
                "name": "module.exports.construct",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "construct",
        "longname": "construct",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2309,
                2377
            ],
            "filename": "index.js",
            "lineno": 113,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005829",
                "name": "module.exports.constructN",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "constructN",
        "longname": "constructN",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2379,
                2443
            ],
            "filename": "index.js",
            "lineno": 116,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005839",
                "name": "module.exports.converge",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "converge",
        "longname": "converge",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2445,
                2503
            ],
            "filename": "index.js",
            "lineno": 119,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005849",
                "name": "module.exports.count",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "count",
        "longname": "count",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2505,
                2567
            ],
            "filename": "index.js",
            "lineno": 122,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005859",
                "name": "module.exports.countBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "countBy",
        "longname": "countBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2569,
                2627
            ],
            "filename": "index.js",
            "lineno": 125,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005869",
                "name": "module.exports.curry",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "curry",
        "longname": "curry",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2629,
                2689
            ],
            "filename": "index.js",
            "lineno": 128,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005879",
                "name": "module.exports.curryN",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2691,
                2745
            ],
            "filename": "index.js",
            "lineno": 131,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005889",
                "name": "module.exports.dec",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dec",
        "longname": "dec",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2747,
                2813
            ],
            "filename": "index.js",
            "lineno": 134,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005899",
                "name": "module.exports.defaultTo",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "defaultTo",
        "longname": "defaultTo",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2815,
                2877
            ],
            "filename": "index.js",
            "lineno": 137,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005909",
                "name": "module.exports.descend",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "descend",
        "longname": "descend",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2879,
                2947
            ],
            "filename": "index.js",
            "lineno": 140,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005919",
                "name": "module.exports.difference",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "difference",
        "longname": "difference",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2949,
                3025
            ],
            "filename": "index.js",
            "lineno": 143,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005929",
                "name": "module.exports.differenceWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "differenceWith",
        "longname": "differenceWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3027,
                3087
            ],
            "filename": "index.js",
            "lineno": 146,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005939",
                "name": "module.exports.dissoc",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dissoc",
        "longname": "dissoc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3089,
                3157
            ],
            "filename": "index.js",
            "lineno": 149,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005949",
                "name": "module.exports.dissocPath",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dissocPath",
        "longname": "dissocPath",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3159,
                3219
            ],
            "filename": "index.js",
            "lineno": 152,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005959",
                "name": "module.exports.divide",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "divide",
        "longname": "divide",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3221,
                3277
            ],
            "filename": "index.js",
            "lineno": 155,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005969",
                "name": "module.exports.drop",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "drop",
        "longname": "drop",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3279,
                3343
            ],
            "filename": "index.js",
            "lineno": 158,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005979",
                "name": "module.exports.dropLast",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dropLast",
        "longname": "dropLast",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3345,
                3419
            ],
            "filename": "index.js",
            "lineno": 161,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005989",
                "name": "module.exports.dropLastWhile",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dropLastWhile",
        "longname": "dropLastWhile",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3421,
                3491
            ],
            "filename": "index.js",
            "lineno": 164,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100005999",
                "name": "module.exports.dropRepeats",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dropRepeats",
        "longname": "dropRepeats",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3493,
                3567
            ],
            "filename": "index.js",
            "lineno": 167,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006009",
                "name": "module.exports.dropRepeatsBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dropRepeatsBy",
        "longname": "dropRepeatsBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3569,
                3647
            ],
            "filename": "index.js",
            "lineno": 170,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006019",
                "name": "module.exports.dropRepeatsWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dropRepeatsWith",
        "longname": "dropRepeatsWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3649,
                3715
            ],
            "filename": "index.js",
            "lineno": 173,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006029",
                "name": "module.exports.dropWhile",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dropWhile",
        "longname": "dropWhile",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3717,
                3777
            ],
            "filename": "index.js",
            "lineno": 176,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006039",
                "name": "module.exports.either",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "either",
        "longname": "either",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3779,
                3837
            ],
            "filename": "index.js",
            "lineno": 179,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006049",
                "name": "module.exports.empty",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "empty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3839,
                3903
            ],
            "filename": "index.js",
            "lineno": 182,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006059",
                "name": "module.exports.endsWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "endsWith",
        "longname": "endsWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3905,
                3961
            ],
            "filename": "index.js",
            "lineno": 185,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006069",
                "name": "module.exports.eqBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "eqBy",
        "longname": "eqBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3963,
                4025
            ],
            "filename": "index.js",
            "lineno": 188,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006079",
                "name": "module.exports.eqProps",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "eqProps",
        "longname": "eqProps",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4027,
                4087
            ],
            "filename": "index.js",
            "lineno": 191,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006089",
                "name": "module.exports.equals",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4089,
                4149
            ],
            "filename": "index.js",
            "lineno": 194,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006099",
                "name": "module.exports.evolve",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "evolve",
        "longname": "evolve",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4151,
                4211
            ],
            "filename": "index.js",
            "lineno": 197,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006109",
                "name": "module.exports.filter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "filter",
        "longname": "filter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4213,
                4269
            ],
            "filename": "index.js",
            "lineno": 200,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006119",
                "name": "module.exports.find",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "find",
        "longname": "find",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4271,
                4337
            ],
            "filename": "index.js",
            "lineno": 203,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006129",
                "name": "module.exports.findIndex",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "findIndex",
        "longname": "findIndex",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4339,
                4403
            ],
            "filename": "index.js",
            "lineno": 206,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006139",
                "name": "module.exports.findLast",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "findLast",
        "longname": "findLast",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4405,
                4479
            ],
            "filename": "index.js",
            "lineno": 209,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006149",
                "name": "module.exports.findLastIndex",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "findLastIndex",
        "longname": "findLastIndex",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4481,
                4543
            ],
            "filename": "index.js",
            "lineno": 212,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006159",
                "name": "module.exports.flatten",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flatten",
        "longname": "flatten",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4545,
                4601
            ],
            "filename": "index.js",
            "lineno": 215,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006169",
                "name": "module.exports.flip",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flip",
        "longname": "flip",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4603,
                4665
            ],
            "filename": "index.js",
            "lineno": 218,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006179",
                "name": "module.exports.forEach",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "forEach",
        "longname": "forEach",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4667,
                4749
            ],
            "filename": "index.js",
            "lineno": 221,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006189",
                "name": "module.exports.forEachObjIndexed",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "forEachObjIndexed",
        "longname": "forEachObjIndexed",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4751,
                4817
            ],
            "filename": "index.js",
            "lineno": 224,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006199",
                "name": "module.exports.fromPairs",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "fromPairs",
        "longname": "fromPairs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4819,
                4881
            ],
            "filename": "index.js",
            "lineno": 227,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006209",
                "name": "module.exports.groupBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "groupBy",
        "longname": "groupBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4883,
                4949
            ],
            "filename": "index.js",
            "lineno": 230,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006219",
                "name": "module.exports.groupWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "groupWith",
        "longname": "groupWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4951,
                5003
            ],
            "filename": "index.js",
            "lineno": 233,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006229",
                "name": "module.exports.gt",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "gt",
        "longname": "gt",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5005,
                5059
            ],
            "filename": "index.js",
            "lineno": 236,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006239",
                "name": "module.exports.gte",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "gte",
        "longname": "gte",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5061,
                5115
            ],
            "filename": "index.js",
            "lineno": 239,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006249",
                "name": "module.exports.has",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "has",
        "longname": "has",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5117,
                5175
            ],
            "filename": "index.js",
            "lineno": 242,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006259",
                "name": "module.exports.hasIn",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hasIn",
        "longname": "hasIn",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5177,
                5239
            ],
            "filename": "index.js",
            "lineno": 245,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006269",
                "name": "module.exports.hasPath",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hasPath",
        "longname": "hasPath",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5241,
                5297
            ],
            "filename": "index.js",
            "lineno": 248,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006279",
                "name": "module.exports.head",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "head",
        "longname": "head",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5299,
                5365
            ],
            "filename": "index.js",
            "lineno": 251,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006289",
                "name": "module.exports.identical",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identical",
        "longname": "identical",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5367,
                5431
            ],
            "filename": "index.js",
            "lineno": 254,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006299",
                "name": "module.exports.identity",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "identity",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5433,
                5493
            ],
            "filename": "index.js",
            "lineno": 257,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006309",
                "name": "module.exports.ifElse",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ifElse",
        "longname": "ifElse",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5495,
                5549
            ],
            "filename": "index.js",
            "lineno": 260,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006319",
                "name": "module.exports.inc",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "inc",
        "longname": "inc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5551,
                5615
            ],
            "filename": "index.js",
            "lineno": 263,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006329",
                "name": "module.exports.includes",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "includes",
        "longname": "includes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5617,
                5679
            ],
            "filename": "index.js",
            "lineno": 266,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006339",
                "name": "module.exports.indexBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "indexBy",
        "longname": "indexBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5681,
                5743
            ],
            "filename": "index.js",
            "lineno": 269,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006349",
                "name": "module.exports.indexOf",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "indexOf",
        "longname": "indexOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5745,
                5801
            ],
            "filename": "index.js",
            "lineno": 272,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006359",
                "name": "module.exports.init",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "init",
        "longname": "init",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5803,
                5869
            ],
            "filename": "index.js",
            "lineno": 275,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006369",
                "name": "module.exports.innerJoin",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "innerJoin",
        "longname": "innerJoin",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5871,
                5931
            ],
            "filename": "index.js",
            "lineno": 278,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006379",
                "name": "module.exports.insert",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "insert",
        "longname": "insert",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5933,
                5999
            ],
            "filename": "index.js",
            "lineno": 281,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006389",
                "name": "module.exports.insertAll",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "insertAll",
        "longname": "insertAll",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6001,
                6073
            ],
            "filename": "index.js",
            "lineno": 284,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006399",
                "name": "module.exports.intersection",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "intersection",
        "longname": "intersection",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6075,
                6145
            ],
            "filename": "index.js",
            "lineno": 287,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006409",
                "name": "module.exports.intersperse",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "intersperse",
        "longname": "intersperse",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6147,
                6203
            ],
            "filename": "index.js",
            "lineno": 290,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006419",
                "name": "module.exports.into",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "into",
        "longname": "into",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6205,
                6265
            ],
            "filename": "index.js",
            "lineno": 293,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006429",
                "name": "module.exports.invert",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "invert",
        "longname": "invert",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6267,
                6333
            ],
            "filename": "index.js",
            "lineno": 296,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006439",
                "name": "module.exports.invertObj",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "invertObj",
        "longname": "invertObj",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6335,
                6397
            ],
            "filename": "index.js",
            "lineno": 299,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006449",
                "name": "module.exports.invoker",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "invoker",
        "longname": "invoker",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6399,
                6451
            ],
            "filename": "index.js",
            "lineno": 302,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006459",
                "name": "module.exports.is",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "is",
        "longname": "is",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6453,
                6515
            ],
            "filename": "index.js",
            "lineno": 305,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006469",
                "name": "module.exports.isEmpty",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isEmpty",
        "longname": "isEmpty",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6517,
                6575
            ],
            "filename": "index.js",
            "lineno": 308,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006479",
                "name": "module.exports.isNil",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isNil",
        "longname": "isNil",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6577,
                6641
            ],
            "filename": "index.js",
            "lineno": 311,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006489",
                "name": "module.exports.isNotNil",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isNotNil",
        "longname": "isNotNil",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6643,
                6699
            ],
            "filename": "index.js",
            "lineno": 314,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006499",
                "name": "module.exports.join",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "join",
        "longname": "join",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6701,
                6757
            ],
            "filename": "index.js",
            "lineno": 317,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006509",
                "name": "module.exports.juxt",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "juxt",
        "longname": "juxt",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6759,
                6815
            ],
            "filename": "index.js",
            "lineno": 320,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006519",
                "name": "module.exports.keys",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6817,
                6877
            ],
            "filename": "index.js",
            "lineno": 323,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006529",
                "name": "module.exports.keysIn",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "keysIn",
        "longname": "keysIn",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6879,
                6935
            ],
            "filename": "index.js",
            "lineno": 326,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006539",
                "name": "module.exports.last",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "last",
        "longname": "last",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6937,
                7007
            ],
            "filename": "index.js",
            "lineno": 329,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006549",
                "name": "module.exports.lastIndexOf",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastIndexOf",
        "longname": "lastIndexOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7009,
                7069
            ],
            "filename": "index.js",
            "lineno": 332,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006559",
                "name": "module.exports.length",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "length",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7071,
                7127
            ],
            "filename": "index.js",
            "lineno": 335,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006569",
                "name": "module.exports.lens",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lens",
        "longname": "lens",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7129,
                7195
            ],
            "filename": "index.js",
            "lineno": 338,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006579",
                "name": "module.exports.lensIndex",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lensIndex",
        "longname": "lensIndex",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7197,
                7261
            ],
            "filename": "index.js",
            "lineno": 341,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006589",
                "name": "module.exports.lensPath",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lensPath",
        "longname": "lensPath",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7263,
                7327
            ],
            "filename": "index.js",
            "lineno": 344,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006599",
                "name": "module.exports.lensProp",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lensProp",
        "longname": "lensProp",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7329,
                7385
            ],
            "filename": "index.js",
            "lineno": 347,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006609",
                "name": "module.exports.lift",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lift",
        "longname": "lift",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7387,
                7445
            ],
            "filename": "index.js",
            "lineno": 350,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006619",
                "name": "module.exports.liftN",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "liftN",
        "longname": "liftN",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7447,
                7499
            ],
            "filename": "index.js",
            "lineno": 353,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006629",
                "name": "module.exports.lt",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lt",
        "longname": "lt",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7501,
                7555
            ],
            "filename": "index.js",
            "lineno": 356,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006639",
                "name": "module.exports.lte",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lte",
        "longname": "lte",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7557,
                7611
            ],
            "filename": "index.js",
            "lineno": 359,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006649",
                "name": "module.exports.map",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7613,
                7677
            ],
            "filename": "index.js",
            "lineno": 362,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006659",
                "name": "module.exports.mapAccum",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mapAccum",
        "longname": "mapAccum",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7679,
                7753
            ],
            "filename": "index.js",
            "lineno": 365,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006669",
                "name": "module.exports.mapAccumRight",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mapAccumRight",
        "longname": "mapAccumRight",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7755,
                7829
            ],
            "filename": "index.js",
            "lineno": 368,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006679",
                "name": "module.exports.mapObjIndexed",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mapObjIndexed",
        "longname": "mapObjIndexed",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7831,
                7889
            ],
            "filename": "index.js",
            "lineno": 371,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006689",
                "name": "module.exports.match",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "match",
        "longname": "match",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7891,
                7953
            ],
            "filename": "index.js",
            "lineno": 374,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006699",
                "name": "module.exports.mathMod",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mathMod",
        "longname": "mathMod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7955,
                8009
            ],
            "filename": "index.js",
            "lineno": 377,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006709",
                "name": "module.exports.max",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "max",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8011,
                8069
            ],
            "filename": "index.js",
            "lineno": 380,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006719",
                "name": "module.exports.maxBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "maxBy",
        "longname": "maxBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8071,
                8127
            ],
            "filename": "index.js",
            "lineno": 383,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006729",
                "name": "module.exports.mean",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mean",
        "longname": "mean",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8129,
                8189
            ],
            "filename": "index.js",
            "lineno": 386,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006739",
                "name": "module.exports.median",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "median",
        "longname": "median",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8191,
                8261
            ],
            "filename": "index.js",
            "lineno": 389,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006749",
                "name": "module.exports.memoizeWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "memoizeWith",
        "longname": "memoizeWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8263,
                8327
            ],
            "filename": "index.js",
            "lineno": 392,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006759",
                "name": "module.exports.mergeAll",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeAll",
        "longname": "mergeAll",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8329,
                8403
            ],
            "filename": "index.js",
            "lineno": 395,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006769",
                "name": "module.exports.mergeDeepLeft",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeDeepLeft",
        "longname": "mergeDeepLeft",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8405,
                8481
            ],
            "filename": "index.js",
            "lineno": 398,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006779",
                "name": "module.exports.mergeDeepRight",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeDeepRight",
        "longname": "mergeDeepRight",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8483,
                8557
            ],
            "filename": "index.js",
            "lineno": 401,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006789",
                "name": "module.exports.mergeDeepWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeDeepWith",
        "longname": "mergeDeepWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8559,
                8639
            ],
            "filename": "index.js",
            "lineno": 404,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006799",
                "name": "module.exports.mergeDeepWithKey",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeDeepWithKey",
        "longname": "mergeDeepWithKey",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8641,
                8707
            ],
            "filename": "index.js",
            "lineno": 407,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006809",
                "name": "module.exports.mergeLeft",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeLeft",
        "longname": "mergeLeft",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8709,
                8777
            ],
            "filename": "index.js",
            "lineno": 410,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006819",
                "name": "module.exports.mergeRight",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeRight",
        "longname": "mergeRight",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8779,
                8845
            ],
            "filename": "index.js",
            "lineno": 413,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006829",
                "name": "module.exports.mergeWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeWith",
        "longname": "mergeWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8847,
                8919
            ],
            "filename": "index.js",
            "lineno": 416,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006839",
                "name": "module.exports.mergeWithKey",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mergeWithKey",
        "longname": "mergeWithKey",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8921,
                8975
            ],
            "filename": "index.js",
            "lineno": 419,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006849",
                "name": "module.exports.min",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "min",
        "longname": "min",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8977,
                9035
            ],
            "filename": "index.js",
            "lineno": 422,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006859",
                "name": "module.exports.minBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "minBy",
        "longname": "minBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9037,
                9097
            ],
            "filename": "index.js",
            "lineno": 425,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006869",
                "name": "module.exports.modify",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "modify",
        "longname": "modify",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9099,
                9167
            ],
            "filename": "index.js",
            "lineno": 428,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006879",
                "name": "module.exports.modifyPath",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "modifyPath",
        "longname": "modifyPath",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9169,
                9229
            ],
            "filename": "index.js",
            "lineno": 431,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006889",
                "name": "module.exports.modulo",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "modulo",
        "longname": "modulo",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9231,
                9287
            ],
            "filename": "index.js",
            "lineno": 434,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006899",
                "name": "module.exports.move",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "move",
        "longname": "move",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9289,
                9353
            ],
            "filename": "index.js",
            "lineno": 437,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006909",
                "name": "module.exports.multiply",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "multiply",
        "longname": "multiply",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9355,
                9411
            ],
            "filename": "index.js",
            "lineno": 440,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006919",
                "name": "module.exports.nAry",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nAry",
        "longname": "nAry",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9413,
                9487
            ],
            "filename": "index.js",
            "lineno": 443,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006929",
                "name": "module.exports.partialObject",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "partialObject",
        "longname": "partialObject",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9489,
                9549
            ],
            "filename": "index.js",
            "lineno": 446,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006939",
                "name": "module.exports.negate",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "negate",
        "longname": "negate",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9551,
                9607
            ],
            "filename": "index.js",
            "lineno": 449,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006949",
                "name": "module.exports.none",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "none",
        "longname": "none",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9609,
                9663
            ],
            "filename": "index.js",
            "lineno": 452,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006959",
                "name": "module.exports.not",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "not",
        "longname": "not",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9665,
                9719
            ],
            "filename": "index.js",
            "lineno": 455,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006969",
                "name": "module.exports.nth",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nth",
        "longname": "nth",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9721,
                9781
            ],
            "filename": "index.js",
            "lineno": 458,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006979",
                "name": "module.exports.nthArg",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nthArg",
        "longname": "nthArg",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9783,
                9833
            ],
            "filename": "index.js",
            "lineno": 461,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006989",
                "name": "module.exports.o",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "o",
        "longname": "o",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9835,
                9893
            ],
            "filename": "index.js",
            "lineno": 464,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100006999",
                "name": "module.exports.objOf",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "objOf",
        "longname": "objOf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9895,
                9947
            ],
            "filename": "index.js",
            "lineno": 467,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007009",
                "name": "module.exports.of",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "of",
        "longname": "of",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9949,
                10005
            ],
            "filename": "index.js",
            "lineno": 470,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007019",
                "name": "module.exports.omit",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "omit",
        "longname": "omit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10007,
                10059
            ],
            "filename": "index.js",
            "lineno": 473,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007029",
                "name": "module.exports.on",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "on",
        "longname": "on",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10061,
                10117
            ],
            "filename": "index.js",
            "lineno": 476,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007039",
                "name": "module.exports.once",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "once",
        "longname": "once",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10119,
                10171
            ],
            "filename": "index.js",
            "lineno": 479,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007049",
                "name": "module.exports.or",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "or",
        "longname": "or",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10173,
                10239
            ],
            "filename": "index.js",
            "lineno": 482,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007059",
                "name": "module.exports.otherwise",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "otherwise",
        "longname": "otherwise",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10241,
                10297
            ],
            "filename": "index.js",
            "lineno": 485,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007069",
                "name": "module.exports.over",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "over",
        "longname": "over",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10299,
                10355
            ],
            "filename": "index.js",
            "lineno": 488,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007079",
                "name": "module.exports.pair",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pair",
        "longname": "pair",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10357,
                10419
            ],
            "filename": "index.js",
            "lineno": 491,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007089",
                "name": "module.exports.partial",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "partial",
        "longname": "partial",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10421,
                10493
            ],
            "filename": "index.js",
            "lineno": 494,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007099",
                "name": "module.exports.partialRight",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "partialRight",
        "longname": "partialRight",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10495,
                10561
            ],
            "filename": "index.js",
            "lineno": 497,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007109",
                "name": "module.exports.partition",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "partition",
        "longname": "partition",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10563,
                10619
            ],
            "filename": "index.js",
            "lineno": 500,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007119",
                "name": "module.exports.path",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "path",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10621,
                10679
            ],
            "filename": "index.js",
            "lineno": 503,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007129",
                "name": "module.exports.paths",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "paths",
        "longname": "paths",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10681,
                10741
            ],
            "filename": "index.js",
            "lineno": 506,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007139",
                "name": "module.exports.pathEq",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pathEq",
        "longname": "pathEq",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10743,
                10803
            ],
            "filename": "index.js",
            "lineno": 509,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007149",
                "name": "module.exports.pathOr",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pathOr",
        "longname": "pathOr",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10805,
                10879
            ],
            "filename": "index.js",
            "lineno": 512,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007159",
                "name": "module.exports.pathSatisfies",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pathSatisfies",
        "longname": "pathSatisfies",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10881,
                10937
            ],
            "filename": "index.js",
            "lineno": 515,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007169",
                "name": "module.exports.pick",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pick",
        "longname": "pick",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10939,
                11001
            ],
            "filename": "index.js",
            "lineno": 518,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007179",
                "name": "module.exports.pickAll",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pickAll",
        "longname": "pickAll",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11003,
                11063
            ],
            "filename": "index.js",
            "lineno": 521,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007189",
                "name": "module.exports.pickBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pickBy",
        "longname": "pickBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11065,
                11121
            ],
            "filename": "index.js",
            "lineno": 524,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007199",
                "name": "module.exports.pipe",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pipe",
        "longname": "pipe",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11123,
                11187
            ],
            "filename": "index.js",
            "lineno": 527,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007209",
                "name": "module.exports.pipeWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pipeWith",
        "longname": "pipeWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11189,
                11247
            ],
            "filename": "index.js",
            "lineno": 530,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007219",
                "name": "module.exports.pluck",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pluck",
        "longname": "pluck",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11249,
                11311
            ],
            "filename": "index.js",
            "lineno": 533,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007229",
                "name": "module.exports.prepend",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prepend",
        "longname": "prepend",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11313,
                11375
            ],
            "filename": "index.js",
            "lineno": 536,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007239",
                "name": "module.exports.product",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "product",
        "longname": "product",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11377,
                11439
            ],
            "filename": "index.js",
            "lineno": 539,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007249",
                "name": "module.exports.project",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "project",
        "longname": "project",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11441,
                11501
            ],
            "filename": "index.js",
            "lineno": 542,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007259",
                "name": "module.exports.promap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "promap",
        "longname": "promap",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11503,
                11559
            ],
            "filename": "index.js",
            "lineno": 545,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007269",
                "name": "module.exports.prop",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "prop",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11561,
                11621
            ],
            "filename": "index.js",
            "lineno": 548,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007279",
                "name": "module.exports.propEq",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "propEq",
        "longname": "propEq",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11623,
                11683
            ],
            "filename": "index.js",
            "lineno": 551,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007289",
                "name": "module.exports.propIs",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "propIs",
        "longname": "propIs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11685,
                11745
            ],
            "filename": "index.js",
            "lineno": 554,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007299",
                "name": "module.exports.propOr",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "propOr",
        "longname": "propOr",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11747,
                11821
            ],
            "filename": "index.js",
            "lineno": 557,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007309",
                "name": "module.exports.propSatisfies",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "propSatisfies",
        "longname": "propSatisfies",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11823,
                11881
            ],
            "filename": "index.js",
            "lineno": 560,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007319",
                "name": "module.exports.props",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "props",
        "longname": "props",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11883,
                11941
            ],
            "filename": "index.js",
            "lineno": 563,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007329",
                "name": "module.exports.range",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "range",
        "longname": "range",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11943,
                12003
            ],
            "filename": "index.js",
            "lineno": 566,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007339",
                "name": "module.exports.reduce",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12005,
                12069
            ],
            "filename": "index.js",
            "lineno": 569,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007349",
                "name": "module.exports.reduceBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reduceBy",
        "longname": "reduceBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12071,
                12141
            ],
            "filename": "index.js",
            "lineno": 572,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007359",
                "name": "module.exports.reduceRight",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reduceRight",
        "longname": "reduceRight",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12143,
                12213
            ],
            "filename": "index.js",
            "lineno": 575,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007369",
                "name": "module.exports.reduceWhile",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reduceWhile",
        "longname": "reduceWhile",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12215,
                12277
            ],
            "filename": "index.js",
            "lineno": 578,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007379",
                "name": "module.exports.reduced",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reduced",
        "longname": "reduced",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12279,
                12339
            ],
            "filename": "index.js",
            "lineno": 581,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007389",
                "name": "module.exports.reject",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reject",
        "longname": "reject",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12341,
                12401
            ],
            "filename": "index.js",
            "lineno": 584,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007399",
                "name": "module.exports.remove",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "remove",
        "longname": "remove",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12403,
                12463
            ],
            "filename": "index.js",
            "lineno": 587,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007409",
                "name": "module.exports.repeat",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "repeat",
        "longname": "repeat",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12465,
                12527
            ],
            "filename": "index.js",
            "lineno": 590,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007419",
                "name": "module.exports.replace",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "replace",
        "longname": "replace",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12529,
                12591
            ],
            "filename": "index.js",
            "lineno": 593,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007429",
                "name": "module.exports.reverse",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reverse",
        "longname": "reverse",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12593,
                12649
            ],
            "filename": "index.js",
            "lineno": 596,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007439",
                "name": "module.exports.scan",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "scan",
        "longname": "scan",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12651,
                12715
            ],
            "filename": "index.js",
            "lineno": 599,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007449",
                "name": "module.exports.sequence",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sequence",
        "longname": "sequence",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12717,
                12771
            ],
            "filename": "index.js",
            "lineno": 602,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007459",
                "name": "module.exports.set",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "set",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12773,
                12831
            ],
            "filename": "index.js",
            "lineno": 605,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007469",
                "name": "module.exports.slice",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12833,
                12889
            ],
            "filename": "index.js",
            "lineno": 608,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007479",
                "name": "module.exports.sort",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sort",
        "longname": "sort",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12891,
                12951
            ],
            "filename": "index.js",
            "lineno": 611,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007489",
                "name": "module.exports.sortBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sortBy",
        "longname": "sortBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12953,
                13017
            ],
            "filename": "index.js",
            "lineno": 614,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007499",
                "name": "module.exports.sortWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sortWith",
        "longname": "sortWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13019,
                13077
            ],
            "filename": "index.js",
            "lineno": 617,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007509",
                "name": "module.exports.split",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "split",
        "longname": "split",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13079,
                13141
            ],
            "filename": "index.js",
            "lineno": 620,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007519",
                "name": "module.exports.splitAt",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "splitAt",
        "longname": "splitAt",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13143,
                13211
            ],
            "filename": "index.js",
            "lineno": 623,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007529",
                "name": "module.exports.splitEvery",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "splitEvery",
        "longname": "splitEvery",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13213,
                13279
            ],
            "filename": "index.js",
            "lineno": 626,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007539",
                "name": "module.exports.splitWhen",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "splitWhen",
        "longname": "splitWhen",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13281,
                13355
            ],
            "filename": "index.js",
            "lineno": 629,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007549",
                "name": "module.exports.splitWhenever",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "splitWhenever",
        "longname": "splitWhenever",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13357,
                13425
            ],
            "filename": "index.js",
            "lineno": 632,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007559",
                "name": "module.exports.startsWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startsWith",
        "longname": "startsWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13427,
                13491
            ],
            "filename": "index.js",
            "lineno": 635,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007569",
                "name": "module.exports.subtract",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subtract",
        "longname": "subtract",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13493,
                13547
            ],
            "filename": "index.js",
            "lineno": 638,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007579",
                "name": "module.exports.sum",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "sum",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13549,
                13605
            ],
            "filename": "index.js",
            "lineno": 641,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007589",
                "name": "module.exports.swap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "swap",
        "longname": "swap",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13607,
                13693
            ],
            "filename": "index.js",
            "lineno": 644,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007599",
                "name": "module.exports.symmetricDifference",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "symmetricDifference",
        "longname": "symmetricDifference",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13695,
                13789
            ],
            "filename": "index.js",
            "lineno": 647,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007609",
                "name": "module.exports.symmetricDifferenceWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "symmetricDifferenceWith",
        "longname": "symmetricDifferenceWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13791,
                13847
            ],
            "filename": "index.js",
            "lineno": 650,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007619",
                "name": "module.exports.tail",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tail",
        "longname": "tail",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13849,
                13905
            ],
            "filename": "index.js",
            "lineno": 653,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007629",
                "name": "module.exports.take",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "take",
        "longname": "take",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13907,
                13971
            ],
            "filename": "index.js",
            "lineno": 656,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007639",
                "name": "module.exports.takeLast",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "takeLast",
        "longname": "takeLast",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13973,
                14047
            ],
            "filename": "index.js",
            "lineno": 659,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007649",
                "name": "module.exports.takeLastWhile",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "takeLastWhile",
        "longname": "takeLastWhile",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14049,
                14115
            ],
            "filename": "index.js",
            "lineno": 662,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007659",
                "name": "module.exports.takeWhile",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "takeWhile",
        "longname": "takeWhile",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14117,
                14171
            ],
            "filename": "index.js",
            "lineno": 665,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007669",
                "name": "module.exports.tap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tap",
        "longname": "tap",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14173,
                14229
            ],
            "filename": "index.js",
            "lineno": 668,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007679",
                "name": "module.exports.test",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "test",
        "longname": "test",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14231,
                14293
            ],
            "filename": "index.js",
            "lineno": 671,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007689",
                "name": "module.exports.andThen",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "andThen",
        "longname": "andThen",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14295,
                14353
            ],
            "filename": "index.js",
            "lineno": 674,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007699",
                "name": "module.exports.times",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "times",
        "longname": "times",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14355,
                14417
            ],
            "filename": "index.js",
            "lineno": 677,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007709",
                "name": "module.exports.toLower",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "toLower",
        "longname": "toLower",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14419,
                14481
            ],
            "filename": "index.js",
            "lineno": 680,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007719",
                "name": "module.exports.toPairs",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "toPairs",
        "longname": "toPairs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14483,
                14549
            ],
            "filename": "index.js",
            "lineno": 683,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007729",
                "name": "module.exports.toPairsIn",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "toPairsIn",
        "longname": "toPairsIn",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14551,
                14615
            ],
            "filename": "index.js",
            "lineno": 686,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007739",
                "name": "module.exports.toString",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "toString",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14617,
                14679
            ],
            "filename": "index.js",
            "lineno": 689,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007749",
                "name": "module.exports.toUpper",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "toUpper",
        "longname": "toUpper",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14681,
                14747
            ],
            "filename": "index.js",
            "lineno": 692,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007759",
                "name": "module.exports.transduce",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "transduce",
        "longname": "transduce",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14749,
                14815
            ],
            "filename": "index.js",
            "lineno": 695,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007769",
                "name": "module.exports.transpose",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "transpose",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14817,
                14881
            ],
            "filename": "index.js",
            "lineno": 698,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007779",
                "name": "module.exports.traverse",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "traverse",
        "longname": "traverse",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14883,
                14939
            ],
            "filename": "index.js",
            "lineno": 701,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007789",
                "name": "module.exports.trim",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "trim",
        "longname": "trim",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14941,
                15005
            ],
            "filename": "index.js",
            "lineno": 704,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007799",
                "name": "module.exports.tryCatch",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tryCatch",
        "longname": "tryCatch",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15007,
                15063
            ],
            "filename": "index.js",
            "lineno": 707,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007809",
                "name": "module.exports.type",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15065,
                15127
            ],
            "filename": "index.js",
            "lineno": 710,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007819",
                "name": "module.exports.unapply",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unapply",
        "longname": "unapply",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15129,
                15187
            ],
            "filename": "index.js",
            "lineno": 713,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007829",
                "name": "module.exports.unary",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unary",
        "longname": "unary",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15189,
                15253
            ],
            "filename": "index.js",
            "lineno": 716,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007839",
                "name": "module.exports.uncurryN",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "uncurryN",
        "longname": "uncurryN",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15255,
                15315
            ],
            "filename": "index.js",
            "lineno": 719,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007849",
                "name": "module.exports.unfold",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unfold",
        "longname": "unfold",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15317,
                15375
            ],
            "filename": "index.js",
            "lineno": 722,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007859",
                "name": "module.exports.union",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "union",
        "longname": "union",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15377,
                15443
            ],
            "filename": "index.js",
            "lineno": 725,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007869",
                "name": "module.exports.unionWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unionWith",
        "longname": "unionWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15445,
                15501
            ],
            "filename": "index.js",
            "lineno": 728,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007879",
                "name": "module.exports.uniq",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "uniq",
        "longname": "uniq",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15503,
                15563
            ],
            "filename": "index.js",
            "lineno": 731,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007889",
                "name": "module.exports.uniqBy",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "uniqBy",
        "longname": "uniqBy",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15565,
                15629
            ],
            "filename": "index.js",
            "lineno": 734,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007899",
                "name": "module.exports.uniqWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "uniqWith",
        "longname": "uniqWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15631,
                15691
            ],
            "filename": "index.js",
            "lineno": 737,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007909",
                "name": "module.exports.unless",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unless",
        "longname": "unless",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15693,
                15753
            ],
            "filename": "index.js",
            "lineno": 740,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007919",
                "name": "module.exports.unnest",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unnest",
        "longname": "unnest",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15755,
                15813
            ],
            "filename": "index.js",
            "lineno": 743,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007929",
                "name": "module.exports.until",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "until",
        "longname": "until",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15815,
                15875
            ],
            "filename": "index.js",
            "lineno": 746,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007939",
                "name": "module.exports.unwind",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unwind",
        "longname": "unwind",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15877,
                15937
            ],
            "filename": "index.js",
            "lineno": 749,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007949",
                "name": "module.exports.update",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "update",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15939,
                16001
            ],
            "filename": "index.js",
            "lineno": 752,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007959",
                "name": "module.exports.useWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "useWith",
        "longname": "useWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16003,
                16063
            ],
            "filename": "index.js",
            "lineno": 755,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007969",
                "name": "module.exports.values",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "values",
        "longname": "values",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16065,
                16129
            ],
            "filename": "index.js",
            "lineno": 758,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007979",
                "name": "module.exports.valuesIn",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "valuesIn",
        "longname": "valuesIn",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16131,
                16187
            ],
            "filename": "index.js",
            "lineno": 761,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007989",
                "name": "module.exports.view",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "view",
        "longname": "view",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16189,
                16245
            ],
            "filename": "index.js",
            "lineno": 764,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100007999",
                "name": "module.exports.when",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "when",
        "longname": "when",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16247,
                16305
            ],
            "filename": "index.js",
            "lineno": 767,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008009",
                "name": "module.exports.where",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "where",
        "longname": "where",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16307,
                16371
            ],
            "filename": "index.js",
            "lineno": 770,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008019",
                "name": "module.exports.whereAny",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "whereAny",
        "longname": "whereAny",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16373,
                16435
            ],
            "filename": "index.js",
            "lineno": 773,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008029",
                "name": "module.exports.whereEq",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "whereEq",
        "longname": "whereEq",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16437,
                16499
            ],
            "filename": "index.js",
            "lineno": 776,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008039",
                "name": "module.exports.without",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "without",
        "longname": "without",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16501,
                16555
            ],
            "filename": "index.js",
            "lineno": 779,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008049",
                "name": "module.exports.xor",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "xor",
        "longname": "xor",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16557,
                16615
            ],
            "filename": "index.js",
            "lineno": 782,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008059",
                "name": "module.exports.xprod",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "xprod",
        "longname": "xprod",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16617,
                16671
            ],
            "filename": "index.js",
            "lineno": 785,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008069",
                "name": "module.exports.zip",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "zip",
        "longname": "zip",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16673,
                16733
            ],
            "filename": "index.js",
            "lineno": 788,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008079",
                "name": "module.exports.zipObj",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "zipObj",
        "longname": "zipObj",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16735,
                16797
            ],
            "filename": "index.js",
            "lineno": 791,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008089",
                "name": "module.exports.zipWith",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "zipWith",
        "longname": "zipWith",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16799,
                16863
            ],
            "filename": "index.js",
            "lineno": 794,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008099",
                "name": "module.exports.thunkify",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "thunkify",
        "longname": "thunkify",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                53
            ],
            "filename": "indexBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008111",
                "name": "reduceBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduceBy",
        "longname": "reduceBy",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> {a: b}\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} array The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @see R.groupBy\n * @example\n *\n *      const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      R.indexBy(R.prop('id'), list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */",
        "meta": {
            "range": [
                952,
                1031
            ],
            "filename": "indexBy.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008117",
                "name": "indexBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Given a function that generates a key, turns a list of objects into an\nobject indexing the objects by the given key. Note that if multiple\nobjects generate the same value for the indexing key only the last value\nwill be included in the generated object.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Idx a => (b -> a) -> [b] -> {a: b}",
                "value": "Idx a => (b -> a) -> [b] -> {a: b}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function :: a -> Idx",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array of objects to index",
                "name": "array"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object indexing each array element by the given property."
            }
        ],
        "see": [
            "R.groupBy"
        ],
        "examples": [
            "const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n     R.indexBy(R.prop('id'), list);\n     //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}"
        ],
        "name": "indexBy",
        "longname": "R.indexBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1033,
                1057
            ],
            "filename": "indexBy.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008129",
                "name": "module.exports",
                "type": "Identifier",
                "value": "indexBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "indexOf.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008137",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "indexOf.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008143",
                "name": "_indexOf",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_indexOf",
        "longname": "_indexOf",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                190
            ],
            "filename": "indexOf.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008149",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.lastIndexOf, R.findIndex\n * @example\n *\n *      R.indexOf(3, [1,2,3,4]); //=> 2\n *      R.indexOf(10, [1,2,3,4]); //=> -1\n */",
        "meta": {
            "range": [
                769,
                941
            ],
            "filename": "indexOf.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008155",
                "name": "indexOf",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the position of the first occurrence of an item in an array, or -1\nif the item is not included in the array. [`R.equals`](#equals) is used to\ndetermine equality.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> [a] -> Number",
                "value": "a -> [a] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The item to find.",
                "name": "target"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to search in.",
                "name": "xs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "the index of the target, or -1 if the target is not found."
            }
        ],
        "see": [
            "R.lastIndexOf, R.findIndex"
        ],
        "examples": [
            "R.indexOf(3, [1,2,3,4]); //=> 2\n     R.indexOf(10, [1,2,3,4]); //=> -1"
        ],
        "name": "indexOf",
        "longname": "R.indexOf",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                944,
                968
            ],
            "filename": "indexOf.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008188",
                "name": "module.exports",
                "type": "Identifier",
                "value": "indexOf",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                47
            ],
            "filename": "init.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008196",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */",
        "meta": {
            "range": [
                597,
                630
            ],
            "filename": "init.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008202",
                "name": "init",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns all but the last element of the given list or string.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a]",
                "value": "[a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String",
                "value": "String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.last, R.head, R.tail"
        ],
        "examples": [
            "R.init([1, 2, 3]);  //=> [1, 2]\n     R.init([1, 2]);     //=> [1]\n     R.init([1]);        //=> []\n     R.init([]);         //=> []\n\n     R.init('abc');  //=> 'ab'\n     R.init('ab');   //=> 'a'\n     R.init('a');    //=> ''\n     R.init('');     //=> ''"
        ],
        "name": "init",
        "longname": "R.init",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                632,
                653
            ],
            "filename": "init.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008210",
                "name": "module.exports",
                "type": "Identifier",
                "value": "init",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                72
            ],
            "filename": "innerJoin.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008218",
                "name": "_includesWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_includesWith",
        "longname": "_includesWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79,
                135
            ],
            "filename": "innerJoin.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008224",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                198
            ],
            "filename": "innerJoin.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008230",
                "name": "_filter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_filter",
        "longname": "_filter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */",
        "meta": {
            "range": [
                1451,
                1603
            ],
            "filename": "innerJoin.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008236",
                "name": "innerJoin",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n`xs'` comprising each of the elements of `xs` which is equal to one or more\nelements of `ys` according to `pred`.\n\n`pred` must be a binary function expecting an element from each list.\n\n`xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\nnot be significant, but since `xs'` is ordered the implementation guarantees\nthat its values are in the same order as they appear in `xs`. Duplicates are\nnot removed, so `xs'` may contain duplicates if `xs` contains duplicates.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b) -> Boolean) -> [a] -> [b] -> [a]",
                "value": "((a, b) -> Boolean) -> [a] -> [b] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "xs"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "ys"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "see": [
            "R.intersection"
        ],
        "examples": [
            "R.innerJoin(\n       (record, id) => record.id === id,\n       [{id: 824, name: 'Richie Furay'},\n        {id: 956, name: 'Dewey Martin'},\n        {id: 313, name: 'Bruce Palmer'},\n        {id: 456, name: 'Stephen Stills'},\n        {id: 177, name: 'Neil Young'}],\n       [177, 456, 999]\n     );\n     //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]"
        ],
        "name": "innerJoin",
        "longname": "R.innerJoin",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1606,
                1632
            ],
            "filename": "innerJoin.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008260",
                "name": "module.exports",
                "type": "Identifier",
                "value": "innerJoin",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "insert.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008268",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Inserts the supplied element into the list, at the specified `index`. _Note that\n\n * this is not destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} index The position to insert the element\n * @param {*} elt The element to insert into the Array\n * @param {Array} list The list to insert into\n * @return {Array} A new Array with `elt` inserted at `index`.\n * @example\n *\n *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n */",
        "meta": {
            "range": [
                711,
                936
            ],
            "filename": "insert.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008274",
                "name": "insert",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Inserts the supplied element into the list, at the specified `index`. _Note that\nthis is not destructive_: it returns a copy of the list with the changes.\n<small>No lists have been harmed in the application of this function.</small>",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.2",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> a -> [a] -> [a]",
                "value": "Number -> a -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position to insert the element",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The element to insert into the Array",
                "name": "elt"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to insert into",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new Array with `elt` inserted at `index`."
            }
        ],
        "examples": [
            "R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]"
        ],
        "name": "insert",
        "longname": "R.insert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                778,
                833
            ],
            "filename": "insert.js",
            "lineno": 28,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008285",
                "name": "idx",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                841,
                885
            ],
            "filename": "insert.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008302",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                939,
                962
            ],
            "filename": "insert.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008325",
                "name": "module.exports",
                "type": "Identifier",
                "value": "insert",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "insertAll.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008333",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Inserts the sub-list into the list, at the specified `index`. _Note that this is not\n * destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a] -> [a]\n * @param {Number} index The position to insert the sub-list\n * @param {Array} elts The sub-list to insert into the Array\n * @param {Array} list The list to insert the sub-list into\n * @return {Array} A new Array with `elts` inserted starting at `index`.\n * @example\n *\n *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n */",
        "meta": {
            "range": [
                755,
                995
            ],
            "filename": "insertAll.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008339",
                "name": "insertAll",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Inserts the sub-list into the list, at the specified `index`. _Note that this is not\ndestructive_: it returns a copy of the list with the changes.\n<small>No lists have been harmed in the application of this function.</small>",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> [a] -> [a]",
                "value": "Number -> [a] -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position to insert the sub-list",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The sub-list to insert into the Array",
                "name": "elts"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to insert the sub-list into",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new Array with `elts` inserted starting at `index`."
            }
        ],
        "examples": [
            "R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]"
        ],
        "name": "insertAll",
        "longname": "R.insertAll",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                829,
                884
            ],
            "filename": "insertAll.js",
            "lineno": 27,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008350",
                "name": "idx",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                998,
                1024
            ],
            "filename": "insertAll.js",
            "lineno": 31,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008394",
                "name": "module.exports",
                "type": "Identifier",
                "value": "insertAll",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "intersection.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008402",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "intersection.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008408",
                "name": "_filter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_filter",
        "longname": "_filter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                130,
                180
            ],
            "filename": "intersection.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008414",
                "name": "_Set",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_Set",
        "longname": "_Set",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                187,
                228
            ],
            "filename": "intersection.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008420",
                "name": "uniq",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "uniq",
        "longname": "uniq",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */",
        "meta": {
            "range": [
                693,
                931
            ],
            "filename": "intersection.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008426",
                "name": "intersection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Combines two lists into a set (i.e. no duplicates) composed of those\nelements common to both lists.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[*] -> [*] -> [*]",
                "value": "[*] -> [*] -> [*]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first list.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second list.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of elements found in both `list1` and `list2`."
            }
        ],
        "see": [
            "R.innerJoin"
        ],
        "examples": [
            "R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]"
        ],
        "name": "intersection",
        "longname": "R.intersection",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                774,
                793
            ],
            "filename": "intersection.js",
            "lineno": 38,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008436",
                "name": "toKeep",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "toKeep",
        "longname": "<anonymous>~toKeep",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                807,
                812
            ],
            "filename": "intersection.js",
            "lineno": 40,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008442",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                832,
                838
            ],
            "filename": "intersection.js",
            "lineno": 40,
            "columnno": 36,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008450",
                "name": "i",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                934,
                963
            ],
            "filename": "intersection.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008476",
                "name": "module.exports",
                "type": "Identifier",
                "value": "intersection",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                76
            ],
            "filename": "intersperse.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008484",
                "name": "_checkForMethod",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_checkForMethod",
        "longname": "_checkForMethod",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83,
                139
            ],
            "filename": "intersperse.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008490",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']\n */",
        "meta": {
            "range": [
                638,
                996
            ],
            "filename": "intersperse.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008496",
                "name": "intersperse",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new list with the separator interposed between elements.\n\nDispatches to the `intersperse` method of the second argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> [a] -> [a]",
                "value": "a -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The element to add to the list.",
                "name": "separator"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to be interposed.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The new list."
            }
        ],
        "examples": [
            "R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']"
        ],
        "name": "intersperse",
        "longname": "R.intersperse",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                766,
                774
            ],
            "filename": "intersperse.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008509",
                "name": "out",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                782,
                789
            ],
            "filename": "intersperse.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008513",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                797,
                817
            ],
            "filename": "intersperse.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008517",
                "name": "length",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "<anonymous>~length",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                964,
                972
            ],
            "filename": "intersperse.js",
            "lineno": 43,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008553",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                999,
                1027
            ],
            "filename": "intersperse.js",
            "lineno": 49,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008559",
                "name": "module.exports",
                "type": "Identifier",
                "value": "intersperse",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "into.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008567",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                137
            ],
            "filename": "into.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008573",
                "name": "_isTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isTransformer",
        "longname": "_isTransformer",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                144,
                202
            ],
            "filename": "into.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008579",
                "name": "_xReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xReduce",
        "longname": "_xReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                209,
                267
            ],
            "filename": "into.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008585",
                "name": "_stepCat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_stepCat",
        "longname": "_stepCat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.transduce\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      const intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */",
        "meta": {
            "range": [
                1879,
                2071
            ],
            "filename": "into.js",
            "lineno": 57,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008591",
                "name": "into",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Transforms the items of the list with the transducer and appends the\ntransformed items to the accumulator using an appropriate iterator function\nbased on the accumulator type.\n\nThe accumulator can be an array, string, object or a transformer. Iterated\nitems will be appended to arrays and concatenated to strings. Objects will\nbe merged directly or 2-item arrays will be merged as key, value pairs.\n\nThe accumulator can also be a transformer object that provides a 2-arity\nreducing iterator function, step, 0-arity initial value function, init, and\n1-arity result extraction function result. The step function is used as the\niterator function in reduce. The result function is used to convert the\nfinal accumulator into the return type and in most cases is R.identity. The\ninit function is used to provide the initial accumulator.\n\nThe iteration is performed with [`R.reduce`](#reduce) after initializing the\ntransducer.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.12.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> (b -> b) -> [c] -> a",
                "value": "a -> (b -> b) -> [c] -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The initial accumulator value.",
                "name": "acc"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The transducer function. Receives a transformer and returns a transformer.",
                "name": "xf"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The final, accumulated value."
            }
        ],
        "see": [
            "R.transduce"
        ],
        "examples": [
            "const numbers = [1, 2, 3, 4];\n     const transducer = R.compose(R.map(R.add(1)), R.take(2));\n\n     R.into([], transducer, numbers); //=> [2, 3]\n\n     const intoArray = R.into([]);\n     intoArray(transducer, numbers); //=> [2, 3]"
        ],
        "name": "into",
        "longname": "R.into",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1953,
                2011
            ],
            "filename": "into.js",
            "lineno": 60,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008602",
                "name": "xf",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "xf",
        "longname": "<anonymous>~xf",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2074,
                2095
            ],
            "filename": "into.js",
            "lineno": 64,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008624",
                "name": "module.exports",
                "type": "Identifier",
                "value": "into",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "invert.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008632",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "invert.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008638",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                165
            ],
            "filename": "invert.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008644",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Same as [`R.invertObj`](#invertObj), however this accounts for objects with\n * duplicate values by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys in an array.\n * @see R.invertObj\n * @example\n *\n *      const raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */",
        "meta": {
            "range": [
                799,
                1130
            ],
            "filename": "invert.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008650",
                "name": "invert",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Same as [`R.invertObj`](#invertObj), however this accounts for objects with\nduplicate values by putting the values into an array.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{s: x} -> {x: [ s, ... ]}",
                "value": "{s: x} -> {x: [ s, ... ]}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object or array to invert",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "out A new object with keys in an array."
            }
        ],
        "see": [
            "R.invertObj"
        ],
        "examples": [
            "const raceResultsByFirstName = {\n       first: 'alice',\n       second: 'jake',\n       third: 'alice',\n     };\n     R.invert(raceResultsByFirstName);\n     //=> { 'alice': ['first', 'third'], 'jake':['second'] }"
        ],
        "name": "invert",
        "longname": "R.invert",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                859,
                876
            ],
            "filename": "invert.js",
            "lineno": 39,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008659",
                "name": "props",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "props",
        "longname": "<anonymous>~props",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                884,
                902
            ],
            "filename": "invert.js",
            "lineno": 40,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008665",
                "name": "len",
                "type": "MemberExpression",
                "value": "props.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                910,
                917
            ],
            "filename": "invert.js",
            "lineno": 41,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008671",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                925,
                933
            ],
            "filename": "invert.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008675",
                "name": "out",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                966,
                982
            ],
            "filename": "invert.js",
            "lineno": 45,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008684",
                "name": "key",
                "type": "MemberExpression",
                "value": "props[undefined]"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                992,
                1006
            ],
            "filename": "invert.js",
            "lineno": 46,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008690",
                "name": "val",
                "type": "MemberExpression",
                "value": "obj[undefined]"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1016,
                1064
            ],
            "filename": "invert.js",
            "lineno": 47,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008696",
                "name": "list",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "list",
        "longname": "<anonymous>~list",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1051,
                1064
            ],
            "filename": "invert.js",
            "lineno": 47,
            "columnno": 43,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008706",
                "name": "out[undefined]",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~list.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~list",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1070,
                1093
            ],
            "filename": "invert.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008712",
                "name": "list[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "key",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~list.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~list",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1099,
                1107
            ],
            "filename": "invert.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008720",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1133,
                1156
            ],
            "filename": "invert.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008726",
                "name": "module.exports",
                "type": "Identifier",
                "value": "invert",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "invertObj.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008734",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "invertObj.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008740",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new object with the keys of the given object as values, and the\n * values of the given object, which are coerced to strings, as keys. Note\n * that the last key found is preferred when handling the same value.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: s}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object\n * @see R.invert\n * @example\n *\n *      const raceResults = {\n *        first: 'alice',\n *        second: 'jake'\n *      };\n *      R.invertObj(raceResults);\n *      //=> { 'alice': 'first', 'jake':'second' }\n *\n *      // Alternatively:\n *      const raceResults = ['alice', 'jake'];\n *      R.invertObj(raceResults);\n *      //=> { 'alice': '0', 'jake':'1' }\n */",
        "meta": {
            "range": [
                886,
                1137
            ],
            "filename": "invertObj.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008746",
                "name": "invertObj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new object with the keys of the given object as values, and the\nvalues of the given object, which are coerced to strings, as keys. Note\nthat the last key found is preferred when handling the same value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{s: x} -> {x: s}",
                "value": "{s: x} -> {x: s}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object or array to invert",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "out A new object"
            }
        ],
        "see": [
            "R.invert"
        ],
        "examples": [
            "const raceResults = {\n       first: 'alice',\n       second: 'jake'\n     };\n     R.invertObj(raceResults);\n     //=> { 'alice': 'first', 'jake':'second' }\n\n     // Alternatively:\n     const raceResults = ['alice', 'jake'];\n     R.invertObj(raceResults);\n     //=> { 'alice': '0', 'jake':'1' }"
        ],
        "name": "invertObj",
        "longname": "R.invertObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                952,
                969
            ],
            "filename": "invertObj.js",
            "lineno": 40,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008755",
                "name": "props",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "props",
        "longname": "<anonymous>~props",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                977,
                995
            ],
            "filename": "invertObj.js",
            "lineno": 41,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008761",
                "name": "len",
                "type": "MemberExpression",
                "value": "props.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1003,
                1010
            ],
            "filename": "invertObj.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008767",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1018,
                1026
            ],
            "filename": "invertObj.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008771",
                "name": "out",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1059,
                1075
            ],
            "filename": "invertObj.js",
            "lineno": 46,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008780",
                "name": "key",
                "type": "MemberExpression",
                "value": "props[undefined]"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1081,
                1100
            ],
            "filename": "invertObj.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008786",
                "name": "out[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "key",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~out.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1106,
                1114
            ],
            "filename": "invertObj.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008794",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1140,
                1166
            ],
            "filename": "invertObj.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008800",
                "name": "module.exports",
                "type": "Identifier",
                "value": "invertObj",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "invoker.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008808",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                131
            ],
            "filename": "invoker.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008814",
                "name": "_isFunction",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isFunction",
        "longname": "_isFunction",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                138,
                183
            ],
            "filename": "invoker.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008820",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                190,
                239
            ],
            "filename": "invoker.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008826",
                "name": "toString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "toString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Given an `arity` (Number) and a `name` (String) the `invoker` function\n * returns a curried function that takes `arity` arguments and a `context`\n * object. It will \"invoke\" the `name`'d function (a method) on the `context`\n * object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of any of the target object's methods to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *      // A function with no arguments\n *      const asJson = invoker(0, \"json\")\n *      // Just like calling .then((response) => response.json())\n *      fetch(\"http://example.com/index.json\").then(asJson)\n *\n *      // A function with one argument\n *      const sliceFrom = invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *\n *      // A function with two arguments\n *      const sliceFrom6 = invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n *\n *      // NOTE: You can't simply pass some of the arguments to the initial invoker function.\n *      const firstCreditCardSection = invoker(2, \"slice\", 0, 4)\n *      firstCreditCardSection(\"4242 4242 4242 4242\") // => Function<...>\n *\n *      // Since invoker returns a curried function, you may partially apply it to create the function you need.\n *      const firstCreditCardSection = invoker(2, \"slice\")(0, 4)\n *      firstCreditCardSection(\"4242 4242 4242 4242\") // => \"4242\"\n *\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */",
        "meta": {
            "range": [
                2045,
                2446
            ],
            "filename": "invoker.js",
            "lineno": 60,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008832",
                "name": "invoker",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Given an `arity` (Number) and a `name` (String) the `invoker` function\nreturns a curried function that takes `arity` arguments and a `context`\nobject. It will \"invoke\" the `name`'d function (a method) on the `context`\nobject.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> String -> (a -> b -> ... -> n -> Object -> *)",
                "value": "Number -> String -> (a -> b -> ... -> n -> Object -> *)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.invoker(0, 'method')(o) = o['method']()",
                "value": "R.invoker(0, 'method')(o) = o['method']()"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.invoker(1, 'method')(a, o) = o['method'](a)",
                "value": "R.invoker(1, 'method')(a, o) = o['method'](a)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.invoker(2, 'method')(a, b, o) = o['method'](a, b)",
                "value": "R.invoker(2, 'method')(a, b, o) = o['method'](a, b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Number of arguments the returned function should take\n       before the target object.",
                "name": "arity"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Name of any of the target object's methods to call.",
                "name": "method"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new curried function."
            }
        ],
        "see": [
            "R.construct"
        ],
        "examples": [
            "// A function with no arguments\n     const asJson = invoker(0, \"json\")\n     // Just like calling .then((response) => response.json())\n     fetch(\"http://example.com/index.json\").then(asJson)\n\n     // A function with one argument\n     const sliceFrom = invoker(1, 'slice');\n     sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n\n     // A function with two arguments\n     const sliceFrom6 = invoker(2, 'slice')(6);\n     sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n\n     // NOTE: You can't simply pass some of the arguments to the initial invoker function.\n     const firstCreditCardSection = invoker(2, \"slice\", 0, 4)\n     firstCreditCardSection(\"4242 4242 4242 4242\") // => Function<...>\n\n     // Since invoker returns a curried function, you may partially apply it to create the function you need.\n     const firstCreditCardSection = invoker(2, \"slice\")(0, 4)\n     firstCreditCardSection(\"4242 4242 4242 4242\") // => \"4242\""
        ],
        "name": "invoker",
        "longname": "R.invoker",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2160,
                2185
            ],
            "filename": "invoker.js",
            "lineno": 64,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008850",
                "name": "target",
                "type": "MemberExpression",
                "value": "arguments[undefined]"
            }
        },
        "undocumented": true,
        "name": "target",
        "longname": "<anonymous>~target",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2449,
                2473
            ],
            "filename": "invoker.js",
            "lineno": 74,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008898",
                "name": "module.exports",
                "type": "Identifier",
                "value": "invoker",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "is.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008906",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * See if an object (i.e. `val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n * If `val` was created using `Object.create`, `R.is(Object, val) === true`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */",
        "meta": {
            "range": [
                814,
                996
            ],
            "filename": "is.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008912",
                "name": "is",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "See if an object (i.e. `val`) is an instance of the supplied constructor. This\nfunction will check up the inheritance chain, if any.\nIf `val` was created using `Object.create`, `R.is(Object, val) === true`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Type",
                "value": "Type"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(* -> {*}) -> a -> Boolean",
                "value": "(* -> {*}) -> a -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A constructor",
                "name": "ctor"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to test",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "R.is(Object, {}); //=> true\n     R.is(Number, 1); //=> true\n     R.is(Object, 1); //=> false\n     R.is(String, 's'); //=> true\n     R.is(String, new String('')); //=> true\n     R.is(Object, new String('')); //=> true\n     R.is(Object, 's'); //=> false\n     R.is(Number, {}); //=> false"
        ],
        "name": "is",
        "longname": "R.is",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                999,
                1018
            ],
            "filename": "is.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008947",
                "name": "module.exports",
                "type": "Identifier",
                "value": "is",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "isEmpty.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008955",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "isEmpty.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008961",
                "name": "empty",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "empty",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                117,
                162
            ],
            "filename": "isEmpty.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008967",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);           //=> false\n *      R.isEmpty([]);                  //=> true\n *      R.isEmpty('');                  //=> true\n *      R.isEmpty(null);                //=> false\n *      R.isEmpty({});                  //=> true\n *      R.isEmpty({length: 0});         //=> false\n *      R.isEmpty(Uint8Array.from('')); //=> true\n */",
        "meta": {
            "range": [
                769,
                868
            ],
            "filename": "isEmpty.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008973",
                "name": "isEmpty",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the given value is its type's empty value; `false`\notherwise.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> Boolean",
                "value": "a -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.empty"
        ],
        "examples": [
            "R.isEmpty([1, 2, 3]);           //=> false\n     R.isEmpty([]);                  //=> true\n     R.isEmpty('');                  //=> true\n     R.isEmpty(null);                //=> false\n     R.isEmpty({});                  //=> true\n     R.isEmpty({length: 0});         //=> false\n     R.isEmpty(Uint8Array.from('')); //=> true"
        ],
        "name": "isEmpty",
        "longname": "R.isEmpty",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                871,
                895
            ],
            "filename": "isEmpty.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100008993",
                "name": "module.exports",
                "type": "Identifier",
                "value": "isEmpty",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "isNil.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009001",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */",
        "meta": {
            "range": [
                478,
                550
            ],
            "filename": "isNil.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009007",
                "name": "isNil",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Checks if the input value is `null` or `undefined`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Type",
                "value": "Type"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "* -> Boolean",
                "value": "* -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to test.",
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "`true` if `x` is `undefined` or `null`, otherwise `false`."
            }
        ],
        "examples": [
            "R.isNil(null); //=> true\n     R.isNil(undefined); //=> true\n     R.isNil(0); //=> false\n     R.isNil([]); //=> false"
        ],
        "name": "isNil",
        "longname": "R.isNil",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                553,
                575
            ],
            "filename": "isNil.js",
            "lineno": 29,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009020",
                "name": "module.exports",
                "type": "Identifier",
                "value": "isNil",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                47
            ],
            "filename": "isNotNil.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009028",
                "name": "isNil",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "isNil",
        "longname": "isNil",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54,
                110
            ],
            "filename": "isNotNil.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009034",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Checks if the input value is not `null` and not `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is not `undefined` or not `null`, otherwise `false`.\n * @example\n *\n *      R.isNotNil(null); //=> false\n *      R.isNotNil(undefined); //=> false\n *      R.isNotNil(0); //=> true\n *      R.isNotNil([]); //=> true\n */",
        "meta": {
            "range": [
                558,
                636
            ],
            "filename": "isNotNil.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009040",
                "name": "isNotNil",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Checks if the input value is not `null` and not `undefined`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.29.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Type",
                "value": "Type"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "* -> Boolean",
                "value": "* -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to test.",
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "`true` if `x` is not `undefined` or not `null`, otherwise `false`."
            }
        ],
        "examples": [
            "R.isNotNil(null); //=> false\n     R.isNotNil(undefined); //=> false\n     R.isNotNil(0); //=> true\n     R.isNotNil([]); //=> true"
        ],
        "name": "isNotNil",
        "longname": "R.isNotNil",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                639,
                664
            ],
            "filename": "isNotNil.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009054",
                "name": "module.exports",
                "type": "Identifier",
                "value": "isNotNil",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                51
            ],
            "filename": "join.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009062",
                "name": "invoker",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "invoker",
        "longname": "invoker",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      const spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */",
        "meta": {
            "range": [
                674,
                713
            ],
            "filename": "join.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009068",
                "name": "join",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a string made by inserting the `separator` between each element and\nconcatenating all the elements into a single string.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> [a] -> String",
                "value": "String -> [a] -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ]
                },
                "description": "The string used to separate the elements.",
                "name": "separator"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The elements to join into a string.",
                "name": "xs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "str The string made by concatenating `xs` with `separator`."
            }
        ],
        "see": [
            "R.split"
        ],
        "examples": [
            "const spacer = R.join(' ');\n     spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     R.join('|', [1, 2, 3]);    //=> '1|2|3'"
        ],
        "name": "join",
        "longname": "R.join",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                715,
                736
            ],
            "filename": "join.js",
            "lineno": 28,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009075",
                "name": "module.exports",
                "type": "Identifier",
                "value": "join",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "juxt.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009083",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                116
            ],
            "filename": "juxt.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009089",
                "name": "converge",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "converge",
        "longname": "converge",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      const getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */",
        "meta": {
            "range": [
                678,
                826
            ],
            "filename": "juxt.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009095",
                "name": "juxt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "juxt applies a list of functions to a list of values.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])",
                "value": "[(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]",
                "value": "R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of functions",
                "name": "fns"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that returns a list of values after applying each of the original `fns` to its parameters."
            }
        ],
        "see": [
            "R.applySpec"
        ],
        "examples": [
            "const getRange = R.juxt([Math.min, Math.max]);\n     getRange(3, 4, 9, -3); //=> [-3, 9]"
        ],
        "name": "juxt",
        "longname": "R.juxt",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                829,
                850
            ],
            "filename": "juxt.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009121",
                "name": "module.exports",
                "type": "Identifier",
                "value": "juxt",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "keys.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009129",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "keys.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009135",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                190
            ],
            "filename": "keys.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009141",
                "name": "_isArguments",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArguments",
        "longname": "_isArguments",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                226,
                308
            ],
            "filename": "keys.js",
            "lineno": 14,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009147",
                "name": "hasEnumBug",
                "type": "UnaryExpression",
                "value": "!"
            }
        },
        "undocumented": true,
        "name": "hasEnumBug",
        "longname": "hasEnumBug",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                259,
                273
            ],
            "filename": "keys.js",
            "lineno": 17,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009153",
                "name": "toString",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "toString",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                314,
                450
            ],
            "filename": "keys.js",
            "lineno": 19,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009158",
                "name": "nonEnumerableProps",
                "type": "ArrayExpression",
                "value": "[\"constructor\",\"valueOf\",\"isPrototypeOf\",\"toString\",\"propertyIsEnumerable\",\"hasOwnProperty\",\"toLocaleString\"]"
            }
        },
        "undocumented": true,
        "name": "nonEnumerableProps",
        "longname": "nonEnumerableProps",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                471,
                587
            ],
            "filename": "keys.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009169",
                "name": "hasArgsEnumBug",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "hasArgsEnumBug",
        "longname": "hasArgsEnumBug",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                594,
                775
            ],
            "filename": "keys.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009183",
                "name": "contains",
                "type": "FunctionExpression",
                "value": "contains"
            },
            "vars": {
                "idx": "contains~idx"
            }
        },
        "undocumented": true,
        "name": "contains",
        "longname": "contains",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                643,
                650
            ],
            "filename": "keys.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009191",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "contains~idx",
        "kind": "member",
        "memberof": "contains",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                743,
                751
            ],
            "filename": "keys.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009211",
                "name": "idx",
                "type": "Literal",
                "funcscope": "contains",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "contains~idx",
        "kind": "member",
        "memberof": "contains",
        "scope": "inner"
    },
    {
        "comment": "/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values, R.toPairs\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */",
        "meta": {
            "range": [
                1323,
                2067
            ],
            "filename": "keys.js",
            "lineno": 62,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009217",
                "name": "keys",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "description": "Returns a list containing the names of all the enumerable own properties of\nthe supplied object.\nNote that the order of the output array is not guaranteed to be consistent\nacross different JS platforms.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{k: v} -> [k]",
                "value": "{k: v} -> [k]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to extract properties from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of the object's own properties."
            }
        ],
        "see": [
            "R.keysIn, R.values, R.toPairs"
        ],
        "examples": [
            "R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']"
        ],
        "name": "keys",
        "longname": "R.keys",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1585,
                1589
            ],
            "filename": "keys.js",
            "lineno": 73,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009264",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1591,
                1595
            ],
            "filename": "keys.js",
            "lineno": 73,
            "columnno": 12,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009266",
                "name": "nIdx"
            }
        },
        "undocumented": true,
        "name": "nIdx",
        "longname": "<anonymous>~nIdx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1603,
                1610
            ],
            "filename": "keys.js",
            "lineno": 74,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009269",
                "name": "ks",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "ks",
        "longname": "<anonymous>~ks",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1619,
                1672
            ],
            "filename": "keys.js",
            "lineno": 76,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009273",
                "name": "checkArgsLength",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "checkArgsLength",
        "longname": "<anonymous>~checkArgsLength",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1773,
                1793
            ],
            "filename": "keys.js",
            "lineno": 80,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009298",
                "name": "ks[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~ks.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~ks",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1830,
                1866
            ],
            "filename": "keys.js",
            "lineno": 85,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009309",
                "name": "nIdx",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nIdx",
        "longname": "<anonymous>~nIdx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1899,
                1930
            ],
            "filename": "keys.js",
            "lineno": 88,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009322",
                "name": "prop",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "nonEnumerableProps[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1993,
                2013
            ],
            "filename": "keys.js",
            "lineno": 91,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009340",
                "name": "ks[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~ks.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~ks",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2030,
                2039
            ],
            "filename": "keys.js",
            "lineno": 94,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009348",
                "name": "nIdx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nIdx",
        "longname": "<anonymous>~nIdx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2069,
                2090
            ],
            "filename": "keys.js",
            "lineno": 100,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009354",
                "name": "module.exports",
                "type": "Identifier",
                "value": "keys",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "keysIn.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009362",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a list containing the names of all the properties of the supplied\n * object, including prototype properties.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own and prototype properties.\n * @see R.keys, R.valuesIn\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.keysIn(f); //=> ['x', 'y']\n */",
        "meta": {
            "range": [
                712,
                862
            ],
            "filename": "keysIn.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009368",
                "name": "keysIn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a list containing the names of all the properties of the supplied\nobject, including prototype properties.\nNote that the order of the output array is not guaranteed to be consistent\nacross different JS platforms.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{k: v} -> [k]",
                "value": "{k: v} -> [k]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to extract properties from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of the object's own and prototype properties."
            }
        ],
        "see": [
            "R.keys, R.valuesIn"
        ],
        "examples": [
            "const F = function() { this.x = 'X'; };\n     F.prototype.y = 'Y';\n     const f = new F();\n     R.keysIn(f); //=> ['x', 'y']"
        ],
        "name": "keysIn",
        "longname": "R.keysIn",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                772,
                776
            ],
            "filename": "keysIn.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009377",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                784,
                791
            ],
            "filename": "keysIn.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009380",
                "name": "ks",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "ks",
        "longname": "<anonymous>~ks",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                820,
                840
            ],
            "filename": "keysIn.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009388",
                "name": "ks[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~ks.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~ks",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                865,
                888
            ],
            "filename": "keysIn.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009398",
                "name": "module.exports",
                "type": "Identifier",
                "value": "keysIn",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                43
            ],
            "filename": "last.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009406",
                "name": "nth",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nth",
        "longname": "nth",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */",
        "meta": {
            "range": [
                458,
                486
            ],
            "filename": "last.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009412",
                "name": "last",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the last element of the given list or string.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.4",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> a | Undefined",
                "value": "[a] -> a | Undefined"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String",
                "value": "String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.init, R.head, R.tail"
        ],
        "examples": [
            "R.last(['fi', 'fo', 'fum']); //=> 'fum'\n     R.last([]); //=> undefined\n\n     R.last('abc'); //=> 'c'\n     R.last(''); //=> ''"
        ],
        "name": "last",
        "longname": "R.last",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                488,
                509
            ],
            "filename": "last.js",
            "lineno": 29,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009419",
                "name": "module.exports",
                "type": "Identifier",
                "value": "last",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "lastIndexOf.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009427",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "lastIndexOf.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009433",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                177
            ],
            "filename": "lastIndexOf.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009439",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the position of the last occurrence of an item in an array, or -1 if\n * the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.indexOf, R.findLastIndex\n * @example\n *\n *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n */",
        "meta": {
            "range": [
                772,
                1115
            ],
            "filename": "lastIndexOf.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009445",
                "name": "lastIndexOf",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the position of the last occurrence of an item in an array, or -1 if\nthe item is not included in the array. [`R.equals`](#equals) is used to\ndetermine equality.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> [a] -> Number",
                "value": "a -> [a] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The item to find.",
                "name": "target"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to search in.",
                "name": "xs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "the index of the target, or -1 if the target is not found."
            }
        ],
        "see": [
            "R.indexOf, R.findLastIndex"
        ],
        "examples": [
            "R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n     R.lastIndexOf(10, [1,2,3,4]); //=> -1"
        ],
        "name": "lastIndexOf",
        "longname": "R.lastIndexOf",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                960,
                979
            ],
            "filename": "lastIndexOf.js",
            "lineno": 39,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009475",
                "name": "idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1077,
                1085
            ],
            "filename": "lastIndexOf.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009498",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1118,
                1146
            ],
            "filename": "lastIndexOf.js",
            "lineno": 53,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009505",
                "name": "module.exports",
                "type": "Identifier",
                "value": "lastIndexOf",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "length.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009513",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                127
            ],
            "filename": "length.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009519",
                "name": "_isNumber",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isNumber",
        "longname": "_isNumber",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */",
        "meta": {
            "range": [
                472,
                598
            ],
            "filename": "length.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009525",
                "name": "length",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the number of elements in the array by returning `list.length`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> Number",
                "value": "[a] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to inspect.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The length of the array."
            }
        ],
        "examples": [
            "R.length([]); //=> 0\n     R.length([1, 2, 3]); //=> 3"
        ],
        "name": "length",
        "longname": "R.length",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                601,
                624
            ],
            "filename": "length.js",
            "lineno": 31,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009549",
                "name": "module.exports",
                "type": "Identifier",
                "value": "length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "lens.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009557",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                106
            ],
            "filename": "lens.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009563",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      const xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */",
        "meta": {
            "range": [
                884,
                1137
            ],
            "filename": "lens.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009569",
                "name": "lens",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a lens for the given getter and setter functions. The getter \"gets\"\nthe value of the focus; the setter \"sets\" the value of the focus. The setter\nshould not mutate the data structure.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Lens s a = Functor f => (a -> f a) -> s -> f s",
                "value": "Lens s a = Functor f => (a -> f a) -> s -> f s"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(s -> a) -> ((a, s) -> s) -> Lens s a",
                "value": "(s -> a) -> ((a, s) -> s) -> Lens s a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "getter"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "setter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Lens"
                    ]
                }
            }
        ],
        "see": [
            "R.view, R.set, R.over, R.lensIndex, R.lensProp"
        ],
        "examples": [
            "const xLens = R.lens(R.prop('x'), R.assoc('x'));\n\n     R.view(xLens, {x: 1, y: 2});            //=> 1\n     R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}"
        ],
        "name": "lens",
        "longname": "R.lens",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1140,
                1161
            ],
            "filename": "lens.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009603",
                "name": "module.exports",
                "type": "Identifier",
                "value": "lens",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "lensIndex.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009611",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "lensIndex.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009617",
                "name": "lens",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lens",
        "longname": "lens",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                115,
                154
            ],
            "filename": "lensIndex.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009623",
                "name": "nth",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nth",
        "longname": "nth",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                161,
                206
            ],
            "filename": "lensIndex.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009629",
                "name": "update",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "update",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a lens whose focus is the specified index.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Number -> Lens s a\n * @param {Number} n\n * @return {Lens}\n * @see R.view, R.set, R.over, R.nth\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n */",
        "meta": {
            "range": [
                776,
                870
            ],
            "filename": "lensIndex.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009635",
                "name": "lensIndex",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a lens whose focus is the specified index.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Lens s a = Functor f => (a -> f a) -> s -> f s",
                "value": "Lens s a = Functor f => (a -> f a) -> s -> f s"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Lens s a",
                "value": "Number -> Lens s a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "n"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Lens"
                    ]
                }
            }
        ],
        "see": [
            "R.view, R.set, R.over, R.nth"
        ],
        "examples": [
            "const headLens = R.lensIndex(0);\n\n     R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n     R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n     R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']"
        ],
        "name": "lensIndex",
        "longname": "R.lensIndex",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                873,
                899
            ],
            "filename": "lensIndex.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009653",
                "name": "module.exports",
                "type": "Identifier",
                "value": "lensIndex",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "lensPath.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009661",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                118
            ],
            "filename": "lensPath.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009667",
                "name": "assocPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "assocPath",
        "longname": "assocPath",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125,
                166
            ],
            "filename": "lensPath.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009673",
                "name": "lens",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lens",
        "longname": "lens",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                173,
                214
            ],
            "filename": "lensPath.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009679",
                "name": "path",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "path",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a lens whose focus is the specified path.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig [Idx] -> Lens s a\n * @param {Array} path The path to use.\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      const xHeadYLens = R.lensPath(['x', 0, 'y']);\n *\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> 2\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n */",
        "meta": {
            "range": [
                946,
                1042
            ],
            "filename": "lensPath.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009685",
                "name": "lensPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a lens whose focus is the specified path.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Lens s a = Functor f => (a -> f a) -> s -> f s",
                "value": "Lens s a = Functor f => (a -> f a) -> s -> f s"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Idx] -> Lens s a",
                "value": "[Idx] -> Lens s a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The path to use.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Lens"
                    ]
                }
            }
        ],
        "see": [
            "R.view, R.set, R.over"
        ],
        "examples": [
            "const xHeadYLens = R.lensPath(['x', 0, 'y']);\n\n     R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n     //=> 2\n     R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n     //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n     R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n     //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}"
        ],
        "name": "lensPath",
        "longname": "R.lensPath",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1045,
                1070
            ],
            "filename": "lensPath.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009703",
                "name": "module.exports",
                "type": "Identifier",
                "value": "lensPath",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "lensProp.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009711",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "lensProp.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009717",
                "name": "assoc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "assoc",
        "longname": "assoc",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                117,
                158
            ],
            "filename": "lensProp.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009723",
                "name": "lens",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lens",
        "longname": "lens",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                165,
                206
            ],
            "filename": "lensProp.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009729",
                "name": "prop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "prop",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */",
        "meta": {
            "range": [
                745,
                837
            ],
            "filename": "lensProp.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009735",
                "name": "lensProp",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a lens whose focus is the specified property.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Lens s a = Functor f => (a -> f a) -> s -> f s",
                "value": "Lens s a = Functor f => (a -> f a) -> s -> f s"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> Lens s a",
                "value": "String -> Lens s a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "name": "k"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Lens"
                    ]
                }
            }
        ],
        "see": [
            "R.view, R.set, R.over"
        ],
        "examples": [
            "const xLens = R.lensProp('x');\n\n     R.view(xLens, {x: 1, y: 2});            //=> 1\n     R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}"
        ],
        "name": "lensProp",
        "longname": "R.lensProp",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                840,
                865
            ],
            "filename": "lensProp.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009753",
                "name": "module.exports",
                "type": "Identifier",
                "value": "lensProp",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "lift.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009761",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "lift.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009767",
                "name": "liftN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "liftN",
        "longname": "liftN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * \"lifts\" a function of arity >= 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      const madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([100, 200], [30, 40], [5, 6, 7]); //=> [135, 136, 137, 145, 146, 147, 235, 236, 237, 245, 246, 247]\n *\n *      const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([10, 20], [1], [2, 3], [4], [100, 200]); //=> [117, 217, 118, 218, 127, 227, 128, 228]\n */",
        "meta": {
            "range": [
                910,
                992
            ],
            "filename": "lift.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009773",
                "name": "lift",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "\"lifts\" a function of arity >= 1 so that it may \"map over\" a list, Function or other\nobject that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.7.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(*... -> *) -> ([*]... -> [*])",
                "value": "(*... -> *) -> ([*]... -> [*])"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to lift into higher context",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The lifted function."
            }
        ],
        "see": [
            "R.liftN"
        ],
        "examples": [
            "const madd3 = R.lift((a, b, c) => a + b + c);\n\n     madd3([100, 200], [30, 40], [5, 6, 7]); //=> [135, 136, 137, 145, 146, 147, 235, 236, 237, 245, 246, 247]\n\n     const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n\n     madd5([10, 20], [1], [2, 3], [4], [100, 200]); //=> [117, 217, 118, 218, 127, 227, 128, 228]"
        ],
        "name": "lift",
        "longname": "R.lift",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                995,
                1016
            ],
            "filename": "lift.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009789",
                "name": "module.exports",
                "type": "Identifier",
                "value": "lift",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "liftN.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009797",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                133
            ],
            "filename": "liftN.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009803",
                "name": "_arrayReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arrayReduce",
        "longname": "_arrayReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                177
            ],
            "filename": "liftN.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009809",
                "name": "ap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "ap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                184,
                229
            ],
            "filename": "liftN.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009815",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                236,
                275
            ],
            "filename": "liftN.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009821",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      const madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */",
        "meta": {
            "range": [
                897,
                1132
            ],
            "filename": "liftN.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009827",
                "name": "liftN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "\"lifts\" a function to be the specified arity, so that it may \"map over\" that\nmany lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.7.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> (*... -> *) -> ([*]... -> [*])",
                "value": "Number -> (*... -> *) -> ([*]... -> [*])"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to lift into higher context",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The lifted function."
            }
        ],
        "see": [
            "R.lift, R.ap"
        ],
        "examples": [
            "const madd3 = R.liftN(3, (...args) => R.sum(args));\n     madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]"
        ],
        "name": "liftN",
        "longname": "R.liftN",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                961,
                987
            ],
            "filename": "liftN.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009837",
                "name": "lifted",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lifted",
        "longname": "<anonymous>~lifted",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1135,
                1157
            ],
            "filename": "liftN.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009870",
                "name": "module.exports",
                "type": "Identifier",
                "value": "liftN",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "lt.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009878",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */",
        "meta": {
            "range": [
                506,
                571
            ],
            "filename": "lt.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009884",
                "name": "lt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the first argument is less than the second; `false`\notherwise.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord a => a -> a -> Boolean",
                "value": "Ord a => a -> a -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.gt"
        ],
        "examples": [
            "R.lt(2, 1); //=> false\n     R.lt(2, 2); //=> false\n     R.lt(2, 3); //=> true\n     R.lt('a', 'z'); //=> true\n     R.lt('z', 'a'); //=> false"
        ],
        "name": "lt",
        "longname": "R.lt",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                574,
                593
            ],
            "filename": "lt.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009898",
                "name": "module.exports",
                "type": "Identifier",
                "value": "lt",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "lte.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009906",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */",
        "meta": {
            "range": [
                533,
                601
            ],
            "filename": "lte.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009912",
                "name": "lte",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the first argument is less than or equal to the second;\n`false` otherwise.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord a => a -> a -> Boolean",
                "value": "Ord a => a -> a -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.gte"
        ],
        "examples": [
            "R.lte(2, 1); //=> false\n     R.lte(2, 2); //=> true\n     R.lte(2, 3); //=> true\n     R.lte('a', 'z'); //=> true\n     R.lte('z', 'a'); //=> false"
        ],
        "name": "lte",
        "longname": "R.lte",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                604,
                624
            ],
            "filename": "lte.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009926",
                "name": "module.exports",
                "type": "Identifier",
                "value": "lte",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                70
            ],
            "filename": "map.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009934",
                "name": "_arrayReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arrayReduce",
        "longname": "_arrayReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77,
                133
            ],
            "filename": "map.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009940",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                208
            ],
            "filename": "map.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009946",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                215,
                265
            ],
            "filename": "map.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009952",
                "name": "_map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_map",
        "longname": "_map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                272,
                324
            ],
            "filename": "map.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009958",
                "name": "_xmap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xmap",
        "longname": "_xmap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                331,
                376
            ],
            "filename": "map.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009964",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                383,
                424
            ],
            "filename": "map.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009970",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex, R.pluck, R.project\n * @example\n *\n *      const double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */",
        "meta": {
            "range": [
                1653,
                2195
            ],
            "filename": "map.js",
            "lineno": 65,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100009976",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function and\na [functor](https://github.com/fantasyland/fantasy-land#functor),\napplies the function to each of the functor's values, and returns\na functor of the same shape.\n\nRamda provides suitable `map` implementations for `Array` and `Object`,\nso this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n\nDispatches to the `map` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.\n\nAlso treats functions as functors and will compose them together.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Functor f => (a -> b) -> f a -> f b",
                "value": "Functor f => (a -> b) -> f a -> f b"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.map(f, [a, b]) = [f(a), f(b)]",
                "value": "R.map(f, [a, b]) = [f(a), f(b)]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }",
                "value": "R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.map(f, functor_o) = functor_o.map(f)",
                "value": "R.map(f, functor_o) = functor_o.map(f)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to be called on every element of the input `list`.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to be iterated over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The new list."
            }
        ],
        "see": [
            "R.transduce, R.addIndex, R.pluck, R.project"
        ],
        "examples": [
            "const double = x => x * 2;\n\n     R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n\n     R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}"
        ],
        "name": "map",
        "longname": "R.map",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2064,
                2091
            ],
            "filename": "map.js",
            "lineno": 78,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010033",
                "name": "acc[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc[undefined]",
        "longname": "acc[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2198,
                2218
            ],
            "filename": "map.js",
            "lineno": 87,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010055",
                "name": "module.exports",
                "type": "Identifier",
                "value": "map",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mapAccum.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010063",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.scan, R.addIndex, R.mapAccumRight\n * @example\n *\n *      const digits = ['1', '2', '3', '4'];\n *      const appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */",
        "meta": {
            "range": [
                1222,
                1508
            ],
            "filename": "mapAccum.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010069",
                "name": "mapAccum",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "The `mapAccum` function behaves like a combination of map and reduce; it\napplies a function to each element of a list, passing an accumulating\nparameter from left to right, and returning a final value of this\naccumulator together with the new list.\n\nThe iterator function receives two arguments, *acc* and *value*, and should\nreturn a tuple *[acc, value]*.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])",
                "value": "((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.mapAccum(f, a, [b, c, d]) = [\n  f(f(f(a, b)[0], c)[0], d)[0],\n  [\n    f(a, b)[1],\n    f(f(a, b)[0], c)[1],\n    f(f(f(a, b)[0], c)[0], d)[1]\n  ]\n]",
                "value": "R.mapAccum(f, a, [b, c, d]) = [\n  f(f(f(a, b)[0], c)[0], d)[0],\n  [\n    f(a, b)[1],\n    f(f(a, b)[0], c)[1],\n    f(f(f(a, b)[0], c)[0], d)[1]\n  ]\n]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to be called on every element of the input `list`.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The accumulator value.",
                "name": "acc"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The final, accumulated value."
            }
        ],
        "see": [
            "R.scan, R.addIndex, R.mapAccumRight"
        ],
        "examples": [
            "const digits = ['1', '2', '3', '4'];\n     const appender = (a, b) => [a + b, a + b];\n\n     R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]"
        ],
        "name": "mapAccum",
        "longname": "R.mapAccum",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1296,
                1303
            ],
            "filename": "mapAccum.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010080",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1311,
                1328
            ],
            "filename": "mapAccum.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010084",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1336,
                1347
            ],
            "filename": "mapAccum.js",
            "lineno": 45,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010090",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1355,
                1368
            ],
            "filename": "mapAccum.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010094",
                "name": "tuple",
                "type": "ArrayExpression",
                "value": "[\"acc\"]"
            }
        },
        "undocumented": true,
        "name": "tuple",
        "longname": "<anonymous>~tuple",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1397,
                1428
            ],
            "filename": "mapAccum.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010104",
                "name": "tuple",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tuple",
        "longname": "<anonymous>~tuple",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1434,
                1456
            ],
            "filename": "mapAccum.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010115",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "tuple[1]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1462,
                1470
            ],
            "filename": "mapAccum.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010123",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1511,
                1536
            ],
            "filename": "mapAccum.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010133",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mapAccum",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mapAccumRight.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010141",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      const digits = ['1', '2', '3', '4'];\n *      const appender = (a, b) => [b + a, b + a];\n *\n *      R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   f(f(f(a, d)[0], c)[0], b)[0],\n *   [\n *     f(a, d)[1],\n *     f(f(a, d)[0], c)[1],\n *     f(f(f(a, d)[0], c)[0], b)[1]\n *   ]\n * ]\n */",
        "meta": {
            "range": [
                1333,
                1617
            ],
            "filename": "mapAccumRight.js",
            "lineno": 43,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010147",
                "name": "mapAccumRight",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "The `mapAccumRight` function behaves like a combination of map and reduce; it\napplies a function to each element of a list, passing an accumulating\nparameter from right to left, and returning a final value of this\naccumulator together with the new list.\n\nSimilar to [`mapAccum`](#mapAccum), except moves through the input list from\nthe right to the left.\n\nThe iterator function receives two arguments, *acc* and *value*, and should\nreturn a tuple *[acc, value]*.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])",
                "value": "((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.mapAccumRight(f, a, [b, c, d]) = [\n  f(f(f(a, d)[0], c)[0], b)[0],\n  [\n    f(a, d)[1],\n    f(f(a, d)[0], c)[1],\n    f(f(f(a, d)[0], c)[0], b)[1]\n  ]\n]",
                "value": "R.mapAccumRight(f, a, [b, c, d]) = [\n  f(f(f(a, d)[0], c)[0], b)[0],\n  [\n    f(a, d)[1],\n    f(f(a, d)[0], c)[1],\n    f(f(f(a, d)[0], c)[0], b)[1]\n  ]\n]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to be called on every element of the input `list`.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The accumulator value.",
                "name": "acc"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The final, accumulated value."
            }
        ],
        "see": [
            "R.addIndex, R.mapAccum"
        ],
        "examples": [
            "const digits = ['1', '2', '3', '4'];\n     const appender = (a, b) => [b + a, b + a];\n\n     R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]"
        ],
        "name": "mapAccumRight",
        "longname": "R.mapAccumRight",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1417,
                1438
            ],
            "filename": "mapAccumRight.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010158",
                "name": "idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1446,
                1457
            ],
            "filename": "mapAccumRight.js",
            "lineno": 47,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010166",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1465,
                1478
            ],
            "filename": "mapAccumRight.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010170",
                "name": "tuple",
                "type": "ArrayExpression",
                "value": "[\"acc\"]"
            }
        },
        "undocumented": true,
        "name": "tuple",
        "longname": "<anonymous>~tuple",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1506,
                1537
            ],
            "filename": "mapAccumRight.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010180",
                "name": "tuple",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tuple",
        "longname": "<anonymous>~tuple",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1543,
                1565
            ],
            "filename": "mapAccumRight.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010191",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "tuple[1]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1571,
                1579
            ],
            "filename": "mapAccumRight.js",
            "lineno": 53,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010199",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1620,
                1650
            ],
            "filename": "mapAccumRight.js",
            "lineno": 59,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010209",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mapAccumRight",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                70
            ],
            "filename": "mapObjIndexed.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010217",
                "name": "_arrayReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arrayReduce",
        "longname": "_arrayReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77,
                133
            ],
            "filename": "mapObjIndexed.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010223",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                181
            ],
            "filename": "mapObjIndexed.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010229",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      const xyz = { x: 1, y: 2, z: 3 };\n *      const prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */",
        "meta": {
            "range": [
                795,
                989
            ],
            "filename": "mapObjIndexed.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010235",
                "name": "mapObjIndexed",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "An Object-specific version of [`map`](#map). The function is applied to three\narguments: *(value, key, obj)*. If only the value is significant, use\n[`map`](#map) instead.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((*, String, Object) -> *) -> Object -> Object",
                "value": "((*, String, Object) -> *) -> Object -> Object"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.map"
        ],
        "examples": [
            "const xyz = { x: 1, y: 2, z: 3 };\n     const prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n\n     R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }"
        ],
        "name": "mapObjIndexed",
        "longname": "R.mapObjIndexed",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                915,
                948
            ],
            "filename": "mapObjIndexed.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010252",
                "name": "acc[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc[undefined]",
        "longname": "acc[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                992,
                1022
            ],
            "filename": "mapObjIndexed.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010270",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mapObjIndexed",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "match.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010278",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */",
        "meta": {
            "range": [
                878,
                966
            ],
            "filename": "match.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010284",
                "name": "match",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Tests a regular expression against a String. Note that this function will\nreturn an empty array when there are no matches. This differs from\n[`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\nwhich returns `null` when there are no matches.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "String",
                "value": "String"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "RegExp -> String -> [String | Undefined]",
                "value": "RegExp -> String -> [String | Undefined]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "description": "A regular expression.",
                "name": "rx"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The string to match against",
                "name": "str"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of matches or empty array."
            }
        ],
        "see": [
            "R.test"
        ],
        "examples": [
            "R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n     R.match(/a/, 'b'); //=> []\n     R.match(/a/, null); //=> TypeError: null does not have a method named \"match\""
        ],
        "name": "match",
        "longname": "R.match",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                969,
                991
            ],
            "filename": "match.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010302",
                "name": "module.exports",
                "type": "Identifier",
                "value": "match",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mathMod.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010310",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                129
            ],
            "filename": "mathMod.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010316",
                "name": "_isInteger",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isInteger",
        "longname": "_isInteger",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      const clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      const seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */",
        "meta": {
            "range": [
                1141,
                1325
            ],
            "filename": "mathMod.js",
            "lineno": 43,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010322",
                "name": "mathMod",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "`mathMod` behaves like the modulo operator should mathematically, unlike the\n`%` operator (and by extension, [`R.modulo`](#modulo)). So while\n`-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\narguments, and returns NaN when the modulus is zero or negative.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> Number",
                "value": "Number -> Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The dividend.",
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "the modulus.",
                "name": "p"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The result of `b mod a`."
            }
        ],
        "see": [
            "R.modulo"
        ],
        "examples": [
            "R.mathMod(-17, 5);  //=> 3\n     R.mathMod(17, 5);   //=> 2\n     R.mathMod(17, -5);  //=> NaN\n     R.mathMod(17, 0);   //=> NaN\n     R.mathMod(17.2, 5); //=> NaN\n     R.mathMod(17, 5.3); //=> NaN\n\n     const clock = R.mathMod(R.__, 12);\n     clock(15); //=> 3\n     clock(24); //=> 0\n\n     const seventeenMod = R.mathMod(17);\n     seventeenMod(3);  //=> 2\n     seventeenMod(4);  //=> 1\n     seventeenMod(10); //=> 7"
        ],
        "name": "mathMod",
        "longname": "R.mathMod",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1328,
                1352
            ],
            "filename": "mathMod.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010360",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mathMod",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "max.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010368",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                116
            ],
            "filename": "max.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010374",
                "name": "toString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "toString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */",
        "meta": {
            "range": [
                424,
                1045
            ],
            "filename": "max.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010380",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the larger of its two arguments.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord a => a -> a -> a",
                "value": "Ord a => a -> a -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.maxBy, R.min"
        ],
        "examples": [
            "R.max(789, 123); //=> 789\n     R.max('a', 'b'); //=> 'b'"
        ],
        "name": "max",
        "longname": "R.max",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                511,
                623
            ],
            "filename": "max.js",
            "lineno": 34,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010396",
                "name": "safeMax",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "x",
                    "y"
                ]
            }
        },
        "undocumented": true,
        "name": "safeMax",
        "longname": "<anonymous>~safeMax",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                631,
                657
            ],
            "filename": "max.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010420",
                "name": "maxByValue",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "maxByValue",
        "longname": "<anonymous>~maxByValue",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                728,
                767
            ],
            "filename": "max.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010434",
                "name": "maxByType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "maxByType",
        "longname": "<anonymous>~maxByType",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                857,
                878
            ],
            "filename": "max.js",
            "lineno": 54,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010456",
                "name": "stringA",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "stringA",
        "longname": "<anonymous>~stringA",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                886,
                934
            ],
            "filename": "max.js",
            "lineno": 55,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010462",
                "name": "maxByStringValue",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "maxByStringValue",
        "longname": "<anonymous>~maxByStringValue",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1048,
                1068
            ],
            "filename": "max.js",
            "lineno": 64,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010485",
                "name": "module.exports",
                "type": "Identifier",
                "value": "max",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "maxBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010493",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                106
            ],
            "filename": "maxBy.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010499",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "max",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */",
        "meta": {
            "range": [
                703,
                832
            ],
            "filename": "maxBy.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010505",
                "name": "maxBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function and two values, and returns whichever value produces the\nlarger result when passed to the provided function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord b => (a -> b) -> a -> a -> a",
                "value": "Ord b => (a -> b) -> a -> a -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.max, R.minBy"
        ],
        "examples": [
            "//  square :: Number -> Number\n     const square = n => n * n;\n\n     R.maxBy(square, -3, 2); //=> -3\n\n     R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n     R.reduce(R.maxBy(square), 0, []); //=> 0"
        ],
        "name": "maxBy",
        "longname": "R.maxBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                765,
                779
            ],
            "filename": "maxBy.js",
            "lineno": 37,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010516",
                "name": "resultB",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resultB",
        "longname": "<anonymous>~resultB",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                835,
                857
            ],
            "filename": "maxBy.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010534",
                "name": "module.exports",
                "type": "Identifier",
                "value": "maxBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mean.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010542",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                106
            ],
            "filename": "mean.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010548",
                "name": "sum",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "sum",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.median\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */",
        "meta": {
            "range": [
                400,
                487
            ],
            "filename": "mean.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010554",
                "name": "mean",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the mean of the given list of numbers.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Number] -> Number",
                "value": "[Number] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "see": [
            "R.median"
        ],
        "examples": [
            "R.mean([2, 7, 9]); //=> 6\n     R.mean([]); //=> NaN"
        ],
        "name": "mean",
        "longname": "R.mean",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                490,
                511
            ],
            "filename": "mean.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010571",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mean",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "median.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010579",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "median.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010585",
                "name": "mean",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mean",
        "longname": "mean",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.mean\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */",
        "meta": {
            "range": [
                446,
                770
            ],
            "filename": "median.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010591",
                "name": "median",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the median of the given list of numbers.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Number] -> Number",
                "value": "[Number] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "see": [
            "R.mean"
        ],
        "examples": [
            "R.median([2, 9, 7]); //=> 7\n     R.median([7, 2, 10, 9]); //=> 8\n     R.median([]); //=> NaN"
        ],
        "name": "median",
        "longname": "R.median",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                507,
                524
            ],
            "filename": "median.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010600",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                573,
                592
            ],
            "filename": "median.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010613",
                "name": "width",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "width",
        "longname": "<anonymous>~width",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                600,
                623
            ],
            "filename": "median.js",
            "lineno": 37,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010621",
                "name": "idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                773,
                796
            ],
            "filename": "median.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010669",
                "name": "module.exports",
                "type": "Identifier",
                "value": "median",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "memoizeWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010677",
                "name": "_arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arity",
        "longname": "_arity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "memoizeWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010683",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                128,
                178
            ],
            "filename": "memoizeWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010689",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a string-returning function `keyGen` and a function `fn` and returns\n * a new function that returns cached results for subsequent\n * calls with the same arguments.\n *\n * When the function is invoked, `keyGen` is applied to the same arguments\n * and its result becomes the cache key. If the cache contains something\n * under that key, the function simply returns it and does not invoke `fn` at all.\n *\n * Otherwise `fn` is applied to the same arguments and its return value\n * is cached under that key and returned by the function.\n *\n * Care must be taken when implementing `keyGen` to avoid key collision,\n * or if tracking references, memory leaks and mutating arguments.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} keyGen The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @example\n *      const withAge = memoizeWith(o => `${o.birth}/${o.death}`, ({birth, death}) => {\n *      //                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^\n *      //                          keyGen                        fn\n *        console.log(`computing age for ${birth}/${death}`);\n *        return ({birth, death, age: death - birth});\n *      });\n *\n *      withAge({birth: 1921, death: 1999});\n *      //=> LOG: computing age for 1921/1999\n *      //=> {birth: 1921, death: 1999, age: 78} (returned from fn)\n *\n *      withAge({birth: 1921, death: 1999});\n *      //=> {birth: 1921, death: 1999, age: 78} (returned from cache)\n */",
        "meta": {
            "range": [
                1831,
                2120
            ],
            "filename": "memoizeWith.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010695",
                "name": "memoizeWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a string-returning function `keyGen` and a function `fn` and returns\na new function that returns cached results for subsequent\ncalls with the same arguments.\n\nWhen the function is invoked, `keyGen` is applied to the same arguments\nand its result becomes the cache key. If the cache contains something\nunder that key, the function simply returns it and does not invoke `fn` at all.\n\nOtherwise `fn` is applied to the same arguments and its return value\nis cached under that key and returned by the function.\n\nCare must be taken when implementing `keyGen` to avoid key collision,\nor if tracking references, memory leaks and mutating arguments.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(*... -> String) -> (*... -> a) -> (*... -> a)",
                "value": "(*... -> String) -> (*... -> a) -> (*... -> a)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to generate the cache key.",
                "name": "keyGen"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to memoize.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Memoized version of `fn`."
            }
        ],
        "examples": [
            "const withAge = memoizeWith(o => `${o.birth}/${o.death}`, ({birth, death}) => {\n     //                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^\n     //                          keyGen                        fn\n       console.log(`computing age for ${birth}/${death}`);\n       return ({birth, death, age: death - birth});\n     });\n\n     withAge({birth: 1921, death: 1999});\n     //=> LOG: computing age for 1921/1999\n     //=> {birth: 1921, death: 1999, age: 78} (returned from fn)\n\n     withAge({birth: 1921, death: 1999});\n     //=> {birth: 1921, death: 1999, age: 78} (returned from cache)"
        ],
        "name": "memoizeWith",
        "longname": "R.memoizeWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1908,
                1918
            ],
            "filename": "memoizeWith.js",
            "lineno": 55,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010705",
                "name": "cache",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "cache",
        "longname": "<anonymous>~cache",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1969,
                2004
            ],
            "filename": "memoizeWith.js",
            "lineno": 57,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010717",
                "name": "key",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2042,
                2080
            ],
            "filename": "memoizeWith.js",
            "lineno": 60,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010733",
                "name": "cache[undefined]",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~cache.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~cache",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2123,
                2151
            ],
            "filename": "memoizeWith.js",
            "lineno": 67,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010748",
                "name": "module.exports",
                "type": "Identifier",
                "value": "memoizeWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                72
            ],
            "filename": "mergeAll.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010756",
                "name": "_objectAssign",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_objectAssign",
        "longname": "_objectAssign",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79,
                135
            ],
            "filename": "mergeAll.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010762",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates one new object with the own properties from a list of objects.\n * If a key exists in more than one object, the value from the last\n * object it exists in will be used.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */",
        "meta": {
            "range": [
                745,
                861
            ],
            "filename": "mergeAll.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010768",
                "name": "mergeAll",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates one new object with the own properties from a list of objects.\nIf a key exists in more than one object, the value from the last\nobject it exists in will be used.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[{k: v}] -> {k: v}",
                "value": "[{k: v}] -> {k: v}"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }",
                "value": "R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of objects",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A merged object."
            }
        ],
        "see": [
            "R.reduce"
        ],
        "examples": [
            "R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n     R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}"
        ],
        "name": "mergeAll",
        "longname": "R.mergeAll",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                864,
                889
            ],
            "filename": "mergeAll.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010789",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeAll",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mergeDeepLeft.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010797",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                132
            ],
            "filename": "mergeDeepLeft.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010803",
                "name": "mergeDeepWithKey",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mergeDeepWithKey",
        "longname": "mergeDeepWithKey",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                      { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}\n */",
        "meta": {
            "range": [
                929,
                1094
            ],
            "filename": "mergeDeepLeft.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010809",
                "name": "mergeDeepLeft",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the first object will be used.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{a} -> {a} -> {a}",
                "value": "{a} -> {a} -> {a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "lObj"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "rObj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey"
        ],
        "examples": [
            "R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n                     { age: 40, contact: { email: 'baa@example.com' }});\n     //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}"
        ],
        "name": "mergeDeepLeft",
        "longname": "R.mergeDeepLeft",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1097,
                1127
            ],
            "filename": "mergeDeepLeft.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010831",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeDeepLeft",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mergeDeepRight.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010839",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                132
            ],
            "filename": "mergeDeepRight.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010845",
                "name": "mergeDeepWithKey",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mergeDeepWithKey",
        "longname": "mergeDeepWithKey",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                       { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n */",
        "meta": {
            "range": [
                931,
                1098
            ],
            "filename": "mergeDeepRight.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010851",
                "name": "mergeDeepRight",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects:\n- and both values are objects, the two values will be recursively merged\n- otherwise the value from the second object will be used.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{a} -> {a} -> {a}",
                "value": "{a} -> {a} -> {a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "lObj"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "rObj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey"
        ],
        "examples": [
            "R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n                      { age: 40, contact: { email: 'baa@example.com' }});\n     //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}"
        ],
        "name": "mergeDeepRight",
        "longname": "R.mergeDeepRight",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1101,
                1132
            ],
            "filename": "mergeDeepRight.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010873",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeDeepRight",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mergeDeepWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010881",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                132
            ],
            "filename": "mergeDeepWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010887",
                "name": "mergeDeepWithKey",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mergeDeepWithKey",
        "longname": "mergeDeepWithKey",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to associated values using the\n *   resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepWith(R.concat,\n *                      { a: true, c: { values: [10, 20] }},\n *                      { b: true, c: { values: [15, 35] }});\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n */",
        "meta": {
            "range": [
                1088,
                1267
            ],
            "filename": "mergeDeepWith.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010893",
                "name": "mergeDeepWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to associated values using the\n  resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> a) -> {a} -> {a} -> {a}",
                "value": "((a, a) -> a) -> {a} -> {a} -> {a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "lObj"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "rObj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.mergeWith, R.mergeDeepWithKey"
        ],
        "examples": [
            "R.mergeDeepWith(R.concat,\n                     { a: true, c: { values: [10, 20] }},\n                     { b: true, c: { values: [15, 35] }});\n     //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}"
        ],
        "name": "mergeDeepWith",
        "longname": "R.mergeDeepWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1270,
                1300
            ],
            "filename": "mergeDeepWith.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010919",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeDeepWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mergeDeepWithKey.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010927",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                127
            ],
            "filename": "mergeDeepWithKey.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010933",
                "name": "_isObject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isObject",
        "longname": "_isObject",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                134,
                191
            ],
            "filename": "mergeDeepWithKey.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010939",
                "name": "mergeWithKey",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mergeWithKey",
        "longname": "mergeWithKey",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */",
        "meta": {
            "range": [
                1297,
                1595
            ],
            "filename": "mergeDeepWithKey.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010945",
                "name": "mergeDeepWithKey",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object with the own properties of the two provided objects.\nIf a key exists in both objects:\n- and both associated values are also objects then the values will be\n  recursively merged.\n- otherwise the provided function is applied to the key and associated values\n  using the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((String, a, a) -> a) -> {a} -> {a} -> {a}",
                "value": "((String, a, a) -> a) -> {a} -> {a} -> {a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "lObj"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "rObj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.mergeWithKey, R.mergeDeepWith"
        ],
        "examples": [
            "let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n     R.mergeDeepWithKey(concatValues,\n                        { a: true, c: { thing: 'foo', values: [10, 20] }},\n                        { b: true, c: { thing: 'bar', values: [15, 35] }});\n     //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}"
        ],
        "name": "mergeDeepWithKey",
        "longname": "R.mergeDeepWithKey",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1598,
                1631
            ],
            "filename": "mergeDeepWithKey.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010988",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeDeepWithKey",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                72
            ],
            "filename": "mergeLeft.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100010996",
                "name": "_objectAssign",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_objectAssign",
        "longname": "_objectAssign",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79,
                135
            ],
            "filename": "mergeLeft.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011002",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const resetToDefault = R.mergeLeft({x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.mergeLeft(a, b) = {...b, ...a}\n */",
        "meta": {
            "range": [
                863,
                960
            ],
            "filename": "mergeLeft.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011008",
                "name": "mergeLeft",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the first object will be used.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{k: v} -> {k: v} -> {k: v}",
                "value": "{k: v} -> {k: v} -> {k: v}"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.mergeLeft(a, b) = {...b, ...a}",
                "value": "R.mergeLeft(a, b) = {...b, ...a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "l"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "r"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey"
        ],
        "examples": [
            "R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\n     //=> { 'name': 'fred', 'age': 40 }\n\n     const resetToDefault = R.mergeLeft({x: 0});\n     resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}"
        ],
        "name": "mergeLeft",
        "longname": "R.mergeLeft",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                963,
                989
            ],
            "filename": "mergeLeft.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011024",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeLeft",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                72
            ],
            "filename": "mergeRight.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011032",
                "name": "_objectAssign",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_objectAssign",
        "longname": "_objectAssign",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79,
                135
            ],
            "filename": "mergeRight.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011038",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeLeft, R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.mergeRight({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const withDefaults = R.mergeRight({x: 0, y: 0});\n *      withDefaults({y: 2}); //=> {x: 0, y: 2}\n * @symb R.mergeRight(a, b) = {...a, ...b}\n */",
        "meta": {
            "range": [
                863,
                962
            ],
            "filename": "mergeRight.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011044",
                "name": "mergeRight",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{k: v} -> {k: v} -> {k: v}",
                "value": "{k: v} -> {k: v} -> {k: v}"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.mergeRight(a, b) = {...a, ...b}",
                "value": "R.mergeRight(a, b) = {...a, ...b}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "l"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "r"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.mergeLeft, R.mergeDeepRight, R.mergeWith, R.mergeWithKey"
        ],
        "examples": [
            "R.mergeRight({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n     //=> { 'name': 'fred', 'age': 40 }\n\n     const withDefaults = R.mergeRight({x: 0, y: 0});\n     withDefaults({y: 2}); //=> {x: 0, y: 2}"
        ],
        "name": "mergeRight",
        "longname": "R.mergeRight",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                965,
                992
            ],
            "filename": "mergeRight.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011060",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeRight",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mergeWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011068",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                124
            ],
            "filename": "mergeWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011074",
                "name": "mergeWithKey",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mergeWithKey",
        "longname": "mergeWithKey",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */",
        "meta": {
            "range": [
                885,
                1032
            ],
            "filename": "mergeWith.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011080",
                "name": "mergeWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the values\nassociated with the key in each object, with the result being used as the\nvalue associated with the key in the returned object.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> a) -> {a} -> {a} -> {a}",
                "value": "((a, a) -> a) -> {a} -> {a} -> {a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "l"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "r"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.mergeDeepWith, R.merge, R.mergeWithKey"
        ],
        "examples": [
            "R.mergeWith(R.concat,\n                 { a: true, values: [10, 20] },\n                 { b: true, values: [15, 35] });\n     //=> { a: true, b: true, values: [10, 20, 15, 35] }"
        ],
        "name": "mergeWith",
        "longname": "R.mergeWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1035,
                1061
            ],
            "filename": "mergeWith.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011106",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "mergeWithKey.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011114",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "mergeWithKey.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011120",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */",
        "meta": {
            "range": [
                1121,
                1471
            ],
            "filename": "mergeWithKey.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011126",
                "name": "mergeWithKey",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object with the own properties of the two provided objects. If\na key exists in both objects, the provided function is applied to the key\nand the values associated with the key in each object, with the result being\nused as the value associated with the key in the returned object.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((String, a, a) -> a) -> {a} -> {a} -> {a}",
                "value": "((String, a, a) -> a) -> {a} -> {a} -> {a}"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }",
                "value": "R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "l"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "r"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.mergeDeepWithKey, R.merge, R.mergeWith"
        ],
        "examples": [
            "let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n     R.mergeWithKey(concatValues,\n                    { a: true, thing: 'foo', values: [10, 20] },\n                    { b: true, thing: 'bar', values: [15, 35] });\n     //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }"
        ],
        "name": "mergeWithKey",
        "longname": "R.mergeWithKey",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1198,
                1209
            ],
            "filename": "mergeWithKey.js",
            "lineno": 38,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011137",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1217,
                1218
            ],
            "filename": "mergeWithKey.js",
            "lineno": 39,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011141",
                "name": "k"
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "<anonymous>~k",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1222,
                1233
            ],
            "filename": "mergeWithKey.js",
            "lineno": 40,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011144",
                "name": "l",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "<anonymous>~l",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1237,
                1248
            ],
            "filename": "mergeWithKey.js",
            "lineno": 41,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011150",
                "name": "r",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "r",
        "longname": "<anonymous>~r",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1296,
                1345
            ],
            "filename": "mergeWithKey.js",
            "lineno": 45,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011166",
                "name": "result[undefined]",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1423,
                1439
            ],
            "filename": "mergeWithKey.js",
            "lineno": 51,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011204",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "r[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1474,
                1503
            ],
            "filename": "mergeWithKey.js",
            "lineno": 58,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011214",
                "name": "module.exports",
                "type": "Identifier",
                "value": "mergeWithKey",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "min.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011222",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                116
            ],
            "filename": "min.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011228",
                "name": "toString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "toString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the smaller of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.minBy, R.max\n * @example\n *\n *      R.min(789, 123); //=> 123\n *      R.min('a', 'b'); //=> 'a'\n */",
        "meta": {
            "range": [
                425,
                1046
            ],
            "filename": "min.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011234",
                "name": "min",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the smaller of its two arguments.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord a => a -> a -> a",
                "value": "Ord a => a -> a -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.minBy, R.max"
        ],
        "examples": [
            "R.min(789, 123); //=> 123\n     R.min('a', 'b'); //=> 'a'"
        ],
        "name": "min",
        "longname": "R.min",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                512,
                624
            ],
            "filename": "min.js",
            "lineno": 34,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011250",
                "name": "safeMin",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "x",
                    "y"
                ]
            }
        },
        "undocumented": true,
        "name": "safeMin",
        "longname": "<anonymous>~safeMin",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                632,
                658
            ],
            "filename": "min.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011274",
                "name": "minByValue",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "minByValue",
        "longname": "<anonymous>~minByValue",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                729,
                768
            ],
            "filename": "min.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011288",
                "name": "minByType",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "minByType",
        "longname": "<anonymous>~minByType",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                858,
                879
            ],
            "filename": "min.js",
            "lineno": 54,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011310",
                "name": "stringA",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "stringA",
        "longname": "<anonymous>~stringA",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                887,
                935
            ],
            "filename": "min.js",
            "lineno": 55,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011316",
                "name": "minByStringValue",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "minByStringValue",
        "longname": "<anonymous>~minByStringValue",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1049,
                1069
            ],
            "filename": "min.js",
            "lineno": 64,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011339",
                "name": "module.exports",
                "type": "Identifier",
                "value": "min",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "minBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011347",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                106
            ],
            "filename": "minBy.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011353",
                "name": "min",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "min",
        "longname": "min",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */",
        "meta": {
            "range": [
                723,
                852
            ],
            "filename": "minBy.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011359",
                "name": "minBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function and two values, and returns whichever value produces the\nsmaller result when passed to the provided function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord b => (a -> b) -> a -> a -> a",
                "value": "Ord b => (a -> b) -> a -> a -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.min, R.maxBy"
        ],
        "examples": [
            "//  square :: Number -> Number\n     const square = n => n * n;\n\n     R.minBy(square, -3, 2); //=> 2\n\n     R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n     R.reduce(R.minBy(square), Infinity, []); //=> Infinity"
        ],
        "name": "minBy",
        "longname": "R.minBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                785,
                799
            ],
            "filename": "minBy.js",
            "lineno": 37,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011370",
                "name": "resultB",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resultB",
        "longname": "<anonymous>~resultB",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                855,
                877
            ],
            "filename": "minBy.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011388",
                "name": "module.exports",
                "type": "Identifier",
                "value": "minBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "modify.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011396",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                120
            ],
            "filename": "modify.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011402",
                "name": "modifyPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "modifyPath",
        "longname": "modifyPath",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a copy of the passed object by applying an `fn` function to the given `prop` property.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding property does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig Idx -> (v -> v) -> {k: v} -> {k: v}\n * @param {String|Number} prop The property to be modified.\n * @param {Function} fn The function to apply to the property.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', age: 20, pets: ['dog', 'cat']};\n *      R.modify('age', R.add(1), person); //=> {name: 'James', age: 21, pets: ['dog', 'cat']}\n *      R.modify('pets', R.append('turtle'), person); //=> {name: 'James', age: 20, pets: ['dog', 'cat', 'turtle']}\n */",
        "meta": {
            "range": [
                1072,
                1182
            ],
            "filename": "modify.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011408",
                "name": "modify",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a copy of the passed object by applying an `fn` function to the given `prop` property.\n\nThe function will not be invoked, and the object will not change\nif its corresponding property does not exist in the object.\nAll non-primitive properties are copied to the new object by reference.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Idx -> (v -> v) -> {k: v} -> {k: v}",
                "value": "Idx -> (v -> v) -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Number"
                    ]
                },
                "description": "The property to be modified.",
                "name": "prop"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to apply to the property.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to be transformed.",
                "name": "object"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The transformed object."
            }
        ],
        "examples": [
            "const person = {name: 'James', age: 20, pets: ['dog', 'cat']};\n     R.modify('age', R.add(1), person); //=> {name: 'James', age: 21, pets: ['dog', 'cat']}\n     R.modify('pets', R.append('turtle'), person); //=> {name: 'James', age: 20, pets: ['dog', 'cat', 'turtle']}"
        ],
        "name": "modify",
        "longname": "R.modify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1185,
                1208
            ],
            "filename": "modify.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011426",
                "name": "module.exports",
                "type": "Identifier",
                "value": "modify",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "modifyPath.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011434",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "modifyPath.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011440",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                192
            ],
            "filename": "modifyPath.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011446",
                "name": "_isObject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isObject",
        "longname": "_isObject",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                199,
                249
            ],
            "filename": "modifyPath.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011452",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                256,
                310
            ],
            "filename": "modifyPath.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011458",
                "name": "_assoc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_assoc",
        "longname": "_assoc",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                317,
                373
            ],
            "filename": "modifyPath.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011464",
                "name": "_modify",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_modify",
        "longname": "_modify",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a shallow clone of the passed object by applying an `fn` function\n * to the value at the given path.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding path does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig [Idx] -> (v -> v) -> {k: v} -> {k: v}\n * @param {Array} path The path to be modified.\n * @param {Function} fn The function to apply to the path.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', address: { zipCode: '90216' }};\n *      R.modifyPath(['address', 'zipCode'], R.reverse, person); //=> {name: 'James', address: { zipCode: '61209' }}\n *\n *      // Can handle arrays too\n *      const person = {name: 'James', addresses: [{ zipCode: '90216' }]};\n *      R.modifyPath(['addresses', 0, 'zipCode'], R.reverse, person); //=> {name: 'James', addresses: [{ zipCode: '61209' }]}\n */",
        "meta": {
            "range": [
                1464,
                1979
            ],
            "filename": "modifyPath.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011470",
                "name": "modifyPath",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a shallow clone of the passed object by applying an `fn` function\nto the value at the given path.\n\nThe function will not be invoked, and the object will not change\nif its corresponding path does not exist in the object.\nAll non-primitive properties are copied to the new object by reference.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Idx] -> (v -> v) -> {k: v} -> {k: v}",
                "value": "[Idx] -> (v -> v) -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The path to be modified.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to apply to the path.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to be transformed.",
                "name": "object"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The transformed object."
            }
        ],
        "examples": [
            "const person = {name: 'James', address: { zipCode: '90216' }};\n     R.modifyPath(['address', 'zipCode'], R.reverse, person); //=> {name: 'James', address: { zipCode: '61209' }}\n\n     // Can handle arrays too\n     const person = {name: 'James', addresses: [{ zipCode: '90216' }]};\n     R.modifyPath(['addresses', 0, 'zipCode'], R.reverse, person); //=> {name: 'James', addresses: [{ zipCode: '61209' }]}"
        ],
        "name": "modifyPath",
        "longname": "R.modifyPath",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1673,
                1686
            ],
            "filename": "modifyPath.js",
            "lineno": 63,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011505",
                "name": "idx",
                "type": "MemberExpression",
                "value": "path[0]"
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1816,
                1886
            ],
            "filename": "modifyPath.js",
            "lineno": 73,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011533",
                "name": "val",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1982,
                2009
            ],
            "filename": "modifyPath.js",
            "lineno": 82,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011567",
                "name": "module.exports",
                "type": "Identifier",
                "value": "modifyPath",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "modulo.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011575",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      const isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */",
        "meta": {
            "range": [
                759,
                832
            ],
            "filename": "modulo.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011581",
                "name": "modulo",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Divides the first parameter by the second and returns the remainder. Note\nthat this function preserves the JavaScript-style behavior for modulo. For\nmathematical modulo see [`mathMod`](#mathMod).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> Number",
                "value": "Number -> Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The value to the divide.",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The pseudo-modulus",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The result of `b % a`."
            }
        ],
        "see": [
            "R.mathMod"
        ],
        "examples": [
            "R.modulo(17, 3); //=> 2\n     // JS behavior:\n     R.modulo(-17, 3); //=> -2\n     R.modulo(17, -3); //=> 2\n\n     const isOdd = R.modulo(R.__, 2);\n     isOdd(42); //=> 0\n     isOdd(21); //=> 1"
        ],
        "name": "modulo",
        "longname": "R.modulo",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                835,
                858
            ],
            "filename": "modulo.js",
            "lineno": 37,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011595",
                "name": "module.exports",
                "type": "Identifier",
                "value": "modulo",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "move.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011603",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Move an item, at index `from`, to index `to`, in a list of elements.\n * A new list will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} from The source index\n * @param {Number} to The destination index\n * @param {Array} list The list which will serve to realise the move\n * @return {Array} The new list reordered\n * @example\n *\n *      R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']\n *      R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation\n */",
        "meta": {
            "range": [
                721,
                1194
            ],
            "filename": "move.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011609",
                "name": "move",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Move an item, at index `from`, to index `to`, in a list of elements.\nA new list will be created containing the new elements order.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.27.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> [a] -> [a]",
                "value": "Number -> Number -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The source index",
                "name": "from"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The destination index",
                "name": "to"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list which will serve to realise the move",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The new list reordered"
            }
        ],
        "examples": [
            "R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']\n     R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation"
        ],
        "name": "move",
        "longname": "R.move",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                784,
                804
            ],
            "filename": "move.js",
            "lineno": 27,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011619",
                "name": "length",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "<anonymous>~length",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                812,
                833
            ],
            "filename": "move.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011625",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                841,
                887
            ],
            "filename": "move.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011632",
                "name": "positiveFrom",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "positiveFrom",
        "longname": "<anonymous>~positiveFrom",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                895,
                933
            ],
            "filename": "move.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011643",
                "name": "positiveTo",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "positiveTo",
        "longname": "<anonymous>~positiveTo",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                941,
                978
            ],
            "filename": "move.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011654",
                "name": "item",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1197,
                1218
            ],
            "filename": "move.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011710",
                "name": "module.exports",
                "type": "Identifier",
                "value": "move",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "multiply.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011718",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      const double = R.multiply(2);\n *      const triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */",
        "meta": {
            "range": [
                564,
                641
            ],
            "filename": "multiply.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011724",
                "name": "multiply",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Multiplies two numbers. Equivalent to `a * b` but curried.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> Number",
                "value": "Number -> Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The first value.",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The second value.",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The result of `a * b`."
            }
        ],
        "see": [
            "R.divide"
        ],
        "examples": [
            "const double = R.multiply(2);\n     const triple = R.multiply(3);\n     double(3);       //=>  6\n     triple(4);       //=> 12\n     R.multiply(2, 5);  //=> 10"
        ],
        "name": "multiply",
        "longname": "R.multiply",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                644,
                669
            ],
            "filename": "multiply.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011738",
                "name": "module.exports",
                "type": "Identifier",
                "value": "multiply",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "nAry.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011746",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      const takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */",
        "meta": {
            "range": [
                1059,
                2535
            ],
            "filename": "nAry.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100011752",
                "name": "nAry",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Wraps a function of any arity (including nullary) in a function that accepts\nexactly `n` parameters. Any extraneous parameters will not be passed to the\nsupplied function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> (* -> a) -> (* -> a)",
                "value": "Number -> (* -> a) -> (* -> a)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nAry(0, f)(a, b) = f()",
                "value": "R.nAry(0, f)(a, b) = f()"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nAry(1, f)(a, b) = f(a)",
                "value": "R.nAry(1, f)(a, b) = f(a)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nAry(2, f)(a, b) = f(a, b)",
                "value": "R.nAry(2, f)(a, b) = f(a, b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The desired arity of the new function.",
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to wrap.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new function wrapping `fn`. The new function is guaranteed to be of\n        arity `n`."
            }
        ],
        "see": [
            "R.binary, R.unary"
        ],
        "examples": [
            "const takesTwoArgs = (a, b) => [a, b];\n\n     takesTwoArgs.length; //=> 2\n     takesTwoArgs(1, 2); //=> [1, 2]\n\n     const takesOneArg = R.nAry(1, takesTwoArgs);\n     takesOneArg.length; //=> 1\n     // Only `n` arguments are passed to the wrapped function\n     takesOneArg(1, 2); //=> [1, undefined]"
        ],
        "name": "nAry",
        "longname": "R.nAry",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2538,
                2559
            ],
            "filename": "nAry.js",
            "lineno": 100,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012000",
                "name": "module.exports",
                "type": "Identifier",
                "value": "nAry",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "negate.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012008",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Negates its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      R.negate(42); //=> -42\n */",
        "meta": {
            "range": [
                275,
                342
            ],
            "filename": "negate.js",
            "lineno": 20,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012014",
                "name": "negate",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Negates its argument.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number",
                "value": "Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "n"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "R.negate(42); //=> -42"
        ],
        "name": "negate",
        "longname": "R.negate",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                345,
                368
            ],
            "filename": "negate.js",
            "lineno": 26,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012026",
                "name": "module.exports",
                "type": "Identifier",
                "value": "negate",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                68
            ],
            "filename": "none.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012034",
                "name": "_complement",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_complement",
        "longname": "_complement",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75,
                131
            ],
            "filename": "none.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012040",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                138,
                177
            ],
            "filename": "none.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012046",
                "name": "all",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "all",
        "longname": "all",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *      const isOdd = n => n % 2 !== 0;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false\n */",
        "meta": {
            "range": [
                952,
                1048
            ],
            "filename": "none.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012052",
                "name": "none",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if no elements of the list match the predicate, `false`\notherwise.\n\nDispatches to the `all` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.12.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> Boolean",
                "value": "(a -> Boolean) -> [a] -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate function.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "`true` if the predicate is not satisfied by every element, `false` otherwise."
            }
        ],
        "see": [
            "R.all, R.any"
        ],
        "examples": [
            "const isEven = n => n % 2 === 0;\n     const isOdd = n => n % 2 !== 0;\n\n     R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n     R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false"
        ],
        "name": "none",
        "longname": "R.none",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1051,
                1072
            ],
            "filename": "none.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012069",
                "name": "module.exports",
                "type": "Identifier",
                "value": "none",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "not.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012077",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */",
        "meta": {
            "range": [
                547,
                608
            ],
            "filename": "not.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012083",
                "name": "not",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "A function that returns the `!` of its argument. It will return `true` when\npassed false-y value, and `false` when passed a truth-y one.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "* -> Boolean",
                "value": "* -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "any value",
                "name": "a"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "the logical inverse of passed argument."
            }
        ],
        "see": [
            "R.complement"
        ],
        "examples": [
            "R.not(true); //=> false\n     R.not(false); //=> true\n     R.not(0); //=> true\n     R.not(1); //=> false"
        ],
        "name": "not",
        "longname": "R.not",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                611,
                631
            ],
            "filename": "not.js",
            "lineno": 31,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012095",
                "name": "module.exports",
                "type": "Identifier",
                "value": "not",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "nth.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012103",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                127
            ],
            "filename": "nth.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012109",
                "name": "_isString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isString",
        "longname": "_isString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      const list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */",
        "meta": {
            "range": [
                810,
                982
            ],
            "filename": "nth.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012115",
                "name": "nth",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the nth element of the given list or string. If n is negative the\nelement at index length + n is returned.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> a | Undefined",
                "value": "Number -> [a] -> a | Undefined"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> String -> String",
                "value": "Number -> String -> String"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nth(-1, [a, b, c]) = c",
                "value": "R.nth(-1, [a, b, c]) = c"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nth(0, [a, b, c]) = a",
                "value": "R.nth(0, [a, b, c]) = a"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nth(1, [a, b, c]) = b",
                "value": "R.nth(1, [a, b, c]) = b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "offset"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "examples": [
            "const list = ['foo', 'bar', 'baz', 'quux'];\n     R.nth(1, list); //=> 'bar'\n     R.nth(-1, list); //=> 'quux'\n     R.nth(-99, list); //=> undefined\n\n     R.nth(2, 'abc'); //=> 'c'\n     R.nth(3, 'abc'); //=> ''"
        ],
        "name": "nth",
        "longname": "R.nth",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                873,
                921
            ],
            "filename": "nth.js",
            "lineno": 39,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012125",
                "name": "idx",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                985,
                1005
            ],
            "filename": "nth.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012151",
                "name": "module.exports",
                "type": "Identifier",
                "value": "nth",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "nthArg.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012159",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "nthArg.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012165",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                158
            ],
            "filename": "nthArg.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012171",
                "name": "nth",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nth",
        "longname": "nth",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */",
        "meta": {
            "range": [
                574,
                734
            ],
            "filename": "nthArg.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012177",
                "name": "nthArg",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a function which returns its nth argument.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> *... -> *",
                "value": "Number -> *... -> *"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nthArg(-1)(a, b, c) = c",
                "value": "R.nthArg(-1)(a, b, c) = c"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nthArg(0)(a, b, c) = a",
                "value": "R.nthArg(0)(a, b, c) = a"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.nthArg(1)(a, b, c) = b",
                "value": "R.nthArg(1)(a, b, c) = b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "n"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "examples": [
            "R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n     R.nthArg(-1)('a', 'b', 'c'); //=> 'c'"
        ],
        "name": "nthArg",
        "longname": "R.nthArg",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                632,
                657
            ],
            "filename": "nthArg.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012186",
                "name": "arity",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "arity",
        "longname": "<anonymous>~arity",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                737,
                760
            ],
            "filename": "nthArg.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012208",
                "name": "module.exports",
                "type": "Identifier",
                "value": "nthArg",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "o.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012216",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * `o` is a curried composition function that returns a unary function.\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\n * invoked with only one argument. Also, unlike [`compose`](#compose), `o` is\n * limited to accepting only 2 unary functions. The name o was chosen because\n * of its similarity to the mathematical composition operator ∘.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (b -> c) -> (a -> b) -> a -> c\n * @param {Function} f\n * @param {Function} g\n * @return {Function}\n * @see R.compose, R.pipe\n * @example\n *\n *      const classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\n *      const yellGreeting = R.o(R.toUpper, classyGreeting);\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\n *\n * @symb R.o(f, g, x) = f(g(x))\n */",
        "meta": {
            "range": [
                1084,
                1152
            ],
            "filename": "o.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012222",
                "name": "o",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "`o` is a curried composition function that returns a unary function.\nLike [`compose`](#compose), `o` performs right-to-left function composition.\nUnlike [`compose`](#compose), the rightmost function passed to `o` will be\ninvoked with only one argument. Also, unlike [`compose`](#compose), `o` is\nlimited to accepting only 2 unary functions. The name o was chosen because\nof its similarity to the mathematical composition operator ∘.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(b -> c) -> (a -> b) -> a -> c",
                "value": "(b -> c) -> (a -> b) -> a -> c"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.o(f, g, x) = f(g(x))",
                "value": "R.o(f, g, x) = f(g(x))"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "g"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.compose, R.pipe"
        ],
        "examples": [
            "const classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\n     const yellGreeting = R.o(R.toUpper, classyGreeting);\n     yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n\n     R.o(R.multiply(10), R.add(10))(-4) //=> 60"
        ],
        "name": "o",
        "longname": "R.o",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1155,
                1173
            ],
            "filename": "o.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012239",
                "name": "module.exports",
                "type": "Identifier",
                "value": "o",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "objOf.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012247",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      const matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */",
        "meta": {
            "range": [
                570,
                677
            ],
            "filename": "objOf.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012253",
                "name": "objOf",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates an object containing a single key:value pair.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.18.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> a -> {String:a}",
                "value": "String -> a -> {String:a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "see": [
            "R.pair"
        ],
        "examples": [
            "const matchPhrases = R.compose(\n       R.objOf('must'),\n       R.map(R.objOf('match_phrase'))\n     );\n     matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}"
        ],
        "name": "objOf",
        "longname": "R.objOf",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                633,
                641
            ],
            "filename": "objOf.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012263",
                "name": "obj",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                645,
                659
            ],
            "filename": "objOf.js",
            "lineno": 30,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012267",
                "name": "obj[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~obj.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~obj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                680,
                702
            ],
            "filename": "objOf.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012275",
                "name": "module.exports",
                "type": "Identifier",
                "value": "objOf",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "of.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012283",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Given a constructor and a value, returns a new instance of that constructor\n * containing the value.\n *\n * Dispatches to the `fantasy-land/of` method of the constructor first (if present)\n * or to the `of` method last (if present). When neither are present, wraps the\n * value in an array.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig (* -> {*}) -> a -> {a}\n * @param {Object} Ctor A constructor\n * @param {*} val any value\n * @return {*} An instance of the `Ctor` wrapping `val`.\n * @example\n *\n *      R.of(Array, 42);   //=> [42]\n *      R.of(Array, [42]); //=> [[42]]\n *      R.of(Maybe, 42);   //=> Maybe.Just(42)\n */",
        "meta": {
            "range": [
                877,
                1073
            ],
            "filename": "of.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012289",
                "name": "of",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Given a constructor and a value, returns a new instance of that constructor\ncontaining the value.\n\nDispatches to the `fantasy-land/of` method of the constructor first (if present)\nor to the `of` method last (if present). When neither are present, wraps the\nvalue in an array.\n\nNote this `of` is different from the ES6 `of`; See\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(* -> {*}) -> a -> {a}",
                "value": "(* -> {*}) -> a -> {a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A constructor",
                "name": "Ctor"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "any value",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "An instance of the `Ctor` wrapping `val`."
            }
        ],
        "examples": [
            "R.of(Array, 42);   //=> [42]\n     R.of(Array, [42]); //=> [[42]]\n     R.of(Maybe, 42);   //=> Maybe.Just(42)"
        ],
        "name": "of",
        "longname": "R.of",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1076,
                1095
            ],
            "filename": "of.js",
            "lineno": 37,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012326",
                "name": "module.exports",
                "type": "Identifier",
                "value": "of",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "omit.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012334",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */",
        "meta": {
            "range": [
                563,
                894
            ],
            "filename": "omit.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012340",
                "name": "omit",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a partial copy of an object omitting the keys specified.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[String] -> {String: *} -> {String: *}",
                "value": "[String] -> {String: *} -> {String: *}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "an array of String property names to omit from the new object",
                "name": "names"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to copy from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A new object with properties from `names` not on it."
            }
        ],
        "see": [
            "R.pick"
        ],
        "examples": [
            "R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}"
        ],
        "name": "omit",
        "longname": "R.omit",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                626,
                637
            ],
            "filename": "omit.js",
            "lineno": 25,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012350",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                645,
                655
            ],
            "filename": "omit.js",
            "lineno": 26,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012354",
                "name": "index",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "index",
        "longname": "<anonymous>~index",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                663,
                670
            ],
            "filename": "omit.js",
            "lineno": 27,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012358",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                678,
                696
            ],
            "filename": "omit.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012362",
                "name": "len",
                "type": "MemberExpression",
                "value": "names.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                725,
                746
            ],
            "filename": "omit.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012373",
                "name": "index[undefined]",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~index.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~index",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                752,
                760
            ],
            "filename": "omit.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012381",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                778,
                782
            ],
            "filename": "omit.js",
            "lineno": 35,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012386",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                838,
                862
            ],
            "filename": "omit.js",
            "lineno": 37,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012399",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "obj[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                897,
                918
            ],
            "filename": "omit.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012409",
                "name": "module.exports",
                "type": "Identifier",
                "value": "omit",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                59
            ],
            "filename": "on.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012417",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a binary function `f`, a unary function `g`, and two values.\n * Applies `g` to each value, then applies the result of each to `f`.\n *\n * Also known as the P combinator.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig ((a, a) -> b) -> (c -> a) -> c -> c -> b\n * @param {Function} f a binary function\n * @param {Function} g a unary function\n * @param {any} a any value\n * @param {any} b any value\n * @return {any} The result of `f`\n * @example\n *\n *      const eqBy = R.on((a, b) => a === b);\n *      eqBy(R.prop('a'), {b:0, a:1}, {a:1}) //=> true;\n *\n *      const containsInsensitive = R.on(R.includes, R.toLower);\n *      containsInsensitive('o', 'FOO'); //=> true\n * @symb R.on(f, g, a, b) = f(g(a), g(b))\n */",
        "meta": {
            "range": [
                819,
                904
            ],
            "filename": "on.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012423",
                "name": "on",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a binary function `f`, a unary function `g`, and two values.\nApplies `g` to each value, then applies the result of each to `f`.\n\nAlso known as the P combinator.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> b) -> (c -> a) -> c -> c -> b",
                "value": "((a, a) -> b) -> (c -> a) -> c -> c -> b"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.on(f, g, a, b) = f(g(a), g(b))",
                "value": "R.on(f, g, a, b) = f(g(a), g(b))"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "a binary function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "a unary function",
                "name": "g"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "any value",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "any value",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The result of `f`"
            }
        ],
        "examples": [
            "const eqBy = R.on((a, b) => a === b);\n     eqBy(R.prop('a'), {b:0, a:1}, {a:1}) //=> true;\n\n     const containsInsensitive = R.on(R.includes, R.toLower);\n     containsInsensitive('o', 'FOO'); //=> true"
        ],
        "name": "on",
        "longname": "R.on",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                906,
                925
            ],
            "filename": "on.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012446",
                "name": "module.exports",
                "type": "Identifier",
                "value": "on",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "once.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012454",
                "name": "_arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arity",
        "longname": "_arity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "once.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012460",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      const addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */",
        "meta": {
            "range": [
                754,
                1012
            ],
            "filename": "once.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012466",
                "name": "once",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Accepts a function `fn` and returns a function that guards invocation of\n`fn` such that `fn` can only ever be called once, no matter how many times\nthe returned function is invoked. The first value calculated is returned in\nsubsequent invocations.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a... -> b) -> (a... -> b)",
                "value": "(a... -> b) -> (a... -> b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to wrap in a call-only-once wrapper.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The wrapped function."
            }
        ],
        "examples": [
            "const addOneOnce = R.once(x => x + 1);\n     addOneOnce(10); //=> 11\n     addOneOnce(addOneOnce(50)); //=> 11"
        ],
        "name": "once",
        "longname": "R.once",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                809,
                823
            ],
            "filename": "once.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012475",
                "name": "called",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "called",
        "longname": "<anonymous>~called",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                831,
                837
            ],
            "filename": "once.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012479",
                "name": "result"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                930,
                943
            ],
            "filename": "once.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012495",
                "name": "called",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "called",
        "longname": "<anonymous>~called",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                949,
                983
            ],
            "filename": "once.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012499",
                "name": "result",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1015,
                1036
            ],
            "filename": "once.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012510",
                "name": "module.exports",
                "type": "Identifier",
                "value": "once",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "or.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012518",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the first argument if it is truthy, otherwise the second argument.\n * Acts as the boolean `or` statement if both inputs are `Boolean`s.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any}\n * @see R.either, R.and\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */",
        "meta": {
            "range": [
                551,
                617
            ],
            "filename": "or.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012524",
                "name": "or",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the first argument if it is truthy, otherwise the second argument.\nActs as the boolean `or` statement if both inputs are `Boolean`s.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> b -> a | b",
                "value": "a -> b -> a | b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                }
            }
        ],
        "see": [
            "R.either, R.and"
        ],
        "examples": [
            "R.or(true, true); //=> true\n     R.or(true, false); //=> true\n     R.or(false, true); //=> true\n     R.or(false, false); //=> false"
        ],
        "name": "or",
        "longname": "R.or",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                620,
                639
            ],
            "filename": "or.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012538",
                "name": "module.exports",
                "type": "Identifier",
                "value": "or",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "otherwise.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012546",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                137
            ],
            "filename": "otherwise.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012552",
                "name": "_assertPromise",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_assertPromise",
        "longname": "_assertPromise",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the result of applying the onFailure function to the value inside\n * a failed promise. This is useful for handling rejected promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(null, onFailure)`\n * @see R.andThen\n * @example\n *\n *      const failedFetch = id => Promise.reject('bad ID');\n *      const useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' });\n *\n *      //recoverFromFailure :: String -> Promise ({ firstName, lastName })\n *      const recoverFromFailure = R.pipe(\n *        failedFetch,\n *        R.otherwise(useDefault),\n *        R.andThen(R.pick(['firstName', 'lastName'])),\n *      );\n *      recoverFromFailure(12345).then(console.log);\n */",
        "meta": {
            "range": [
                1170,
                1294
            ],
            "filename": "otherwise.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012558",
                "name": "otherwise",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the result of applying the onFailure function to the value inside\na failed promise. This is useful for handling rejected promises\ninside function compositions.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(e -> b) -> (Promise e a) -> (Promise e b)",
                "value": "(e -> b) -> (Promise e a) -> (Promise e b)"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(e -> (Promise f b)) -> (Promise e a) -> (Promise f b)",
                "value": "(e -> (Promise f b)) -> (Promise e a) -> (Promise f b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to apply. Can return a value or a promise of a value.",
                "name": "onFailure"
            },
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "name": "p"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "The result of calling `p.then(null, onFailure)`"
            }
        ],
        "see": [
            "R.andThen"
        ],
        "examples": [
            "const failedFetch = id => Promise.reject('bad ID');\n     const useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' });\n\n     //recoverFromFailure :: String -> Promise ({ firstName, lastName })\n     const recoverFromFailure = R.pipe(\n       failedFetch,\n       R.otherwise(useDefault),\n       R.andThen(R.pick(['firstName', 'lastName'])),\n     );\n     recoverFromFailure(12345).then(console.log);"
        ],
        "name": "otherwise",
        "longname": "R.otherwise",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1297,
                1323
            ],
            "filename": "otherwise.js",
            "lineno": 46,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012580",
                "name": "module.exports",
                "type": "Identifier",
                "value": "otherwise",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "over.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012588",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                198,
                314
            ],
            "filename": "over.js",
            "lineno": 7,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012594",
                "name": "Identity",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Identity",
        "longname": "Identity",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                239,
                247
            ],
            "filename": "over.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012601",
                "name": "value",
                "type": "Identifier",
                "value": "x"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                253,
                307
            ],
            "filename": "over.js",
            "lineno": 10,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012603",
                "name": "map",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.view, R.set, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */",
        "meta": {
            "range": [
                950,
                1271
            ],
            "filename": "over.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012614",
                "name": "over",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the result of \"setting\" the portion of the given data structure\nfocused by the given lens to the result of applying the given function to\nthe focused value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Lens s a = Functor f => (a -> f a) -> s -> f s",
                "value": "Lens s a = Functor f => (a -> f a) -> s -> f s"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Lens s a -> (a -> a) -> s -> s",
                "value": "Lens s a -> (a -> a) -> s -> s"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Lens"
                    ]
                },
                "name": "lens"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "v"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.view, R.set, R.lens, R.lensIndex, R.lensProp, R.lensPath"
        ],
        "examples": [
            "const headLens = R.lensIndex(0);\n\n     R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']"
        ],
        "name": "over",
        "longname": "R.over",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1274,
                1295
            ],
            "filename": "over.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012641",
                "name": "module.exports",
                "type": "Identifier",
                "value": "over",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "pair.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012649",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category List\n * @sig a -> b -> (a,b)\n * @param {*} fst\n * @param {*} snd\n * @return {Array}\n * @see R.objOf, R.of\n * @example\n *\n *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n */",
        "meta": {
            "range": [
                372,
                450
            ],
            "filename": "pair.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012655",
                "name": "pair",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.18.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> b -> (a,b)",
                "value": "a -> b -> (a,b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "fst"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "snd"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "see": [
            "R.objOf, R.of"
        ],
        "examples": [
            "R.pair('foo', 'bar'); //=> ['foo', 'bar']"
        ],
        "name": "pair",
        "longname": "R.pair",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                453,
                474
            ],
            "filename": "pair.js",
            "lineno": 28,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012669",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pair",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "partial.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012677",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                157
            ],
            "filename": "partial.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012683",
                "name": "_createPartialApplicator",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_createPartialApplicator",
        "longname": "_createPartialApplicator",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight, R.curry\n * @example\n *\n *      const multiply2 = (a, b) => a * b;\n *      const double = R.partial(multiply2, [2]);\n *      double(3); //=> 6\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const sayHello = R.partial(greet, ['Hello']);\n *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */",
        "meta": {
            "range": [
                1152,
                1209
            ],
            "filename": "partial.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012689",
                "name": "partial",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function `f` and a list of arguments, and returns a function `g`.\nWhen applied, `g` returns the result of applying `f` to the arguments\nprovided initially followed by the arguments provided to `g`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)",
                "value": "((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.partial(f, [a, b])(c, d) = f(a, b, c, d)",
                "value": "R.partial(f, [a, b])(c, d) = f(a, b, c, d)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.partialRight, R.curry"
        ],
        "examples": [
            "const multiply2 = (a, b) => a * b;\n     const double = R.partial(multiply2, [2]);\n     double(3); //=> 6\n\n     const greet = (salutation, title, firstName, lastName) =>\n       salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n\n     const sayHello = R.partial(greet, ['Hello']);\n     const sayHelloToMs = R.partial(sayHello, ['Ms.']);\n     sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'"
        ],
        "name": "partial",
        "longname": "R.partial",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1212,
                1236
            ],
            "filename": "partial.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012695",
                "name": "module.exports",
                "type": "Identifier",
                "value": "partial",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                65
            ],
            "filename": "partialObject.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012703",
                "name": "mergeDeepRight",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mergeDeepRight",
        "longname": "mergeDeepRight",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72,
                128
            ],
            "filename": "partialObject.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012709",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function `f` and an object, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the object\n * provided initially merged deeply (right) with the object provided as an argument to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig (({ a, b, c, ..., n }) -> x) -> { a, b, c, ...} -> ({ d, e, f, ..., n } -> x)\n * @param {Function} f\n * @param {Object} props\n * @return {Function}\n * @see R.partial, R.partialRight, R.curry, R.mergeDeepRight\n * @example\n *\n *      const multiply2 = ({ a, b }) => a * b;\n *      const double = R.partialObject(multiply2, { a: 2 });\n *      double({ b: 2 }); //=> 4\n *\n *      const greet = ({ salutation, title, firstName, lastName }) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const sayHello = R.partialObject(greet, { salutation: 'Hello' });\n *      const sayHelloToMs = R.partialObject(sayHello, { title: 'Ms.' });\n *      sayHelloToMs({ firstName: 'Jane', lastName: 'Jones' }); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialObject(f, { a, b })({ c, d }) = f({ a, b, c, d })\n */",
        "meta": {
            "range": [
                1277,
                1373
            ],
            "filename": "partialObject.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012715",
                "name": "partialObject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function `f` and an object, and returns a function `g`.\nWhen applied, `g` returns the result of applying `f` to the object\nprovided initially merged deeply (right) with the object provided as an argument to `g`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(({ a, b, c, ..., n }) -> x) -> { a, b, c, ...} -> ({ d, e, f, ..., n } -> x)",
                "value": "(({ a, b, c, ..., n }) -> x) -> { a, b, c, ...} -> ({ d, e, f, ..., n } -> x)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.partialObject(f, { a, b })({ c, d }) = f({ a, b, c, d })",
                "value": "R.partialObject(f, { a, b })({ c, d }) = f({ a, b, c, d })"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.partial, R.partialRight, R.curry, R.mergeDeepRight"
        ],
        "examples": [
            "const multiply2 = ({ a, b }) => a * b;\n     const double = R.partialObject(multiply2, { a: 2 });\n     double({ b: 2 }); //=> 4\n\n     const greet = ({ salutation, title, firstName, lastName }) =>\n       salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n\n     const sayHello = R.partialObject(greet, { salutation: 'Hello' });\n     const sayHelloToMs = R.partialObject(sayHello, { title: 'Ms.' });\n     sayHelloToMs({ firstName: 'Jane', lastName: 'Jones' }); //=> 'Hello, Ms. Jane Jones!'"
        ],
        "name": "partialObject",
        "longname": "R.partialObject",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1376,
                1406
            ],
            "filename": "partialObject.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012734",
                "name": "module.exports",
                "type": "Identifier",
                "value": "partialObject",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "partialRight.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012742",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                157
            ],
            "filename": "partialRight.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012748",
                "name": "_createPartialApplicator",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_createPartialApplicator",
        "longname": "_createPartialApplicator",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                164,
                205
            ],
            "filename": "partialRight.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012754",
                "name": "flip",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "flip",
        "longname": "flip",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */",
        "meta": {
            "range": [
                1037,
                1120
            ],
            "filename": "partialRight.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012760",
                "name": "partialRight",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function `f` and a list of arguments, and returns a function `g`.\nWhen applied, `g` returns the result of applying `f` to the arguments\nprovided to `g` followed by the arguments provided initially.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)",
                "value": "((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)",
                "value": "R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.partial"
        ],
        "examples": [
            "const greet = (salutation, title, firstName, lastName) =>\n       salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n\n     const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n\n     greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'"
        ],
        "name": "partialRight",
        "longname": "R.partialRight",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1123,
                1152
            ],
            "filename": "partialRight.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012768",
                "name": "module.exports",
                "type": "Identifier",
                "value": "partialRight",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                49
            ],
            "filename": "partition.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012776",
                "name": "filter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "filter",
        "longname": "filter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56,
                97
            ],
            "filename": "partition.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012782",
                "name": "juxt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "juxt",
        "longname": "juxt",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                104,
                149
            ],
            "filename": "partition.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012788",
                "name": "reject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reject",
        "longname": "reject",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */",
        "meta": {
            "range": [
                1210,
                1258
            ],
            "filename": "partition.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012794",
                "name": "partition",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a predicate and a list or other `Filterable` object and returns the\npair of filterable objects of the same type of elements which do and do not\nsatisfy, the predicate, respectively. Filterable objects include plain objects or any object\nthat has a filter method such as `Array`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.4",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Filterable f => (a -> Boolean) -> f a -> [f a, f a]",
                "value": "Filterable f => (a -> Boolean) -> f a -> [f a, f a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate to determine which side the element belongs to.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "the list (or other filterable) to partition.",
                "name": "filterable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array, containing first the subset of elements that satisfy the\n        predicate, and second the subset of elements that do not satisfy."
            }
        ],
        "see": [
            "R.filter, R.reject"
        ],
        "examples": [
            "R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n     // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n\n     R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n     // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]"
        ],
        "name": "partition",
        "longname": "R.partition",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1260,
                1286
            ],
            "filename": "partition.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012802",
                "name": "module.exports",
                "type": "Identifier",
                "value": "partition",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "path.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012810",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "path.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012816",
                "name": "paths",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "paths",
        "longname": "paths",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Retrieves the value at a given path. The nodes of the path can be arbitrary strings or non-negative integers.\n * For anything else, the value is unspecified. Integer paths are meant to index arrays, strings are meant for objects.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {a} -> a | Undefined\n * @sig Idx = String | NonNegativeInt\n * @param {Array} path The path to use.\n * @param {Object} obj The object or array to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop, R.nth, R.assocPath, R.dissocPath\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1\n *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2\n *      R.path([2], {'2': 2}); //=> 2\n *      R.path([-2], {'-2': 'a'}); //=> undefined\n */",
        "meta": {
            "range": [
                1071,
                1165
            ],
            "filename": "path.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012822",
                "name": "path",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Retrieves the value at a given path. The nodes of the path can be arbitrary strings or non-negative integers.\nFor anything else, the value is unspecified. Integer paths are meant to index arrays, strings are meant for objects.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Idx] -> {a} -> a | Undefined",
                "value": "[Idx] -> {a} -> a | Undefined"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Idx = String | NonNegativeInt",
                "value": "Idx = String | NonNegativeInt"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The path to use.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object or array to retrieve the nested property from.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The data at `path`."
            }
        ],
        "see": [
            "R.prop, R.nth, R.assocPath, R.dissocPath"
        ],
        "examples": [
            "R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n     R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n     R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1\n     R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2\n     R.path([2], {'2': 2}); //=> 2\n     R.path([-2], {'-2': 'a'}); //=> undefined"
        ],
        "name": "path",
        "longname": "R.path",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1168,
                1189
            ],
            "filename": "path.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012840",
                "name": "module.exports",
                "type": "Identifier",
                "value": "path",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "pathEq.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012848",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "pathEq.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012854",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                160
            ],
            "filename": "pathEq.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012860",
                "name": "path",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "path",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int | Symbol\n * @sig a -> [Idx] -> {a} -> Boolean\n * @param {*} val The value to compare the nested property with\n * @param {Array} path The path of the nested property to use\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @see R.whereEq, R.propEq, R.pathSatisfies, R.equals\n * @example\n *\n *      const user1 = { address: { zipCode: 90210 } };\n *      const user2 = { address: { zipCode: 55555 } };\n *      const user3 = { name: 'Bob' };\n *      const users = [ user1, user2, user3 ];\n *      const isFamous = R.pathEq(90210, ['address', 'zipCode']);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */",
        "meta": {
            "range": [
                1141,
                1249
            ],
            "filename": "pathEq.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012866",
                "name": "pathEq",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Determines whether a nested path on an object has a specific value, in\n[`R.equals`](#equals) terms. Most likely used to filter a list.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.7.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> [Idx] -> {a} -> Boolean",
                "value": "a -> [Idx] -> {a} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to compare the nested property with",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The path of the nested property to use",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to check the nested property in",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "`true` if the value equals the nested object property,\n        `false` otherwise."
            }
        ],
        "see": [
            "R.whereEq, R.propEq, R.pathSatisfies, R.equals"
        ],
        "examples": [
            "const user1 = { address: { zipCode: 90210 } };\n     const user2 = { address: { zipCode: 55555 } };\n     const user3 = { name: 'Bob' };\n     const users = [ user1, user2, user3 ];\n     const isFamous = R.pathEq(90210, ['address', 'zipCode']);\n     R.filter(isFamous, users); //=> [ user1 ]"
        ],
        "name": "pathEq",
        "longname": "R.pathEq",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1252,
                1275
            ],
            "filename": "pathEq.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012885",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pathEq",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "pathOr.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012893",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                118
            ],
            "filename": "pathOr.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012899",
                "name": "defaultTo",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "defaultTo",
        "longname": "defaultTo",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125,
                166
            ],
            "filename": "pathOr.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012905",
                "name": "path",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "path",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */",
        "meta": {
            "range": [
                820,
                919
            ],
            "filename": "pathOr.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012911",
                "name": "pathOr",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "If the given, non-null object has a value at the given path, returns the\nvalue at that path. Otherwise returns the provided default value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.18.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> [Idx] -> {a} -> a",
                "value": "a -> [Idx] -> {a} -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The default value.",
                "name": "d"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The path to use.",
                "name": "p"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to retrieve the nested property from.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The data at `path` of the supplied object or the default value."
            }
        ],
        "examples": [
            "R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n     R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\""
        ],
        "name": "pathOr",
        "longname": "R.pathOr",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                922,
                945
            ],
            "filename": "pathOr.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012930",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pathOr",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "pathSatisfies.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012938",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "pathSatisfies.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012944",
                "name": "path",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "path",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the specified object property at given path satisfies the\n * given predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Logic\n * @typedefn Idx = String | Int | Symbol\n * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n * @param {Function} pred\n * @param {Array} propPath\n * @param {*} obj\n * @return {Boolean}\n * @see R.propSatisfies, R.path\n * @example\n *\n *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n *      R.pathSatisfies(R.is(Object), [], {x: {y: 2}}); //=> true\n */",
        "meta": {
            "range": [
                674,
                796
            ],
            "filename": "pathSatisfies.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012950",
                "name": "pathSatisfies",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the specified object property at given path satisfies the\ngiven predicate; `false` otherwise.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [Idx] -> {a} -> Boolean",
                "value": "(a -> Boolean) -> [Idx] -> {a} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "propPath"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.propSatisfies, R.path"
        ],
        "examples": [
            "R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n     R.pathSatisfies(R.is(Object), [], {x: {y: 2}}); //=> true"
        ],
        "name": "pathSatisfies",
        "longname": "R.pathSatisfies",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                799,
                829
            ],
            "filename": "pathSatisfies.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012968",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pathSatisfies",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "paths.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012976",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                129
            ],
            "filename": "paths.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012982",
                "name": "_isInteger",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isInteger",
        "longname": "_isInteger",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                136,
                175
            ],
            "filename": "paths.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012988",
                "name": "nth",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nth",
        "longname": "nth",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Retrieves the values at given paths of an object.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Object\n * @typedefn Idx = [String | Int | Symbol]\n * @sig [Idx] -> {a} -> [a | Undefined]\n * @param {Array} pathsArray The array of paths to be fetched.\n * @param {Object} obj The object to retrieve the nested properties from.\n * @return {Array} A list consisting of values at paths specified by \"pathsArray\".\n * @see R.path\n * @example\n *\n *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]\n *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]\n */",
        "meta": {
            "range": [
                815,
                1172
            ],
            "filename": "paths.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100012994",
                "name": "paths",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Retrieves the values at given paths of an object.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.27.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = [String | Int | Symbol]",
                "value": "Idx = [String | Int | Symbol]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Idx] -> {a} -> [a | Undefined]",
                "value": "[Idx] -> {a} -> [a | Undefined]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array of paths to be fetched.",
                "name": "pathsArray"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to retrieve the nested properties from.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A list consisting of values at paths specified by \"pathsArray\"."
            }
        ],
        "see": [
            "R.path"
        ],
        "examples": [
            "R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]\n     R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]"
        ],
        "name": "paths",
        "longname": "R.paths",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                930,
                939
            ],
            "filename": "paths.js",
            "lineno": 36,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013012",
                "name": "val",
                "type": "Identifier",
                "value": "obj"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                949,
                956
            ],
            "filename": "paths.js",
            "lineno": 37,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013016",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                966,
                967
            ],
            "filename": "paths.js",
            "lineno": 38,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013020",
                "name": "p"
            }
        },
        "undocumented": true,
        "name": "p",
        "longname": "<anonymous>~p",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1059,
                1073
            ],
            "filename": "paths.js",
            "lineno": 45,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013036",
                "name": "p",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "paths[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "p",
        "longname": "<anonymous>~p",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1081,
                1123
            ],
            "filename": "paths.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013042",
                "name": "val",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1131,
                1139
            ],
            "filename": "paths.js",
            "lineno": 47,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013056",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1175,
                1197
            ],
            "filename": "paths.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013062",
                "name": "module.exports",
                "type": "Identifier",
                "value": "paths",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "pick.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013070",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */",
        "meta": {
            "range": [
                689,
                930
            ],
            "filename": "pick.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013076",
                "name": "pick",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[k] -> {k: v} -> {k: v}",
                "value": "[k] -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "an array of String property names to copy onto a new object",
                "name": "names"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to copy from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A new object with only properties from `names` on it."
            }
        ],
        "see": [
            "R.omit, R.props"
        ],
        "examples": [
            "R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}"
        ],
        "name": "pick",
        "longname": "R.pick",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                752,
                763
            ],
            "filename": "pick.js",
            "lineno": 27,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013086",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                771,
                778
            ],
            "filename": "pick.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013090",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                847,
                883
            ],
            "filename": "pick.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013108",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "obj[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                896,
                904
            ],
            "filename": "pick.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013120",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                933,
                954
            ],
            "filename": "pick.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013126",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pick",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "pickAll.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013134",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */",
        "meta": {
            "range": [
                695,
                936
            ],
            "filename": "pickAll.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013140",
                "name": "pickAll",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Similar to `pick` except that this one includes a `key: undefined` pair for\nproperties that don't exist.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[k] -> {k: v} -> {k: v}",
                "value": "[k] -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "an array of String property names to copy onto a new object",
                "name": "names"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to copy from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A new object with only properties from `names` on it."
            }
        ],
        "see": [
            "R.pick"
        ],
        "examples": [
            "R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}"
        ],
        "name": "pickAll",
        "longname": "R.pickAll",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                764,
                775
            ],
            "filename": "pickAll.js",
            "lineno": 27,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013150",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                783,
                790
            ],
            "filename": "pickAll.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013154",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                798,
                816
            ],
            "filename": "pickAll.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013158",
                "name": "len",
                "type": "MemberExpression",
                "value": "names.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                849,
                866
            ],
            "filename": "pickAll.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013169",
                "name": "name",
                "type": "MemberExpression",
                "value": "names[undefined]"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "<anonymous>~name",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                872,
                896
            ],
            "filename": "pickAll.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013175",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "obj[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                902,
                910
            ],
            "filename": "pickAll.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013183",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                939,
                963
            ],
            "filename": "pickAll.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013189",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pickAll",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "pickBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013197",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      const isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */",
        "meta": {
            "range": [
                738,
                944
            ],
            "filename": "pickBy.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013203",
                "name": "pickBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a partial copy of an object containing only the keys that satisfy\nthe supplied predicate.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((v, k) -> Boolean) -> {k: v} -> {k: v}",
                "value": "((v, k) -> Boolean) -> {k: v} -> {k: v}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate to determine whether or not a key\n       should be included on the output object.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to copy from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A new object with only properties that satisfy `pred`\n        on it."
            }
        ],
        "see": [
            "R.pick, R.filter"
        ],
        "examples": [
            "const isUpperCase = (val, key) => key.toUpperCase() === key;\n     R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}"
        ],
        "name": "pickBy",
        "longname": "R.pickBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                804,
                815
            ],
            "filename": "pickBy.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013213",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                829,
                833
            ],
            "filename": "pickBy.js",
            "lineno": 31,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013218",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                888,
                912
            ],
            "filename": "pickBy.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013232",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "obj[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                947,
                970
            ],
            "filename": "pickBy.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013242",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pickBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "pipe.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013250",
                "name": "_arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arity",
        "longname": "_arity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                117
            ],
            "filename": "pipe.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013256",
                "name": "_pipe",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_pipe",
        "longname": "_pipe",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                169
            ],
            "filename": "pipe.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013262",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                176,
                217
            ],
            "filename": "pipe.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013268",
                "name": "tail",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "tail",
        "longname": "tail",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Performs left-to-right function composition. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n * @symb R.pipe(f, g, h)(a)(b) = h(g(f(a)))(b)\n */",
        "meta": {
            "range": [
                910,
                1110
            ],
            "filename": "pipe.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013273",
                "name": "pipe",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "description": "Performs left-to-right function composition. The first argument may have\nany arity; the remaining arguments must be unary.\n\nIn some libraries this function is named `sequence`.\n\n**Note:** The result of pipe is not automatically curried.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)",
                "value": "(((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.pipe(f, g, h)(a, b) = h(g(f(a, b)))",
                "value": "R.pipe(f, g, h)(a, b) = h(g(f(a, b)))"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.pipe(f, g, h)(a)(b) = h(g(f(a)))(b)",
                "value": "R.pipe(f, g, h)(a)(b) = h(g(f(a)))(b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "variable": true,
                "name": "functions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.compose"
        ],
        "examples": [
            "const f = R.pipe(Math.pow, R.negate, R.inc);\n\n     f(3, 4); // -(3^4) + 1"
        ],
        "name": "pipe",
        "longname": "R.pipe",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1112,
                1133
            ],
            "filename": "pipe.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013305",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pipe",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "pipeWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013313",
                "name": "_arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arity",
        "longname": "_arity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "pipeWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013319",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                128,
                169
            ],
            "filename": "pipeWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013325",
                "name": "head",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "head",
        "longname": "head",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                176,
                232
            ],
            "filename": "pipeWith.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013331",
                "name": "_reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_reduce",
        "longname": "_reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                239,
                280
            ],
            "filename": "pipeWith.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013337",
                "name": "tail",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "tail",
        "longname": "tail",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                287,
                336
            ],
            "filename": "pipeWith.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013343",
                "name": "identity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "identity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Performs left-to-right function composition using transforming function. The first function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of pipeWith is not automatically curried. Transforming function is not used on the\n * first argument.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)\n * @param {Function} transformer The transforming function\n * @param {Array} functions The functions to pipe\n * @return {Function}\n * @see R.composeWith, R.pipe\n * @example\n *\n *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));\n *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))\n */",
        "meta": {
            "range": [
                1235,
                1595
            ],
            "filename": "pipeWith.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013349",
                "name": "pipeWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Performs left-to-right function composition using transforming function. The first function may have\nany arity; the remaining functions must be unary.\n\n**Note:** The result of pipeWith is not automatically curried. Transforming function is not used on the\nfirst argument.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)",
                "value": "((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))",
                "value": "R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The transforming function",
                "name": "transformer"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The functions to pipe",
                "name": "functions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.composeWith, R.pipe"
        ],
        "examples": [
            "const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));\n     const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])\n\n     f(3, 4); // -(3^4) + 1"
        ],
        "name": "pipeWith",
        "longname": "R.pipeWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1356,
                1377
            ],
            "filename": "pipeWith.js",
            "lineno": 57,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013368",
                "name": "headList",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "headList",
        "longname": "<anonymous>~headList",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1385,
                1406
            ],
            "filename": "pipeWith.js",
            "lineno": 58,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013374",
                "name": "tailList",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "tailList",
        "longname": "<anonymous>~tailList",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1598,
                1623
            ],
            "filename": "pipeWith.js",
            "lineno": 66,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013410",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pipeWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "pluck.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013418",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                106
            ],
            "filename": "pluck.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013424",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                113,
                154
            ],
            "filename": "pluck.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013430",
                "name": "prop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "prop",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.project, R.prop, R.props\n * @example\n *\n *      var getAges = R.pluck('age');\n *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]\n *\n *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */",
        "meta": {
            "range": [
                1170,
                1257
            ],
            "filename": "pluck.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013436",
                "name": "pluck",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list by plucking the same named property off all objects in\nthe list supplied.\n\n`pluck` will work on\nany [functor](https://github.com/fantasyland/fantasy-land#functor) in\naddition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Functor f => k -> f {k: v} -> f v",
                "value": "Functor f => k -> f {k: v} -> f v"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]",
                "value": "R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]",
                "value": "R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ]
                },
                "description": "The key name to pluck off of each object.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array or functor to consider.",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of values for the given key."
            }
        ],
        "see": [
            "R.project, R.prop, R.props"
        ],
        "examples": [
            "var getAges = R.pluck('age');\n     getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]\n\n     R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]\n     R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}"
        ],
        "name": "pluck",
        "longname": "R.pluck",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1260,
                1282
            ],
            "filename": "pluck.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013453",
                "name": "module.exports",
                "type": "Identifier",
                "value": "pluck",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "prepend.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013461",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "prepend.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013467",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */",
        "meta": {
            "range": [
                605,
                698
            ],
            "filename": "prepend.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013473",
                "name": "prepend",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list with the given element at the front, followed by the\ncontents of the list.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> [a] -> [a]",
                "value": "a -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The item to add to the head of the output list.",
                "name": "el"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to add to the tail of the output list.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new array."
            }
        ],
        "see": [
            "R.append"
        ],
        "examples": [
            "R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']"
        ],
        "name": "prepend",
        "longname": "R.prepend",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                701,
                725
            ],
            "filename": "prepend.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013489",
                "name": "module.exports",
                "type": "Identifier",
                "value": "prepend",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                53
            ],
            "filename": "product.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013497",
                "name": "multiply",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "multiply",
        "longname": "multiply",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60,
                105
            ],
            "filename": "product.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013503",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Multiplies together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The product of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.product([2,4,6,8,100,1]); //=> 38400\n */",
        "meta": {
            "range": [
                447,
                490
            ],
            "filename": "product.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013509",
                "name": "product",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Multiplies together all the elements of a list.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Number] -> Number",
                "value": "[Number] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of numbers",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The product of all the numbers in the list."
            }
        ],
        "see": [
            "R.reduce"
        ],
        "examples": [
            "R.product([2,4,6,8,100,1]); //=> 38400"
        ],
        "name": "product",
        "longname": "R.product",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                492,
                516
            ],
            "filename": "product.js",
            "lineno": 28,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013516",
                "name": "module.exports",
                "type": "Identifier",
                "value": "product",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                54
            ],
            "filename": "project.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013524",
                "name": "_map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_map",
        "longname": "_map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61,
                110
            ],
            "filename": "project.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013530",
                "name": "identity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "identity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                117,
                164
            ],
            "filename": "project.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013536",
                "name": "pickAll",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pickAll",
        "longname": "pickAll",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                171,
                218
            ],
            "filename": "project.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013542",
                "name": "useWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "useWith",
        "longname": "useWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Reasonable analog to SQL `select` statement.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @category Relation\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array} props The property names to project\n * @param {Array} objs The objects to query\n * @return {Array} An array of objects with just the `props` properties.\n * @see R.pluck, R.props, R.prop\n * @example\n *\n *      const abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n *      const fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n *      const kids = [abby, fred];\n *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n */",
        "meta": {
            "range": [
                901,
                959
            ],
            "filename": "project.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013548",
                "name": "project",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Reasonable analog to SQL `select` statement.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[k] -> [{k: v}] -> [{k: v}]",
                "value": "[k] -> [{k: v}] -> [{k: v}]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The property names to project",
                "name": "props"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The objects to query",
                "name": "objs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of objects with just the `props` properties."
            }
        ],
        "see": [
            "R.pluck, R.props, R.prop"
        ],
        "examples": [
            "const abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n     const fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n     const kids = [abby, fred];\n     R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]"
        ],
        "name": "project",
        "longname": "R.project",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1004,
                1028
            ],
            "filename": "project.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013557",
                "name": "module.exports",
                "type": "Identifier",
                "value": "project",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "promap.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013565",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "promap.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013571",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                198
            ],
            "filename": "promap.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013577",
                "name": "_promap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_promap",
        "longname": "_promap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                205,
                263
            ],
            "filename": "promap.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013583",
                "name": "_xpromap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xpromap",
        "longname": "_xpromap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes two functions as pre- and post- processors respectively for a third function,\n * i.e. `promap(f, g, h)(x) === g(h(f(x)))`.\n *\n * Dispatches to the `promap` method of the third argument, if present,\n * according to the [FantasyLand Profunctor spec](https://github.com/fantasyland/fantasy-land#profunctor).\n *\n * Acts as a transducer if a transformer is given in profunctor position.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig (a -> b) -> (c -> d) -> (b -> c) -> (a -> d)\n * @sig Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d\n * @param {Function} f The preprocessor function, a -> b\n * @param {Function} g The postprocessor function, c -> d\n * @param {Profunctor} profunctor The profunctor instance to be promapped, e.g. b -> c\n * @return {Profunctor} The new profunctor instance, e.g. a -> d\n * @see R.transduce\n * @example\n *\n *      const decodeChar = R.promap(s => s.charCodeAt(), String.fromCharCode, R.add(-8))\n *      const decodeString = R.promap(R.split(''), R.join(''), R.map(decodeChar))\n *      decodeString(\"ziuli\") //=> \"ramda\"\n *\n * @symb R.promap(f, g, h) = x => g(h(f(x)))\n * @symb R.promap(f, g, profunctor) = profunctor.promap(f, g)\n */",
        "meta": {
            "range": [
                1479,
                1593
            ],
            "filename": "promap.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013589",
                "name": "promap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes two functions as pre- and post- processors respectively for a third function,\ni.e. `promap(f, g, h)(x) === g(h(f(x)))`.\n\nDispatches to the `promap` method of the third argument, if present,\naccording to the [FantasyLand Profunctor spec](https://github.com/fantasyland/fantasy-land#profunctor).\n\nActs as a transducer if a transformer is given in profunctor position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> b) -> (c -> d) -> (b -> c) -> (a -> d)",
                "value": "(a -> b) -> (c -> d) -> (b -> c) -> (a -> d)"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d",
                "value": "Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.promap(f, g, h) = x => g(h(f(x)))",
                "value": "R.promap(f, g, h) = x => g(h(f(x)))"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.promap(f, g, profunctor) = profunctor.promap(f, g)",
                "value": "R.promap(f, g, profunctor) = profunctor.promap(f, g)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The preprocessor function, a -> b",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The postprocessor function, c -> d",
                "name": "g"
            },
            {
                "type": {
                    "names": [
                        "Profunctor"
                    ]
                },
                "description": "The profunctor instance to be promapped, e.g. b -> c",
                "name": "profunctor"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Profunctor"
                    ]
                },
                "description": "The new profunctor instance, e.g. a -> d"
            }
        ],
        "see": [
            "R.transduce"
        ],
        "examples": [
            "const decodeChar = R.promap(s => s.charCodeAt(), String.fromCharCode, R.add(-8))\n     const decodeString = R.promap(R.split(''), R.join(''), R.map(decodeChar))\n     decodeString(\"ziuli\") //=> \"ramda\""
        ],
        "name": "promap",
        "longname": "R.promap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1596,
                1619
            ],
            "filename": "promap.js",
            "lineno": 53,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013601",
                "name": "module.exports",
                "type": "Identifier",
                "value": "promap",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "prop.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013609",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                129
            ],
            "filename": "prop.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013615",
                "name": "_isInteger",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isInteger",
        "longname": "_isInteger",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                136,
                175
            ],
            "filename": "prop.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013621",
                "name": "nth",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nth",
        "longname": "nth",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx -> {s: a} -> a | Undefined\n * @param {String|Number} p The property name or array index\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path, R.props, R.pluck, R.project, R.nth\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n *      R.prop(0, [100]); //=> 100\n *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4\n */",
        "meta": {
            "range": [
                827,
                967
            ],
            "filename": "prop.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013627",
                "name": "prop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a function that when supplied an object returns the indicated\nproperty of that object, if it exists.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Idx = String | Int | Symbol",
                "value": "Idx = String | Int | Symbol"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Idx -> {s: a} -> a | Undefined",
                "value": "Idx -> {s: a} -> a | Undefined"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Number"
                    ]
                },
                "description": "The property name or array index",
                "name": "p"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to query",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value at `obj.p`."
            }
        ],
        "see": [
            "R.path, R.props, R.pluck, R.project, R.nth"
        ],
        "examples": [
            "R.prop('x', {x: 100}); //=> 100\n     R.prop('x', {}); //=> undefined\n     R.prop(0, [100]); //=> 100\n     R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4"
        ],
        "name": "prop",
        "longname": "R.prop",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                970,
                991
            ],
            "filename": "prop.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013655",
                "name": "module.exports",
                "type": "Identifier",
                "value": "prop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "propEq.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013663",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "propEq.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013669",
                "name": "prop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "prop",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                115,
                160
            ],
            "filename": "propEq.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013675",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the specified object property is equal, in\n * [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n * You can test multiple properties with [`R.whereEq`](#whereEq),\n * and test nested path property with [`R.pathEq`](#pathEq).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig a -> String -> Object -> Boolean\n * @param {*} val The value to compare the property with\n * @param {String} name the specified object property's key\n * @param {*} obj The object to check the property in\n * @return {Boolean} `true` if the value equals the specified object property,\n *         `false` otherwise.\n * @see R.whereEq, R.pathEq, R.propSatisfies, R.equals\n * @example\n *\n *      const abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      const fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      const rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      const alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      const kids = [abby, fred, rusty, alois];\n *      const hasBrownHair = R.propEq('brown', 'hair');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */",
        "meta": {
            "range": [
                1311,
                1417
            ],
            "filename": "propEq.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013681",
                "name": "propEq",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the specified object property is equal, in\n[`R.equals`](#equals) terms, to the given value; `false` otherwise.\nYou can test multiple properties with [`R.whereEq`](#whereEq),\nand test nested path property with [`R.pathEq`](#pathEq).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> String -> Object -> Boolean",
                "value": "a -> String -> Object -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to compare the property with",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "the specified object property's key",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The object to check the property in",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "`true` if the value equals the specified object property,\n        `false` otherwise."
            }
        ],
        "see": [
            "R.whereEq, R.pathEq, R.propSatisfies, R.equals"
        ],
        "examples": [
            "const abby = {name: 'Abby', age: 7, hair: 'blond'};\n     const fred = {name: 'Fred', age: 12, hair: 'brown'};\n     const rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     const alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     const kids = [abby, fred, rusty, alois];\n     const hasBrownHair = R.propEq('brown', 'hair');\n     R.filter(hasBrownHair, kids); //=> [fred, rusty]"
        ],
        "name": "propEq",
        "longname": "R.propEq",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1420,
                1443
            ],
            "filename": "propEq.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013700",
                "name": "module.exports",
                "type": "Identifier",
                "value": "propEq",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "propIs.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013708",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "propIs.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013714",
                "name": "prop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "prop",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                115,
                152
            ],
            "filename": "propIs.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013720",
                "name": "is",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "is",
        "longname": "is",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the specified object property is of the given type;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Type\n * @sig Type -> String -> Object -> Boolean\n * @param {Function} type\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.is, R.propSatisfies\n * @example\n *\n *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n *      R.propIs(Number, 'x', {});            //=> false\n */",
        "meta": {
            "range": [
                674,
                778
            ],
            "filename": "propIs.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013726",
                "name": "propIs",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the specified object property is of the given type;\n`false` otherwise.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Type",
                "value": "Type"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Type -> String -> Object -> Boolean",
                "value": "Type -> String -> Object -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.is, R.propSatisfies"
        ],
        "examples": [
            "R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n     R.propIs(Number, 'x', {x: 'foo'});    //=> false\n     R.propIs(Number, 'x', {});            //=> false"
        ],
        "name": "propIs",
        "longname": "R.propIs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                781,
                804
            ],
            "filename": "propIs.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013745",
                "name": "module.exports",
                "type": "Identifier",
                "value": "propIs",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "propOr.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013753",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                118
            ],
            "filename": "propOr.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013759",
                "name": "defaultTo",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "defaultTo",
        "longname": "defaultTo",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125,
                166
            ],
            "filename": "propOr.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013765",
                "name": "prop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "prop",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Return the specified property of the given non-null object if the property\n * is present and it's value is not `null`, `undefined` or `NaN`.\n *\n * Otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      const alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      const favorite = R.prop('favoriteLibrary');\n *      const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */",
        "meta": {
            "range": [
                1013,
                1116
            ],
            "filename": "propOr.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013771",
                "name": "propOr",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Return the specified property of the given non-null object if the property\nis present and it's value is not `null`, `undefined` or `NaN`.\n\nOtherwise the first argument is returned.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.6.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> String -> Object -> a",
                "value": "a -> String -> Object -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The default value.",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the property to return.",
                "name": "p"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to query.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value of given property of the supplied object or the default value."
            }
        ],
        "examples": [
            "const alice = {\n       name: 'ALICE',\n       age: 101\n     };\n     const favorite = R.prop('favoriteLibrary');\n     const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n\n     favorite(alice);  //=> undefined\n     favoriteWithDefault(alice);  //=> 'Ramda'"
        ],
        "name": "propOr",
        "longname": "R.propOr",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1119,
                1142
            ],
            "filename": "propOr.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013790",
                "name": "module.exports",
                "type": "Identifier",
                "value": "propOr",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "propSatisfies.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013798",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "propSatisfies.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013804",
                "name": "prop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "prop",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise. You can test multiple properties with\n * [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.where, R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */",
        "meta": {
            "range": [
                619,
                733
            ],
            "filename": "propSatisfies.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013810",
                "name": "propSatisfies",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns `true` if the specified object property satisfies the given\npredicate; `false` otherwise. You can test multiple properties with\n[`R.where`](#where).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> String -> {String: a} -> Boolean",
                "value": "(a -> Boolean) -> String -> {String: a} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.where, R.propEq, R.propIs"
        ],
        "examples": [
            "R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true"
        ],
        "name": "propSatisfies",
        "longname": "R.propSatisfies",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                736,
                766
            ],
            "filename": "propSatisfies.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013828",
                "name": "module.exports",
                "type": "Identifier",
                "value": "propSatisfies",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "props.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013836",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "props.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013842",
                "name": "path",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "path",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @see R.prop, R.pluck, R.project\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      const fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */",
        "meta": {
            "range": [
                818,
                940
            ],
            "filename": "props.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013848",
                "name": "props",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Acts as multiple `prop`: array of keys in, array of values out. Preserves\norder.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[k] -> {k: v} -> [v]",
                "value": "[k] -> {k: v} -> [v]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The property names to fetch",
                "name": "ps"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to query",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The corresponding values or partially applied function."
            }
        ],
        "see": [
            "R.prop, R.pluck, R.project"
        ],
        "examples": [
            "R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n     R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n\n     const fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n     fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'"
        ],
        "name": "props",
        "longname": "R.props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                943,
                965
            ],
            "filename": "props.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013872",
                "name": "module.exports",
                "type": "Identifier",
                "value": "props",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "range.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013880",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                127
            ],
            "filename": "range.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013886",
                "name": "_isNumber",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isNumber",
        "longname": "_isNumber",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in the set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */",
        "meta": {
            "range": [
                598,
                884
            ],
            "filename": "range.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013892",
                "name": "range",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a list of numbers from `from` (inclusive) to `to` (exclusive).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> [Number]",
                "value": "Number -> Number -> [Number]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The first number in the list.",
                "name": "from"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "One more than the last number in the list.",
                "name": "to"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of numbers in the set `[a, b)`."
            }
        ],
        "examples": [
            "R.range(1, 5);    //=> [1, 2, 3, 4]\n     R.range(50, 53);  //=> [50, 51, 52]"
        ],
        "name": "range",
        "longname": "R.range",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                779,
                790
            ],
            "filename": "range.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013916",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                798,
                806
            ],
            "filename": "range.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013920",
                "name": "n",
                "type": "Identifier",
                "value": "from"
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "<anonymous>~n",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                852,
                858
            ],
            "filename": "range.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013935",
                "name": "n",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "<anonymous>~n",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                887,
                909
            ],
            "filename": "range.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013941",
                "name": "module.exports",
                "type": "Identifier",
                "value": "range",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "reduce.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013949",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "reduce.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013955",
                "name": "_xReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xReduce",
        "longname": "_xReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                186
            ],
            "filename": "reduce.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013961",
                "name": "_xwrap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xwrap",
        "longname": "_xwrap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Be cautious of mutating and returning the accumulator. If you reuse it across\n * invocations, it will continue to accumulate onto the same value. The general\n * recommendation is to always return a new value. If you can't do so for\n * performance reasons, then be sure to reinitialize the accumulator on each\n * invocation.\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */",
        "meta": {
            "range": [
                2401,
                2535
            ],
            "filename": "reduce.js",
            "lineno": 66,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013967",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a single item by iterating through the list, successively calling\nthe iterator function and passing it an accumulator value and the current\nvalue from the array, and then passing the result to the next call.\n\nThe iterator function receives two values: *(acc, value)*. It may use\n[`R.reduced`](#reduced) to shortcut the iteration.\n\nThe arguments' order of [`reduceRight`](#reduceRight)'s iterator function\nis *(value, acc)*.\n\nNote: `R.reduce` does not skip deleted or unassigned indices (sparse\narrays), unlike the native `Array.prototype.reduce` method. For more details\non this behavior, see:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n\nBe cautious of mutating and returning the accumulator. If you reuse it across\ninvocations, it will continue to accumulate onto the same value. The general\nrecommendation is to always return a new value. If you can't do so for\nperformance reasons, then be sure to reinitialize the accumulator on each\ninvocation.\n\nDispatches to the `reduce` method of the third argument, if present. When\ndoing so, it is up to the user to handle the [`R.reduced`](#reduced)\nshortcuting, as this is not implemented by `reduce`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b) -> a) -> a -> [b] -> a",
                "value": "((a, b) -> a) -> a -> [b] -> a"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)",
                "value": "R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The iterator function. Receives two values, the accumulator and the\n       current element from the array.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The accumulator value.",
                "name": "acc"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The final, accumulated value."
            }
        ],
        "see": [
            "R.reduced, R.addIndex, R.reduceRight"
        ],
        "examples": [
            "R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n     //          -               -10\n     //         / \\              / \\\n     //        -   4           -6   4\n     //       / \\              / \\\n     //      -   3   ==>     -3   3\n     //     / \\              / \\\n     //    -   2           -1   2\n     //   / \\              / \\\n     //  0   1            0   1"
        ],
        "name": "reduce",
        "longname": "R.reduce",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2538,
                2561
            ],
            "filename": "reduce.js",
            "lineno": 72,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013991",
                "name": "module.exports",
                "type": "Identifier",
                "value": "reduce",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "reduceBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100013999",
                "name": "_clone",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_clone",
        "longname": "_clone",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "reduceBy.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014005",
                "name": "_curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curryN",
        "longname": "_curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                128,
                196
            ],
            "filename": "reduceBy.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014011",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                203,
                253
            ],
            "filename": "reduceBy.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014017",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                260,
                318
            ],
            "filename": "reduceBy.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014023",
                "name": "_reduced",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_reduced",
        "longname": "_reduced",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                325,
                383
            ],
            "filename": "reduceBy.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014029",
                "name": "_xReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xReduce",
        "longname": "_xReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                390,
                452
            ],
            "filename": "reduceBy.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014035",
                "name": "_xreduceBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xreduceBy",
        "longname": "_xreduceBy",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                459,
                513
            ],
            "filename": "reduceBy.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014041",
                "name": "_xwrap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xwrap",
        "longname": "_xwrap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * The value function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to short circuit the iteration.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce, R.reduced\n * @example\n *\n *      const groupNames = (acc, {name}) => acc.concat(name)\n *      const toGrade = ({score}) =>\n *        score < 65 ? 'F' :\n *        score < 70 ? 'D' :\n *        score < 80 ? 'C' :\n *        score < 90 ? 'B' : 'A'\n *\n *      var students = [\n *        {name: 'Abby', score: 83},\n *        {name: 'Bart', score: 62},\n *        {name: 'Curt', score: 88},\n *        {name: 'Dora', score: 92},\n *      ]\n *\n *      reduceBy(groupNames, [], toGrade, students)\n *      //=> {\"A\": [\"Dora\"], \"B\": [\"Abby\", \"Curt\"], \"F\": [\"Bart\"]}\n */",
        "meta": {
            "range": [
                2299,
                2751
            ],
            "filename": "reduceBy.js",
            "lineno": 78,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014047",
                "name": "reduceBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Groups the elements of the list according to the result of calling\nthe String-returning function `keyFn` on each element and reduces the elements\nof each group to a single value via the reducer function `valueFn`.\n\nThe value function receives two values: *(acc, value)*. It may use\n[`R.reduced`](#reduced) to short circuit the iteration.\n\nThis function is basically a more general [`groupBy`](#groupBy) function.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.20.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}",
                "value": "((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function that reduces the elements of each group to a single\n       value. Receives two values, accumulator for a particular group and the current element.",
                "name": "valueFn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The (initial) accumulator value for each group.",
                "name": "acc"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function that maps the list's element into a key.",
                "name": "keyFn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to group.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object with the output of `keyFn` for keys, mapped to the output of\n        `valueFn` for elements which produced that key when passed to `keyFn`."
            }
        ],
        "see": [
            "R.groupBy, R.reduce, R.reduced"
        ],
        "examples": [
            "const groupNames = (acc, {name}) => acc.concat(name)\n     const toGrade = ({score}) =>\n       score < 65 ? 'F' :\n       score < 70 ? 'D' :\n       score < 80 ? 'C' :\n       score < 90 ? 'B' : 'A'\n\n     var students = [\n       {name: 'Abby', score: 83},\n       {name: 'Bart', score: 62},\n       {name: 'Curt', score: 88},\n       {name: 'Dora', score: 92},\n     ]\n\n     reduceBy(groupNames, [], toGrade, students)\n     //=> {\"A\": [\"Dora\"], \"B\": [\"Abby\", \"Curt\"], \"F\": [\"Bart\"]}"
        ],
        "name": "reduceBy",
        "longname": "R.reduceBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2441,
                2712
            ],
            "filename": "reduceBy.js",
            "lineno": 83,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014065",
                "name": "xf",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "xf",
        "longname": "<anonymous>~xf",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2483,
                2499
            ],
            "filename": "reduceBy.js",
            "lineno": 84,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014074",
                "name": "key",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2509,
                2582
            ],
            "filename": "reduceBy.js",
            "lineno": 85,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014080",
                "name": "value",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2674,
                2690
            ],
            "filename": "reduceBy.js",
            "lineno": 91,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014109",
                "name": "acc[undefined]",
                "type": "Identifier",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc[undefined]",
        "longname": "acc[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2754,
                2779
            ],
            "filename": "reduceBy.js",
            "lineno": 98,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014123",
                "name": "module.exports",
                "type": "Identifier",
                "value": "reduceBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "reduceRight.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014131",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*. `reduceRight` may use [`reduced`](#reduced)\n * to short circuit the iteration.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * Be cautious of mutating and returning the accumulator. If you reuse it across\n * invocations, it will continue to accumulate onto the same value. The general\n * recommendation is to always return a new value. If you can't do so for\n * performance reasons, then be sure to reinitialize the accumulator on each\n * invocation.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex, R.reduced\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */",
        "meta": {
            "range": [
                2177,
                2473
            ],
            "filename": "reduceRight.js",
            "lineno": 55,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014137",
                "name": "reduceRight",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a single item by iterating through the list, successively calling\nthe iterator function and passing it an accumulator value and the current\nvalue from the array, and then passing the result to the next call.\n\nSimilar to [`reduce`](#reduce), except moves through the input list from the\nright to the left.\n\nThe iterator function receives two values: *(value, acc)*, while the arguments'\norder of `reduce`'s iterator function is *(acc, value)*. `reduceRight` may use [`reduced`](#reduced)\nto short circuit the iteration.\n\nNote: `R.reduceRight` does not skip deleted or unassigned indices (sparse\narrays), unlike the native `Array.prototype.reduceRight` method. For more details\non this behavior, see:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n\nBe cautious of mutating and returning the accumulator. If you reuse it across\ninvocations, it will continue to accumulate onto the same value. The general\nrecommendation is to always return a new value. If you can't do so for\nperformance reasons, then be sure to reinitialize the accumulator on each\ninvocation.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b) -> b) -> b -> [a] -> b",
                "value": "((a, b) -> b) -> b -> [a] -> b"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))",
                "value": "R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The iterator function. Receives two values, the current element from the array\n       and the accumulator.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The accumulator value.",
                "name": "acc"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The final, accumulated value."
            }
        ],
        "see": [
            "R.reduce, R.addIndex, R.reduced"
        ],
        "examples": [
            "R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n     //    -               -2\n     //   / \\              / \\\n     //  1   -            1   3\n     //     / \\              / \\\n     //    2   -     ==>    2  -1\n     //       / \\              / \\\n     //      3   -            3   4\n     //         / \\              / \\\n     //        4   0            4   0"
        ],
        "name": "reduceRight",
        "longname": "R.reduceRight",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2257,
                2278
            ],
            "filename": "reduceRight.js",
            "lineno": 58,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014148",
                "name": "idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2306,
                2330
            ],
            "filename": "reduceRight.js",
            "lineno": 61,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014161",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2385,
                2416
            ],
            "filename": "reduceRight.js",
            "lineno": 64,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014177",
                "name": "acc",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "acc['@@transducer/value']",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2442,
                2450
            ],
            "filename": "reduceRight.js",
            "lineno": 68,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014184",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2476,
                2504
            ],
            "filename": "reduceRight.js",
            "lineno": 74,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014190",
                "name": "module.exports",
                "type": "Identifier",
                "value": "reduceRight",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "reduceWhile.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014198",
                "name": "_curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curryN",
        "longname": "_curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "reduceWhile.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014204",
                "name": "_xReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xReduce",
        "longname": "_xReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                186
            ],
            "filename": "reduceWhile.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014210",
                "name": "_xwrap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xwrap",
        "longname": "_xwrap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                193,
                251
            ],
            "filename": "reduceWhile.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014216",
                "name": "_reduced",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_reduced",
        "longname": "_reduced",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator. `reduceWhile` may alternatively be short-circuited\n * via [`reduced`](#reduced).\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      const isOdd = (acc, x) => x % 2 !== 0;\n *      const xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      const ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */",
        "meta": {
            "range": [
                1445,
                1664
            ],
            "filename": "reduceWhile.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014222",
                "name": "reduceWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\nthrough the list, successively calling the iterator function. `reduceWhile`\nalso takes a predicate that is evaluated before each step. If the predicate\nreturns `false`, it \"short-circuits\" the iteration and returns the current\nvalue of the accumulator. `reduceWhile` may alternatively be short-circuited\nvia [`reduced`](#reduced).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.22.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a",
                "value": "((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate. It is passed the accumulator and the\n       current element.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The iterator function. Receives two values, the\n       accumulator and the current element.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The accumulator value.",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The final, accumulated value."
            }
        ],
        "see": [
            "R.reduce, R.reduced"
        ],
        "examples": [
            "const isOdd = (acc, x) => x % 2 !== 0;\n     const xs = [1, 3, 5, 60, 777, 800];\n     R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n\n     const ys = [2, 4, 6]\n     R.reduceWhile(isOdd, R.add, 111, ys); //=> 111"
        ],
        "name": "reduceWhile",
        "longname": "R.reduceWhile",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1537,
                1627
            ],
            "filename": "reduceWhile.js",
            "lineno": 51,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014236",
                "name": "xf",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "xf",
        "longname": "<anonymous>~xf",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1667,
                1695
            ],
            "filename": "reduceWhile.js",
            "lineno": 58,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014264",
                "name": "module.exports",
                "type": "Identifier",
                "value": "reduceWhile",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "reduced.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014272",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "reduced.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014278",
                "name": "_reduced",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_reduced",
        "longname": "_reduced",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a value wrapped to indicate that it is the final value of the reduce\n * and transduce functions. The returned value should be considered a black\n * box: the internal structure is not guaranteed to be stable.\n *\n * This optimization is available to the below functions:\n * - [`reduce`](#reduce)\n * - [`reduceWhile`](#reduceWhile)\n * - [`reduceBy`](#reduceBy)\n * - [`reduceRight`](#reduceRight)\n * - [`transduce`](#transduce)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category List\n * @sig a -> *\n * @param {*} x The final value of the reduce.\n * @return {*} The wrapped value.\n * @see R.reduce, R.reduceWhile, R.reduceBy, R.reduceRight, R.transduce\n * @example\n *\n *     R.reduce(\n *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n *       [],\n *       [1, 2, 3, 4, 5]) // [1, 2, 3]\n */",
        "meta": {
            "range": [
                961,
                1002
            ],
            "filename": "reduced.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014284",
                "name": "reduced",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a value wrapped to indicate that it is the final value of the reduce\nand transduce functions. The returned value should be considered a black\nbox: the internal structure is not guaranteed to be stable.\n\nThis optimization is available to the below functions:\n- [`reduce`](#reduce)\n- [`reduceWhile`](#reduceWhile)\n- [`reduceBy`](#reduceBy)\n- [`reduceRight`](#reduceRight)\n- [`transduce`](#transduce)",
        "kind": "function",
        "memberof": "R",
        "since": "v0.15.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> *",
                "value": "a -> *"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The final value of the reduce.",
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The wrapped value."
            }
        ],
        "see": [
            "R.reduce, R.reduceWhile, R.reduceBy, R.reduceRight, R.transduce"
        ],
        "examples": [
            "R.reduce(\n      (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n      [],\n      [1, 2, 3, 4, 5]) // [1, 2, 3]"
        ],
        "name": "reduced",
        "longname": "R.reduced",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1005,
                1029
            ],
            "filename": "reduced.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014290",
                "name": "module.exports",
                "type": "Identifier",
                "value": "reduced",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                68
            ],
            "filename": "reject.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014298",
                "name": "_complement",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_complement",
        "longname": "_complement",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75,
                131
            ],
            "filename": "reject.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014304",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                138,
                183
            ],
            "filename": "reject.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014310",
                "name": "filter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "filter",
        "longname": "filter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      const isOdd = (n) => n % 2 !== 0;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */",
        "meta": {
            "range": [
                829,
                946
            ],
            "filename": "reject.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014316",
                "name": "reject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "The complement of [`filter`](#filter).\n\nActs as a transducer if a transformer is given in list position. Filterable\nobjects include plain objects or any object that has a filter method such\nas `Array`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Filterable f => (a -> Boolean) -> f a -> f a",
                "value": "Filterable f => (a -> Boolean) -> f a -> f a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "filterable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "see": [
            "R.filter, R.transduce, R.addIndex"
        ],
        "examples": [
            "const isOdd = (n) => n % 2 !== 0;\n\n     R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n\n     R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}"
        ],
        "name": "reject",
        "longname": "R.reject",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                949,
                972
            ],
            "filename": "reject.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014333",
                "name": "module.exports",
                "type": "Identifier",
                "value": "reject",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "remove.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014341",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @see R.without\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */",
        "meta": {
            "range": [
                780,
                951
            ],
            "filename": "remove.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014347",
                "name": "remove",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Removes the sub-list of `list` starting at index `start` and containing\n`count` elements. _Note that this is not destructive_: it returns a copy of\nthe list with the changes.\n<small>No lists have been harmed in the application of this function.</small>",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.2",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> [a] -> [a]",
                "value": "Number -> Number -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position to start removing elements",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The number of elements to remove",
                "name": "count"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to remove from",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new Array with `count` elements from `start` removed."
            }
        ],
        "see": [
            "R.without"
        ],
        "examples": [
            "R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]"
        ],
        "name": "remove",
        "longname": "R.remove",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                855,
                899
            ],
            "filename": "remove.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014358",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                954,
                977
            ],
            "filename": "remove.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014380",
                "name": "module.exports",
                "type": "Identifier",
                "value": "remove",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "repeat.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014388",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "repeat.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014394",
                "name": "always",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "always",
        "longname": "always",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                162
            ],
            "filename": "repeat.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014400",
                "name": "times",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "times",
        "longname": "times",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig a -> n -> [a]\n * @param {*} value The value to repeat.\n * @param {Number} n The desired size of the output list.\n * @return {Array} A new array containing `n` `value`s.\n * @see R.times\n * @example\n *\n *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      const obj = {};\n *      const repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n * @symb R.repeat(a, 0) = []\n * @symb R.repeat(a, 1) = [a]\n * @symb R.repeat(a, 2) = [a, a]\n */",
        "meta": {
            "range": [
                834,
                929
            ],
            "filename": "repeat.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014406",
                "name": "repeat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a fixed list of size `n` containing a specified identical value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> n -> [a]",
                "value": "a -> n -> [a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.repeat(a, 0) = []",
                "value": "R.repeat(a, 0) = []"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.repeat(a, 1) = [a]",
                "value": "R.repeat(a, 1) = [a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.repeat(a, 2) = [a, a]",
                "value": "R.repeat(a, 2) = [a, a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to repeat.",
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The desired size of the output list.",
                "name": "n"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new array containing `n` `value`s."
            }
        ],
        "see": [
            "R.times"
        ],
        "examples": [
            "R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n\n     const obj = {};\n     const repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n     repeatedObjs[0] === repeatedObjs[1]; //=> true"
        ],
        "name": "repeat",
        "longname": "R.repeat",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                932,
                955
            ],
            "filename": "repeat.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014423",
                "name": "module.exports",
                "type": "Identifier",
                "value": "repeat",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "replace.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014431",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * The first two parameters correspond to the parameters of the\n * `String.prototype.replace()` function, so the second parameter can also be a\n * function.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */",
        "meta": {
            "range": [
                961,
                1081
            ],
            "filename": "replace.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014437",
                "name": "replace",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Replace a substring or regex match in a string with a replacement.\n\nThe first two parameters correspond to the parameters of the\n`String.prototype.replace()` function, so the second parameter can also be a\nfunction.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.7.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "String",
                "value": "String"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "RegExp|String -> String -> String -> String",
                "value": "RegExp|String -> String -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "RegExp",
                        "String"
                    ]
                },
                "description": "A regular expression or a substring to match.",
                "name": "pattern"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The string to replace the matches with.",
                "name": "replacement"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The String to do the search and replacement in.",
                "name": "str"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The result."
            }
        ],
        "examples": [
            "R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n\n     // Use the \"g\" (global) flag to replace all occurrences:\n     R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'"
        ],
        "name": "replace",
        "longname": "R.replace",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1084,
                1108
            ],
            "filename": "replace.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014455",
                "name": "module.exports",
                "type": "Identifier",
                "value": "replace",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "reverse.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014463",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                127
            ],
            "filename": "reverse.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014469",
                "name": "_isString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isString",
        "longname": "_isString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */",
        "meta": {
            "range": [
                738,
                907
            ],
            "filename": "reverse.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014475",
                "name": "reverse",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list or string with the elements or characters in reverse\norder.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a]",
                "value": "[a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String",
                "value": "String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "String"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array",
                        "String"
                    ]
                }
            }
        ],
        "examples": [
            "R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n     R.reverse([1, 2]);     //=> [2, 1]\n     R.reverse([1]);        //=> [1]\n     R.reverse([]);         //=> []\n\n     R.reverse('abc');      //=> 'cba'\n     R.reverse('ab');       //=> 'ba'\n     R.reverse('a');        //=> 'a'\n     R.reverse('');         //=> ''"
        ],
        "name": "reverse",
        "longname": "R.reverse",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                910,
                934
            ],
            "filename": "reverse.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014514",
                "name": "module.exports",
                "type": "Identifier",
                "value": "reverse",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "scan.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014522",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "scan.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014528",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                196
            ],
            "filename": "scan.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014534",
                "name": "_xscan",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xscan",
        "longname": "_xscan",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce, R.mapAccum\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */",
        "meta": {
            "range": [
                1008,
                1290
            ],
            "filename": "scan.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014540",
                "name": "scan",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Scan is similar to [`reduce`](#reduce), but returns a list of successively\nreduced values from the left.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b) -> a) -> a -> [b] -> [a]",
                "value": "((a, b) -> a) -> a -> [b] -> [a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]",
                "value": "R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The iterator function. Receives two values, the accumulator and the\n       current element from the array",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The accumulator value.",
                "name": "acc"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A list of all intermediately reduced values."
            }
        ],
        "see": [
            "R.reduce, R.mapAccum"
        ],
        "examples": [
            "const numbers = [1, 2, 3, 4];\n     const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]"
        ],
        "name": "scan",
        "longname": "R.scan",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1115,
                1122
            ],
            "filename": "scan.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014555",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1130,
                1147
            ],
            "filename": "scan.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014559",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1155,
                1169
            ],
            "filename": "scan.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014565",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[\"acc\"]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1198,
                1222
            ],
            "filename": "scan.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014575",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1228,
                1249
            ],
            "filename": "scan.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014584",
                "name": "result[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "acc",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1255,
                1263
            ],
            "filename": "scan.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014592",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1293,
                1314
            ],
            "filename": "scan.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014598",
                "name": "module.exports",
                "type": "Identifier",
                "value": "scan",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "sequence.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014606",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                104
            ],
            "filename": "sequence.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014612",
                "name": "ap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "ap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                111,
                150
            ],
            "filename": "sequence.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014618",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                157,
                204
            ],
            "filename": "sequence.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014624",
                "name": "prepend",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "prepend",
        "longname": "prepend",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                211,
                266
            ],
            "filename": "sequence.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014630",
                "name": "reduceRight",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduceRight",
        "longname": "reduceRight",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                273,
                332
            ],
            "filename": "sequence.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014636",
                "name": "identity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "identity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `\"fantasy-land/traverse\"` or the `traverse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig fantasy-land/of :: TypeRep f => f ~> a -> f a\n * @sig (Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Object|Function} TypeRepresentative with an `of` or `fantasy-land/of` method\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of(Array), Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of(Array), Nothing());       //=> [Nothing()]\n */",
        "meta": {
            "range": [
                1402,
                1951
            ],
            "filename": "sequence.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014642",
                "name": "sequence",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\nof [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\nApplicative of Traversable.\n\nDispatches to the `\"fantasy-land/traverse\"` or the `traverse` method of the second argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "fantasy-land/of :: TypeRep f => f ~> a -> f a",
                "value": "fantasy-land/of :: TypeRep f => f ~> a -> f a"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)",
                "value": "(Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)",
                "value": "(Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object",
                        "function"
                    ]
                },
                "description": "with an `of` or `fantasy-land/of` method",
                "name": "TypeRepresentative"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "traversable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.traverse"
        ],
        "examples": [
            "R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n\n     R.sequence(R.of(Array), Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n     R.sequence(R.of(Array), Nothing());       //=> [Nothing()]"
        ],
        "name": "sequence",
        "longname": "R.sequence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1477,
                1587
            ],
            "filename": "sequence.js",
            "lineno": 55,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014652",
                "name": "of",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "of",
        "longname": "<anonymous>~of",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1595,
                1636
            ],
            "filename": "sequence.js",
            "lineno": 56,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014676",
                "name": "TypeRep",
                "type": "ObjectExpression",
                "value": "{\"undefined\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "TypeRep",
        "longname": "<anonymous>~TypeRep",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1611,
                1632
            ],
            "filename": "sequence.js",
            "lineno": 57,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014679",
                "name": "\"fantasy-land/of\"",
                "type": "Identifier",
                "value": "of"
            }
        },
        "undocumented": true,
        "name": "\"fantasy-land/of\"",
        "longname": "<anonymous>~TypeRep.\"fantasy-land/of\"",
        "kind": "member",
        "memberof": "<anonymous>~TypeRep",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1954,
                1979
            ],
            "filename": "sequence.js",
            "lineno": 64,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014727",
                "name": "module.exports",
                "type": "Identifier",
                "value": "sequence",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "set.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014735",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "set.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014741",
                "name": "always",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "always",
        "longname": "always",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                160
            ],
            "filename": "set.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014747",
                "name": "over",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "over",
        "longname": "over",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.view, R.over, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */",
        "meta": {
            "range": [
                767,
                859
            ],
            "filename": "set.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014753",
                "name": "set",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the result of \"setting\" the portion of the given data structure\nfocused by the given lens to the given value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Lens s a = Functor f => (a -> f a) -> s -> f s",
                "value": "Lens s a = Functor f => (a -> f a) -> s -> f s"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Lens s a -> a -> s -> s",
                "value": "Lens s a -> a -> s -> s"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Lens"
                    ]
                },
                "name": "lens"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "v"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.view, R.over, R.lens, R.lensIndex, R.lensProp, R.lensPath"
        ],
        "examples": [
            "const xLens = R.lensProp('x');\n\n     R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n     R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}"
        ],
        "name": "set",
        "longname": "R.set",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                862,
                882
            ],
            "filename": "set.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014772",
                "name": "module.exports",
                "type": "Identifier",
                "value": "set",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                76
            ],
            "filename": "slice.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014780",
                "name": "_checkForMethod",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_checkForMethod",
        "longname": "_checkForMethod",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83,
                139
            ],
            "filename": "slice.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014786",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */",
        "meta": {
            "range": [
                1025,
                1204
            ],
            "filename": "slice.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014792",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the elements of the given list or string (or object with a `slice`\nmethod) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n\nDispatches to the `slice` method of the third argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.4",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> [a] -> [a]",
                "value": "Number -> Number -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> String -> String",
                "value": "Number -> Number -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The start index (inclusive).",
                "name": "fromIndex"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The end index (exclusive).",
                "name": "toIndex"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "examples": [
            "R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n     R.slice(0, 3, 'ramda');                     //=> 'ram'"
        ],
        "name": "slice",
        "longname": "R.slice",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1207,
                1229
            ],
            "filename": "slice.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014818",
                "name": "module.exports",
                "type": "Identifier",
                "value": "slice",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "sort.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014826",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} comparator A sorting function :: a -> b -> Int\n * @param {Array} list The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @see R.ascend, R.descend\n * @example\n *\n *      const diff = function(a, b) { return a - b; };\n *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */",
        "meta": {
            "range": [
                853,
                981
            ],
            "filename": "sort.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014832",
                "name": "sort",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a copy of the list, sorted according to the comparator function,\nwhich should accept two values at a time and return a negative number if the\nfirst value is smaller, a positive number if it's larger, and zero if they\nare equal. Please note that this is a **copy** of the list. It does not\nmodify the original.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> Number) -> [a] -> [a]",
                "value": "((a, a) -> Number) -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A sorting function :: a -> b -> Int",
                "name": "comparator"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to sort",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "a new array with its elements sorted by the comparator function."
            }
        ],
        "see": [
            "R.ascend, R.descend"
        ],
        "examples": [
            "const diff = function(a, b) { return a - b; };\n     R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]"
        ],
        "name": "sort",
        "longname": "R.sort",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                984,
                1005
            ],
            "filename": "sort.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014857",
                "name": "module.exports",
                "type": "Identifier",
                "value": "sort",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "sortBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014865",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      const sortByFirstItem = R.sortBy(R.prop(0));\n *      const pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *\n *      const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      const alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      const bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      const clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      const people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */",
        "meta": {
            "range": [
                995,
                1213
            ],
            "filename": "sortBy.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014871",
                "name": "sortBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Sorts the list according to the supplied function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Ord b => (a -> b) -> [a] -> [a]",
                "value": "Ord b => (a -> b) -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to sort.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new list sorted by the keys generated by `fn`."
            }
        ],
        "examples": [
            "const sortByFirstItem = R.sortBy(R.prop(0));\n     const pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n\n     const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n     const alice = {\n       name: 'ALICE',\n       age: 101\n     };\n     const bob = {\n       name: 'Bob',\n       age: -10\n     };\n     const clara = {\n       name: 'clara',\n       age: 314.159\n     };\n     const people = [clara, bob, alice];\n     sortByNameCaseInsensitive(people); //=> [alice, bob, clara]"
        ],
        "name": "sortBy",
        "longname": "R.sortBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1130,
                1140
            ],
            "filename": "sortBy.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014899",
                "name": "aa",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "aa",
        "longname": "<anonymous>~aa",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1150,
                1160
            ],
            "filename": "sortBy.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014905",
                "name": "bb",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "bb",
        "longname": "<anonymous>~bb",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1216,
                1239
            ],
            "filename": "sortBy.js",
            "lineno": 49,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014924",
                "name": "module.exports",
                "type": "Identifier",
                "value": "sortBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "sortWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014932",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [(a, a) -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @see R.ascend, R.descend\n * @example\n *\n *      const alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      const bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      const clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      const people = [clara, bob, alice];\n *      const ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */",
        "meta": {
            "range": [
                907,
                1197
            ],
            "filename": "sortWith.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014938",
                "name": "sortWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Sorts a list according to a list of comparators.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.23.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[(a, a) -> Number] -> [a] -> [a]",
                "value": "[(a, a) -> Number] -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A list of comparator functions.",
                "name": "functions"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to sort.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new list sorted according to the comarator functions."
            }
        ],
        "see": [
            "R.ascend, R.descend"
        ],
        "examples": [
            "const alice = {\n       name: 'alice',\n       age: 40\n     };\n     const bob = {\n       name: 'bob',\n       age: 30\n     };\n     const clara = {\n       name: 'clara',\n       age: 40\n     };\n     const people = [clara, bob, alice];\n     const ageNameSort = R.sortWith([\n       R.descend(R.prop('age')),\n       R.ascend(R.prop('name'))\n     ]);\n     ageNameSort(people); //=> [alice, clara, bob]"
        ],
        "name": "sortWith",
        "longname": "R.sortWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1047,
                1057
            ],
            "filename": "sortWith.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014966",
                "name": "result",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1067,
                1072
            ],
            "filename": "sortWith.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014970",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1126,
                1147
            ],
            "filename": "sortWith.js",
            "lineno": 47,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014985",
                "name": "result",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1155,
                1161
            ],
            "filename": "sortWith.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100014994",
                "name": "i",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1200,
                1225
            ],
            "filename": "sortWith.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015000",
                "name": "module.exports",
                "type": "Identifier",
                "value": "sortWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                51
            ],
            "filename": "split.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015008",
                "name": "invoker",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "invoker",
        "longname": "invoker",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `sep`.\n * @see R.join\n * @example\n *\n *      const pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */",
        "meta": {
            "range": [
                671,
                712
            ],
            "filename": "split.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015014",
                "name": "split",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Splits a string into an array of strings based on the given\nseparator.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "String",
                "value": "String"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(String | RegExp) -> String -> [String]",
                "value": "(String | RegExp) -> String -> [String]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "RegExp"
                    ]
                },
                "description": "The pattern.",
                "name": "sep"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The string to separate into an array.",
                "name": "str"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array of strings from `str` separated by `sep`."
            }
        ],
        "see": [
            "R.join"
        ],
        "examples": [
            "const pathComponents = R.split('/');\n     R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n\n     R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']"
        ],
        "name": "split",
        "longname": "R.split",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                714,
                736
            ],
            "filename": "split.js",
            "lineno": 29,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015021",
                "name": "module.exports",
                "type": "Identifier",
                "value": "split",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "splitAt.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015029",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "splitAt.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015035",
                "name": "length",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "length",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                162
            ],
            "filename": "splitAt.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015041",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Splits a given list or string at a given index.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig Number -> [a] -> [[a], [a]]\n * @sig Number -> String -> [String, String]\n * @param {Number} index The index where the array/string is split.\n * @param {Array|String} array The array/string to be split.\n * @return {Array}\n * @example\n *\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n */",
        "meta": {
            "range": [
                726,
                864
            ],
            "filename": "splitAt.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015047",
                "name": "splitAt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Splits a given list or string at a given index.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> [[a], [a]]",
                "value": "Number -> [a] -> [[a], [a]]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> String -> [String, String]",
                "value": "Number -> String -> [String, String]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The index where the array/string is split.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "String"
                    ]
                },
                "description": "The array/string to be split.",
                "name": "array"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n     R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n     R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']"
        ],
        "name": "splitAt",
        "longname": "R.splitAt",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                867,
                891
            ],
            "filename": "splitAt.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015071",
                "name": "module.exports",
                "type": "Identifier",
                "value": "splitAt",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "splitEvery.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015079",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "splitEvery.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015085",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */",
        "meta": {
            "range": [
                541,
                842
            ],
            "filename": "splitEvery.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015091",
                "name": "splitEvery",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Splits a collection into slices of the specified length.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> [[a]]",
                "value": "Number -> [a] -> [[a]]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> String -> [String]",
                "value": "Number -> String -> [String]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n     R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']"
        ],
        "name": "splitEvery",
        "longname": "R.splitEvery",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                714,
                725
            ],
            "filename": "splitEvery.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015110",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                733,
                740
            ],
            "filename": "splitEvery.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015114",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                800,
                808
            ],
            "filename": "splitEvery.js",
            "lineno": 38,
            "columnno": 27,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015132",
                "name": "idx",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "n",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                845,
                872
            ],
            "filename": "splitEvery.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015139",
                "name": "module.exports",
                "type": "Identifier",
                "value": "splitEvery",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "splitWhen.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015147",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */",
        "meta": {
            "range": [
                781,
                1057
            ],
            "filename": "splitWhen.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015153",
                "name": "splitWhen",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a list and a predicate and returns a pair of lists with the following properties:\n\n - the result of concatenating the two output lists is equivalent to the input list;\n - none of the elements of the first output list satisfies the predicate; and\n - if the second output list is non-empty, its first element satisfies the predicate.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> [[a], [a]]",
                "value": "(a -> Boolean) -> [a] -> [[a], [a]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate that determines where the array is split.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to be split.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]"
        ],
        "name": "splitWhen",
        "longname": "R.splitWhen",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                854,
                861
            ],
            "filename": "splitWhen.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015163",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                869,
                886
            ],
            "filename": "splitWhen.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015167",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                894,
                905
            ],
            "filename": "splitWhen.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015173",
                "name": "prefix",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "prefix",
        "longname": "<anonymous>~prefix",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                982,
                990
            ],
            "filename": "splitWhen.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015197",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1060,
                1086
            ],
            "filename": "splitWhen.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015214",
                "name": "module.exports",
                "type": "Identifier",
                "value": "splitWhen",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "splitWhenever.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015222",
                "name": "_curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curryN",
        "longname": "_curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Splits an array into slices on every occurrence of a value.\n *\n * @func\n * @memberOf R\n * @since v0.26.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhenever(R.equals(2), [1, 2, 3, 2, 4, 5, 2, 6, 7]); //=> [[1], [3], [4, 5], [6, 7]]\n */",
        "meta": {
            "range": [
                502,
                889
            ],
            "filename": "splitWhenever.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015228",
                "name": "splitWhenever",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Splits an array into slices on every occurrence of a value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> [[a]]",
                "value": "(a -> Boolean) -> [a] -> [[a]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The predicate that determines where the array is split.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to be split.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "R.splitWhenever(R.equals(2), [1, 2, 3, 2, 4, 5, 2, 6, 7]); //=> [[1], [3], [4, 5], [6, 7]]"
        ],
        "name": "splitWhenever",
        "longname": "R.splitWhenever",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                590,
                598
            ],
            "filename": "splitWhenever.js",
            "lineno": 24,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015240",
                "name": "acc",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                606,
                615
            ],
            "filename": "splitWhenever.js",
            "lineno": 25,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015244",
                "name": "curr",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "curr",
        "longname": "<anonymous>~curr",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                629,
                634
            ],
            "filename": "splitWhenever.js",
            "lineno": 27,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015249",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                653,
                662
            ],
            "filename": "splitWhenever.js",
            "lineno": 27,
            "columnno": 35,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015257",
                "name": "i",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                851,
                860
            ],
            "filename": "splitWhenever.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015317",
                "name": "curr",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "curr",
        "longname": "<anonymous>~curr",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                892,
                922
            ],
            "filename": "splitWhenever.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015323",
                "name": "module.exports",
                "type": "Identifier",
                "value": "splitWhenever",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "startsWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015331",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "startsWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015337",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                160
            ],
            "filename": "startsWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015343",
                "name": "take",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "take",
        "longname": "take",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Checks if a list starts with the provided sublist.\n *\n * Similarly, checks if a string starts with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @see R.endsWith\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */",
        "meta": {
            "range": [
                760,
                875
            ],
            "filename": "startsWith.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015349",
                "name": "startsWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Checks if a list starts with the provided sublist.\n\nSimilarly, checks if a string starts with the provided substring.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.24.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a] -> Boolean",
                "value": "[a] -> [a] -> Boolean"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String -> Boolean",
                "value": "String -> String -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "prefix"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.endsWith"
        ],
        "examples": [
            "R.startsWith('a', 'abc')                //=> true\n     R.startsWith('b', 'abc')                //=> false\n     R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n     R.startsWith(['b'], ['a', 'b', 'c'])    //=> false"
        ],
        "name": "startsWith",
        "longname": "R.startsWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                878,
                905
            ],
            "filename": "startsWith.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015368",
                "name": "module.exports",
                "type": "Identifier",
                "value": "startsWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "subtract.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015376",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      const minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      const complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */",
        "meta": {
            "range": [
                623,
                716
            ],
            "filename": "subtract.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015382",
                "name": "subtract",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Subtracts its second argument from its first argument.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> Number",
                "value": "Number -> Number -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The first value.",
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The second value.",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The result of `a - b`."
            }
        ],
        "see": [
            "R.add"
        ],
        "examples": [
            "R.subtract(10, 8); //=> 2\n\n     const minus5 = R.subtract(R.__, 5);\n     minus5(17); //=> 12\n\n     const complementaryAngle = R.subtract(90);\n     complementaryAngle(30); //=> 60\n     complementaryAngle(72); //=> 18"
        ],
        "name": "subtract",
        "longname": "R.subtract",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                719,
                744
            ],
            "filename": "subtract.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015400",
                "name": "module.exports",
                "type": "Identifier",
                "value": "subtract",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                43
            ],
            "filename": "sum.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015408",
                "name": "add",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "add",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50,
                95
            ],
            "filename": "sum.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015414",
                "name": "reduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reduce",
        "longname": "reduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */",
        "meta": {
            "range": [
                421,
                455
            ],
            "filename": "sum.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015420",
                "name": "sum",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Adds together all the elements of a list.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Math",
                "value": "Math"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[Number] -> Number",
                "value": "[Number] -> Number"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of numbers",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The sum of all the numbers in the list."
            }
        ],
        "see": [
            "R.reduce"
        ],
        "examples": [
            "R.sum([2,4,6,8,100,1]); //=> 121"
        ],
        "name": "sum",
        "longname": "R.sum",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                457,
                477
            ],
            "filename": "sum.js",
            "lineno": 28,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015427",
                "name": "module.exports",
                "type": "Identifier",
                "value": "sum",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "swap.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015435",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "swap.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015441",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                192
            ],
            "filename": "swap.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015447",
                "name": "_isString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isString",
        "longname": "_isString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                199,
                242
            ],
            "filename": "swap.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015453",
                "name": "clone",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "clone",
        "longname": "clone",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                249,
                544
            ],
            "filename": "swap.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015459",
                "name": "swapObject",
                "type": "FunctionExpression"
            },
            "vars": {
                "copy": "swapObject~copy",
                "properties": "swapObject~properties",
                "tmp": "swapObject~tmp",
                "copy[undefined]": "swapObject~copy.undefined]"
            }
        },
        "undocumented": true,
        "name": "swapObject",
        "longname": "swapObject",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                299,
                314
            ],
            "filename": "swap.js",
            "lineno": 18,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015467",
                "name": "copy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "copy",
        "longname": "swapObject~copy",
        "kind": "member",
        "memberof": "swapObject",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                322,
                367
            ],
            "filename": "swap.js",
            "lineno": 19,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015473",
                "name": "properties",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "properties",
        "longname": "swapObject~properties",
        "kind": "member",
        "memberof": "swapObject",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                446,
                464
            ],
            "filename": "swap.js",
            "lineno": 22,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015494",
                "name": "tmp",
                "type": "MemberExpression",
                "value": "copy[undefined]"
            }
        },
        "undocumented": true,
        "name": "tmp",
        "longname": "swapObject~tmp",
        "kind": "member",
        "memberof": "swapObject",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                470,
                497
            ],
            "filename": "swap.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015500",
                "name": "copy[undefined]",
                "type": "MemberExpression",
                "funcscope": "swapObject",
                "value": "copy[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "swapObject~copy.undefined]",
        "kind": "member",
        "memberof": "swapObject~copy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                503,
                521
            ],
            "filename": "swap.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015508",
                "name": "copy[undefined]",
                "type": "Identifier",
                "funcscope": "swapObject",
                "value": "tmp",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "swapObject~copy.undefined]",
        "kind": "member",
        "memberof": "swapObject~copy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                551,
                1354
            ],
            "filename": "swap.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015516",
                "name": "swapList",
                "type": "FunctionExpression"
            },
            "vars": {
                "length": "swapList~length",
                "result": "swapList~result",
                "positiveIndexA": "swapList~positiveIndexA",
                "positiveIndexB": "swapList~positiveIndexB",
                "positiveMin": "swapList~positiveMin",
                "positiveMax": "swapList~positiveMax"
            }
        },
        "undocumented": true,
        "name": "swapList",
        "longname": "swapList",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                602,
                622
            ],
            "filename": "swap.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015524",
                "name": "length",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "swapList~length",
        "kind": "member",
        "memberof": "swapList",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                630,
                651
            ],
            "filename": "swap.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015530",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "swapList~result",
        "kind": "member",
        "memberof": "swapList",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                659,
                713
            ],
            "filename": "swap.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015537",
                "name": "positiveIndexA",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "positiveIndexA",
        "longname": "swapList~positiveIndexA",
        "kind": "member",
        "memberof": "swapList",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                721,
                775
            ],
            "filename": "swap.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015548",
                "name": "positiveIndexB",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "positiveIndexB",
        "longname": "swapList~positiveIndexB",
        "kind": "member",
        "memberof": "swapList",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                783,
                837
            ],
            "filename": "swap.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015559",
                "name": "positiveMin",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "positiveMin",
        "longname": "swapList~positiveMin",
        "kind": "member",
        "memberof": "swapList",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                845,
                899
            ],
            "filename": "swap.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015568",
                "name": "positiveMax",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "positiveMax",
        "longname": "swapList~positiveMax",
        "kind": "member",
        "memberof": "swapList",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1129,
                1334
            ],
            "filename": "swap.js",
            "lineno": 50,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015606",
                "name": "result",
                "type": "CallExpression",
                "funcscope": "swapList",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "swapList~result",
        "kind": "member",
        "memberof": "swapList",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1361,
                1504
            ],
            "filename": "swap.js",
            "lineno": 54,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015657",
                "name": "swapString",
                "type": "FunctionExpression"
            },
            "vars": {
                "result": "swapString~result"
            }
        },
        "undocumented": true,
        "name": "swapString",
        "longname": "swapString",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1411,
                1447
            ],
            "filename": "swap.js",
            "lineno": 55,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015665",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "swapString~result",
        "kind": "member",
        "memberof": "swapString",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Swap an item, at index `indexA` with another item, at index `indexB`, in an object or a list of elements.\n * A new result will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number|string|Object} indexA The first index\n * @param {Number|string|Object} indexB The second index\n * @param {Array|Object} o Either the object or list which will serve to realise the swap\n * @return {Array|Object} The new object or list reordered\n * @example\n *\n *      R.swap(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['c', 'b', 'a', 'd', 'e', 'f']\n *      R.swap(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'b', 'c', 'd', 'e', 'a']\n *      R.swap('a', 'b', {a: 1, b: 2}); //=> {a: 2, b: 1}\n *      R.swap(0, 2, 'foo'); //=> 'oof'\n */",
        "meta": {
            "range": [
                2354,
                2605
            ],
            "filename": "swap.js",
            "lineno": 80,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015684",
                "name": "swap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Swap an item, at index `indexA` with another item, at index `indexB`, in an object or a list of elements.\nA new result will be created containing the new elements order.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.29.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> Number -> [a] -> [a]",
                "value": "Number -> Number -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number",
                        "string",
                        "Object"
                    ]
                },
                "description": "The first index",
                "name": "indexA"
            },
            {
                "type": {
                    "names": [
                        "Number",
                        "string",
                        "Object"
                    ]
                },
                "description": "The second index",
                "name": "indexB"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "Object"
                    ]
                },
                "description": "Either the object or list which will serve to realise the swap",
                "name": "o"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array",
                        "Object"
                    ]
                },
                "description": "The new object or list reordered"
            }
        ],
        "examples": [
            "R.swap(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['c', 'b', 'a', 'd', 'e', 'f']\n     R.swap(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'b', 'c', 'd', 'e', 'a']\n     R.swap('a', 'b', {a: 1, b: 2}); //=> {a: 2, b: 1}\n     R.swap(0, 2, 'foo'); //=> 'oof'"
        ],
        "name": "swap",
        "longname": "R.swap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2608,
                2629
            ],
            "filename": "swap.js",
            "lineno": 92,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015723",
                "name": "module.exports",
                "type": "Identifier",
                "value": "swap",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "symmetricDifference.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015731",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "symmetricDifference.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015737",
                "name": "concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                172
            ],
            "filename": "symmetricDifference.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015743",
                "name": "difference",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "difference",
        "longname": "difference",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */",
        "meta": {
            "range": [
                766,
                926
            ],
            "filename": "symmetricDifference.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015749",
                "name": "symmetricDifference",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Finds the set (i.e. no duplicates) of all elements contained in the first or\nsecond list, but not both.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[*] -> [*] -> [*]",
                "value": "[*] -> [*] -> [*]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first list.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second list.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The elements in `list1` or `list2`, but not both."
            }
        ],
        "see": [
            "R.symmetricDifferenceWith, R.difference, R.differenceWith"
        ],
        "examples": [
            "R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n     R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]"
        ],
        "name": "symmetricDifference",
        "longname": "R.symmetricDifference",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                929,
                965
            ],
            "filename": "symmetricDifference.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015770",
                "name": "module.exports",
                "type": "Identifier",
                "value": "symmetricDifference",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "symmetricDifferenceWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015778",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "symmetricDifferenceWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015784",
                "name": "concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                180
            ],
            "filename": "symmetricDifferenceWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015790",
                "name": "differenceWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "differenceWith",
        "longname": "differenceWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      const eqA = R.eqBy(R.prop('a'));\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */",
        "meta": {
            "range": [
                1080,
                1274
            ],
            "filename": "symmetricDifferenceWith.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015796",
                "name": "symmetricDifferenceWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Finds the set (i.e. no duplicates) of all elements contained in the first or\nsecond list, but not both. Duplication is determined according to the value\nreturned by applying the supplied predicate to two list elements.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> Boolean) -> [a] -> [a] -> [a]",
                "value": "((a, a) -> Boolean) -> [a] -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate used to test whether two items are equal.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first list.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second list.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The elements in `list1` or `list2`, but not both."
            }
        ],
        "see": [
            "R.symmetricDifference, R.difference, R.differenceWith"
        ],
        "examples": [
            "const eqA = R.eqBy(R.prop('a'));\n     const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n     const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n     R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]"
        ],
        "name": "symmetricDifferenceWith",
        "longname": "R.symmetricDifferenceWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1277,
                1317
            ],
            "filename": "symmetricDifferenceWith.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015820",
                "name": "module.exports",
                "type": "Identifier",
                "value": "symmetricDifferenceWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                76
            ],
            "filename": "tail.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015828",
                "name": "_checkForMethod",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_checkForMethod",
        "longname": "_checkForMethod",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83,
                139
            ],
            "filename": "tail.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015834",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                146,
                189
            ],
            "filename": "tail.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015840",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */",
        "meta": {
            "range": [
                850,
                952
            ],
            "filename": "tail.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015846",
                "name": "tail",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns all but the first element of the given list or string (or object\nwith a `tail` method).\n\nDispatches to the `slice` method of the first argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a]",
                "value": "[a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String",
                "value": "String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.head, R.init, R.last"
        ],
        "examples": [
            "R.tail([1, 2, 3]);  //=> [2, 3]\n     R.tail([1, 2]);     //=> [2]\n     R.tail([1]);        //=> []\n     R.tail([]);         //=> []\n\n     R.tail('abc');  //=> 'bc'\n     R.tail('ab');   //=> 'b'\n     R.tail('a');    //=> ''\n     R.tail('');     //=> ''"
        ],
        "name": "tail",
        "longname": "R.tail",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                955,
                976
            ],
            "filename": "tail.js",
            "lineno": 49,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015858",
                "name": "module.exports",
                "type": "Identifier",
                "value": "tail",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "take.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015866",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "take.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015872",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                196
            ],
            "filename": "take.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015878",
                "name": "_xtake",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xtake",
        "longname": "_xtake",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                203,
                246
            ],
            "filename": "take.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015884",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      const personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      const takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */",
        "meta": {
            "range": [
                1524,
                1671
            ],
            "filename": "take.js",
            "lineno": 61,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015890",
                "name": "take",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the first `n` elements of the given list, string, or\ntransducer/transformer (or object with a `take` method).\n\nDispatches to the `take` method of the second argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> [a]",
                "value": "Number -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> String -> String",
                "value": "Number -> String -> String"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.take(-1, [a, b]) = [a, b]",
                "value": "R.take(-1, [a, b]) = [a, b]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.take(0, [a, b]) = []",
                "value": "R.take(0, [a, b]) = []"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.take(1, [a, b]) = [a]",
                "value": "R.take(1, [a, b]) = [a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.take(2, [a, b]) = [a, b]",
                "value": "R.take(2, [a, b]) = [a, b]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.drop"
        ],
        "examples": [
            "R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     R.take(3, 'ramda');               //=> 'ram'\n\n     const personnel = [\n       'Dave Brubeck',\n       'Paul Desmond',\n       'Eugene Wright',\n       'Joe Morello',\n       'Gerry Mulligan',\n       'Bob Bates',\n       'Joe Dodge',\n       'Ron Crotty'\n     ];\n\n     const takeFive = R.take(5);\n     takeFive(personnel);\n     //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']"
        ],
        "name": "take",
        "longname": "R.take",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1674,
                1695
            ],
            "filename": "take.js",
            "lineno": 69,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015916",
                "name": "module.exports",
                "type": "Identifier",
                "value": "take",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "takeLast.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015924",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "takeLast.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015930",
                "name": "drop",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "drop",
        "longname": "drop",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */",
        "meta": {
            "range": [
                877,
                986
            ],
            "filename": "takeLast.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015936",
                "name": "takeLast",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list containing the last `n` elements of the given list.\nIf `n > list.length`, returns a list of `list.length` elements.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> [a] -> [a]",
                "value": "Number -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> String -> String",
                "value": "Number -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The number of elements to return.",
                "name": "n"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The collection to consider.",
                "name": "xs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "see": [
            "R.dropLast"
        ],
        "examples": [
            "R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n     R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     R.takeLast(3, 'ramda');               //=> 'mda'"
        ],
        "name": "takeLast",
        "longname": "R.takeLast",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                989,
                1014
            ],
            "filename": "takeLast.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015960",
                "name": "module.exports",
                "type": "Identifier",
                "value": "takeLast",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "takeLastWhile.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015968",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                110
            ],
            "filename": "takeLastWhile.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015974",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n *\n *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\n */",
        "meta": {
            "range": [
                959,
                1154
            ],
            "filename": "takeLastWhile.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015980",
                "name": "takeLastWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list containing the last `n` elements of a given list, passing\neach value to the supplied predicate function, and terminating when the\npredicate function returns `false`. Excludes the element that caused the\npredicate function to fail. The predicate function is passed one argument:\n*(value)*.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> [a]",
                "value": "(a -> Boolean) -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> String -> String",
                "value": "(a -> Boolean) -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function called per iteration.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The collection to iterate over.",
                "name": "xs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new array."
            }
        ],
        "see": [
            "R.dropLastWhile, R.addIndex"
        ],
        "examples": [
            "const isNotOne = x => x !== 1;\n\n     R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n\n     R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'"
        ],
        "name": "takeLastWhile",
        "longname": "R.takeLastWhile",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1036,
                1055
            ],
            "filename": "takeLastWhile.js",
            "lineno": 38,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100015990",
                "name": "idx",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1098,
                1106
            ],
            "filename": "takeLastWhile.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016009",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1157,
                1187
            ],
            "filename": "takeLastWhile.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016021",
                "name": "module.exports",
                "type": "Identifier",
                "value": "takeLastWhile",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "takeWhile.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016029",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "takeWhile.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016035",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                206
            ],
            "filename": "takeWhile.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016041",
                "name": "_xtakeWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xtakeWhile",
        "longname": "_xtakeWhile",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                213,
                256
            ],
            "filename": "takeWhile.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016047",
                "name": "slice",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "slice",
        "longname": "slice",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * Dispatches to the `takeWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropWhile, R.transduce, R.addIndex\n * @example\n *\n *      const isNotFour = x => x !== 4;\n *\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n *\n *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'\n */",
        "meta": {
            "range": [
                1266,
                1512
            ],
            "filename": "takeWhile.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016053",
                "name": "takeWhile",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list containing the first `n` elements of a given list,\npassing each value to the supplied predicate function, and terminating when\nthe predicate function returns `false`. Excludes the element that caused the\npredicate function to fail. The predicate function is passed one argument:\n*(value)*.\n\nDispatches to the `takeWhile` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> [a] -> [a]",
                "value": "(a -> Boolean) -> [a] -> [a]"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> String -> String",
                "value": "(a -> Boolean) -> String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function called per iteration.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The collection to iterate over.",
                "name": "xs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A new array."
            }
        ],
        "see": [
            "R.dropWhile, R.transduce, R.addIndex"
        ],
        "examples": [
            "const isNotFour = x => x !== 4;\n\n     R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n\n     R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'"
        ],
        "name": "takeWhile",
        "longname": "R.takeWhile",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1392,
                1399
            ],
            "filename": "takeWhile.js",
            "lineno": 52,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016068",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1407,
                1422
            ],
            "filename": "takeWhile.js",
            "lineno": 53,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016072",
                "name": "len",
                "type": "MemberExpression",
                "value": "xs.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1466,
                1474
            ],
            "filename": "takeWhile.js",
            "lineno": 56,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016089",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1515,
                1541
            ],
            "filename": "takeWhile.js",
            "lineno": 62,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016099",
                "name": "module.exports",
                "type": "Identifier",
                "value": "takeWhile",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "tap.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016107",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "tap.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016113",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                194
            ],
            "filename": "tap.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016119",
                "name": "_xtap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xtap",
        "longname": "_xtap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      const sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = (f(a), a)\n */",
        "meta": {
            "range": [
                754,
                868
            ],
            "filename": "tap.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016125",
                "name": "tap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Runs the given function with the supplied object, then returns the object.\n\nActs as a transducer if a transformer is given as second parameter.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> *) -> a -> a",
                "value": "(a -> *) -> a -> a"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.tap(f, a) = (f(a), a)",
                "value": "R.tap(f, a) = (f(a), a)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call with `x`. The return value of `fn` will be thrown away.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "`x`."
            }
        ],
        "examples": [
            "const sayX = x => console.log('x is ' + x);\n     R.tap(sayX, 100); //=> 100\n     // logs 'x is 100'"
        ],
        "name": "tap",
        "longname": "R.tap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                871,
                891
            ],
            "filename": "tap.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016145",
                "name": "module.exports",
                "type": "Identifier",
                "value": "tap",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                70
            ],
            "filename": "test.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016153",
                "name": "_cloneRegExp",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_cloneRegExp",
        "longname": "_cloneRegExp",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77,
                133
            ],
            "filename": "test.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016159",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                200
            ],
            "filename": "test.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016165",
                "name": "_isRegExp",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isRegExp",
        "longname": "_isRegExp",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                207,
                256
            ],
            "filename": "test.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016171",
                "name": "toString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "toString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */",
        "meta": {
            "range": [
                627,
                884
            ],
            "filename": "test.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016177",
                "name": "test",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Determines whether a given string matches a given regular expression.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.12.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "String",
                "value": "String"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "RegExp -> String -> Boolean",
                "value": "RegExp -> String -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "name": "pattern"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "name": "str"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.match"
        ],
        "examples": [
            "R.test(/^x/, 'xyz'); //=> true\n     R.test(/^y/, 'xyz'); //=> false"
        ],
        "name": "test",
        "longname": "R.test",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                887,
                908
            ],
            "filename": "test.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016209",
                "name": "module.exports",
                "type": "Identifier",
                "value": "test",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                49
            ],
            "filename": "thunkify.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016217",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56,
                112
            ],
            "filename": "thunkify.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016223",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a thunk out of a function. A thunk delays a calculation until\n * its result is needed, providing lazy evaluation of arguments.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)\n * @param {Function} fn A function to wrap in a thunk\n * @return {Function} Expects arguments for `fn` and returns a new function\n *  that, when called, applies those arguments to `fn`.\n * @see R.partial, R.partialRight\n * @example\n *\n *      R.thunkify(R.identity)(42)(); //=> 42\n *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42\n */",
        "meta": {
            "range": [
                730,
                955
            ],
            "filename": "thunkify.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016229",
                "name": "thunkify",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a thunk out of a function. A thunk delays a calculation until\nits result is needed, providing lazy evaluation of arguments.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.26.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)",
                "value": "((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to wrap in a thunk",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Expects arguments for `fn` and returns a new function\n that, when called, applies those arguments to `fn`."
            }
        ],
        "see": [
            "R.partial, R.partialRight"
        ],
        "examples": [
            "R.thunkify(R.identity)(42)(); //=> 42\n     R.thunkify((a, b) => a + b)(25, 17)(); //=> 42"
        ],
        "name": "thunkify",
        "longname": "R.thunkify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                847,
                865
            ],
            "filename": "thunkify.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016247",
                "name": "fnArgs",
                "type": "Identifier",
                "value": "arguments"
            }
        },
        "undocumented": true,
        "name": "fnArgs",
        "longname": "<anonymous>~fnArgs",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                958,
                983
            ],
            "filename": "thunkify.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016262",
                "name": "module.exports",
                "type": "Identifier",
                "value": "thunkify",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "times.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016270",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */",
        "meta": {
            "range": [
                858,
                1156
            ],
            "filename": "times.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016276",
                "name": "times",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Calls an input function `n` times, returning an array containing the results\nof those function calls.\n\n`fn` is passed one argument: The current value of `n`, which begins at `0`\nand is gradually incremented to `n - 1`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.3",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(Number -> a) -> Number -> [a]",
                "value": "(Number -> a) -> Number -> [a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.times(f, 0) = []",
                "value": "R.times(f, 0) = []"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.times(f, 1) = [f(0)]",
                "value": "R.times(f, 1) = [f(0)]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.times(f, 2) = [f(0), f(1)]",
                "value": "R.times(f, 2) = [f(0), f(1)]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to invoke. Passed one argument, the current value of `n`.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "A value between `0` and `n - 1`. Increments after each function call.",
                "name": "n"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array containing the return values of all calls to `fn`."
            }
        ],
        "see": [
            "R.repeat"
        ],
        "examples": [
            "R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]"
        ],
        "name": "times",
        "longname": "R.times",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                918,
                933
            ],
            "filename": "times.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016286",
                "name": "len",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                941,
                948
            ],
            "filename": "times.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016292",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                956,
                960
            ],
            "filename": "times.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016296",
                "name": "list"
            }
        },
        "undocumented": true,
        "name": "list",
        "longname": "<anonymous>~list",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1062,
                1071
            ],
            "filename": "times.js",
            "lineno": 40,
            "columnno": 2,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016312",
                "name": "list",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "list",
        "longname": "<anonymous>~list",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1124,
                1132
            ],
            "filename": "times.js",
            "lineno": 44,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016329",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1159,
                1181
            ],
            "filename": "times.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016335",
                "name": "module.exports",
                "type": "Identifier",
                "value": "times",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                51
            ],
            "filename": "toLower.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016343",
                "name": "invoker",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "invoker",
        "longname": "invoker",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */",
        "meta": {
            "range": [
                367,
                416
            ],
            "filename": "toLower.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016349",
                "name": "toLower",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "The lower case version of a string.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "String",
                "value": "String"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String",
                "value": "String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The string to lower case.",
                "name": "str"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The lower case version of `str`."
            }
        ],
        "see": [
            "R.toUpper"
        ],
        "examples": [
            "R.toLower('XYZ'); //=> 'xyz'"
        ],
        "name": "toLower",
        "longname": "R.toLower",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                418,
                442
            ],
            "filename": "toLower.js",
            "lineno": 24,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016356",
                "name": "module.exports",
                "type": "Identifier",
                "value": "toLower",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "toPairs.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016364",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "toPairs.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016370",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs, R.keys, R.values\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */",
        "meta": {
            "range": [
                710,
                914
            ],
            "filename": "toPairs.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016376",
                "name": "toPairs",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Converts an object into an array of key, value arrays. Only the object's\nown properties are used.\nNote that the order of the output array is not guaranteed to be consistent\nacross different JS platforms.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.4.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{String: *} -> [[String,*]]",
                "value": "{String: *} -> [[String,*]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to extract from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of key, value arrays from the object's own properties."
            }
        ],
        "see": [
            "R.fromPairs, R.keys, R.values"
        ],
        "examples": [
            "R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]"
        ],
        "name": "toPairs",
        "longname": "R.toPairs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                772,
                782
            ],
            "filename": "toPairs.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016385",
                "name": "pairs",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "pairs",
        "longname": "<anonymous>~pairs",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                796,
                800
            ],
            "filename": "toPairs.js",
            "lineno": 33,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016390",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                844,
                883
            ],
            "filename": "toPairs.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016401",
                "name": "pairs[undefined]",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[\"prop\",\"obj[undefined]\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~pairs.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~pairs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                917,
                941
            ],
            "filename": "toPairs.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016415",
                "name": "module.exports",
                "type": "Identifier",
                "value": "toPairs",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "toPairsIn.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016423",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */",
        "meta": {
            "range": [
                741,
                914
            ],
            "filename": "toPairsIn.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016429",
                "name": "toPairsIn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Converts an object into an array of key, value arrays. The object's own\nproperties and prototype properties are used. Note that the order of the\noutput array is not guaranteed to be consistent across different JS\nplatforms.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.4.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{String: *} -> [[String,*]]",
                "value": "{String: *} -> [[String,*]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to extract from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of key, value arrays from the object's own\n        and prototype properties."
            }
        ],
        "examples": [
            "const F = function() { this.x = 'X'; };\n     F.prototype.y = 'Y';\n     const f = new F();\n     R.toPairsIn(f); //=> [['x','X'], ['y','Y']]"
        ],
        "name": "toPairsIn",
        "longname": "R.toPairsIn",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                807,
                817
            ],
            "filename": "toPairsIn.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016438",
                "name": "pairs",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "pairs",
        "longname": "<anonymous>~pairs",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                831,
                835
            ],
            "filename": "toPairsIn.js",
            "lineno": 32,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016443",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                850,
                889
            ],
            "filename": "toPairsIn.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016448",
                "name": "pairs[undefined]",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[\"prop\",\"obj[undefined]\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~pairs.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~pairs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                917,
                943
            ],
            "filename": "toPairsIn.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016462",
                "name": "module.exports",
                "type": "Identifier",
                "value": "toPairsIn",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "toString.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016470",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                127
            ],
            "filename": "toString.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016476",
                "name": "_toString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_toString",
        "longname": "_toString",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */",
        "meta": {
            "range": [
                1360,
                1449
            ],
            "filename": "toString.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016482",
                "name": "toString",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns the string representation of the given value. `eval`'ing the output\nshould result in a value equivalent to the input value. Many of the built-in\n`toString` methods do not satisfy this requirement.\n\nIf the given value is an `[object Object]` with a `toString` method other\nthan `Object.prototype.toString`, this method is invoked with no arguments\nto produce the return value. This means user-defined constructor functions\ncan provide a suitable `toString` method. For example:\n\n    function Point(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    Point.prototype.toString = function() {\n      return 'new Point(' + this.x + ', ' + this.y + ')';\n    };\n\n    R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "String",
                "value": "String"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "* -> String",
                "value": "* -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                }
            }
        ],
        "examples": [
            "R.toString(42); //=> '42'\n     R.toString('abc'); //=> '\"abc\"'\n     R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n     R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n     R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'"
        ],
        "name": "toString",
        "longname": "R.toString",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1452,
                1477
            ],
            "filename": "toString.js",
            "lineno": 52,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016496",
                "name": "module.exports",
                "type": "Identifier",
                "value": "toString",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                51
            ],
            "filename": "toUpper.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016504",
                "name": "invoker",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "invoker",
        "longname": "invoker",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */",
        "meta": {
            "range": [
                367,
                416
            ],
            "filename": "toUpper.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016510",
                "name": "toUpper",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "The upper case version of a string.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.9.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "String",
                "value": "String"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String",
                "value": "String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The string to upper case.",
                "name": "str"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The upper case version of `str`."
            }
        ],
        "see": [
            "R.toLower"
        ],
        "examples": [
            "R.toUpper('abc'); //=> 'ABC'"
        ],
        "name": "toUpper",
        "longname": "R.toUpper",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                418,
                442
            ],
            "filename": "toUpper.js",
            "lineno": 24,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016517",
                "name": "module.exports",
                "type": "Identifier",
                "value": "toUpper",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                62
            ],
            "filename": "transduce.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016525",
                "name": "_xReduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xReduce",
        "longname": "_xReduce",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69,
                123
            ],
            "filename": "transduce.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016531",
                "name": "_xwrap",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xwrap",
        "longname": "_xwrap",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                130,
                175
            ],
            "filename": "transduce.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016537",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      const isOdd = (x) => x % 2 !== 0;\n *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */",
        "meta": {
            "range": [
                2500,
                2656
            ],
            "filename": "transduce.js",
            "lineno": 61,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016543",
                "name": "transduce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Initializes a transducer using supplied iterator function. Returns a single\nitem by iterating through the list, successively calling the transformed\niterator function and passing it an accumulator value and the current value\nfrom the array, and then passing the result to the next call.\n\nThe iterator function receives two values: *(acc, value)*. It will be\nwrapped as a transformer to initialize the transducer. A transformer can be\npassed directly in place of an iterator function. In both cases, iteration\nmay be stopped early with the [`R.reduced`](#reduced) function.\n\nA transducer is a function that accepts a transformer and returns a\ntransformer and can be composed directly.\n\nA transformer is an object that provides a 2-arity reducing iterator\nfunction, step, 0-arity initial value function, init, and 1-arity result\nextraction function, result. The step function is used as the iterator\nfunction in reduce. The result function is used to convert the final\naccumulator into the return type and in most cases is\n[`R.identity`](#identity). The init function can be used to provide an\ninitial accumulator, but is ignored by transduce.\n\nThe iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.12.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(c -> c) -> ((a, b) -> a) -> a -> [b] -> a",
                "value": "(c -> c) -> ((a, b) -> a) -> a -> [b] -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The transducer function. Receives a transformer and returns a transformer.",
                "name": "xf"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The iterator function. Receives two values, the accumulator and the\n       current element from the array. Wrapped as transformer, if necessary, and used to\n       initialize the transducer",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The initial accumulator value.",
                "name": "acc"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list to iterate over.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The final, accumulated value."
            }
        ],
        "see": [
            "R.reduce, R.reduced, R.into"
        ],
        "examples": [
            "const numbers = [1, 2, 3, 4];\n     const transducer = R.compose(R.map(R.add(1)), R.take(2));\n     R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n\n     const isOdd = (x) => x % 2 !== 0;\n     const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n     R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]"
        ],
        "name": "transduce",
        "longname": "R.transduce",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2658,
                2684
            ],
            "filename": "transduce.js",
            "lineno": 66,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016572",
                "name": "module.exports",
                "type": "Identifier",
                "value": "transduce",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "transpose.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016580",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Transposes the rows and columns of a 2D list.\n * When passed a list of `n` lists of length `x`,\n * returns a list of `x` lists of length `n`.\n *\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [[a]] -> [[a]]\n * @param {Array} list A 2D list\n * @return {Array} A 2D list\n * @example\n *\n *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n *\n *      // If some of the rows are shorter than the following rows, their elements are skipped:\n *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n * @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n */",
        "meta": {
            "range": [
                910,
                1299
            ],
            "filename": "transpose.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016586",
                "name": "transpose",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Transposes the rows and columns of a 2D list.\nWhen passed a list of `n` lists of length `x`,\nreturns a list of `x` lists of length `n`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[[a]] -> [[a]]",
                "value": "[[a]] -> [[a]]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.transpose([[a], [b], [c]]) = [a, b, c]",
                "value": "R.transpose([[a], [b], [c]]) = [a, b, c]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]",
                "value": "R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.transpose([[a, b], [c]]) = [[a, c], [b]]",
                "value": "R.transpose([[a, b], [c]]) = [[a, c], [b]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A 2D list",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A 2D list"
            }
        ],
        "examples": [
            "R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n     R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n\n     // If some of the rows are shorter than the following rows, their elements are skipped:\n     R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]"
        ],
        "name": "transpose",
        "longname": "R.transpose",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                982,
                987
            ],
            "filename": "transpose.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016595",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                995,
                1006
            ],
            "filename": "transpose.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016599",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1050,
                1074
            ],
            "filename": "transpose.js",
            "lineno": 37,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016610",
                "name": "innerlist",
                "type": "MemberExpression",
                "value": "outerlist[undefined]"
            }
        },
        "undocumented": true,
        "name": "innerlist",
        "longname": "<anonymous>~innerlist",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1084,
                1089
            ],
            "filename": "transpose.js",
            "lineno": 38,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016616",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "<anonymous>~j",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1181,
                1195
            ],
            "filename": "transpose.js",
            "lineno": 42,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016635",
                "name": "result[undefined]",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1248,
                1254
            ],
            "filename": "transpose.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016651",
                "name": "j",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "<anonymous>~j",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1267,
                1273
            ],
            "filename": "transpose.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016655",
                "name": "i",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1302,
                1328
            ],
            "filename": "transpose.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016661",
                "name": "module.exports",
                "type": "Identifier",
                "value": "transpose",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "traverse.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016669",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                106
            ],
            "filename": "traverse.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016675",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                113,
                162
            ],
            "filename": "traverse.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016681",
                "name": "sequence",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "sequence",
        "longname": "sequence",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `traverse` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig fantasy-land/of :: TypeRep f => f ~> a -> f a\n * @sig (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n * @sig (Applicative f, Traversable t) => (b -> f b) -> (a -> f b) -> t a -> f (t b)\n * @param {Object|Function} TypeRepresentative with an `of` or `fantasy-land/of` method\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Maybe.Nothing` if the given divisor is `0`\n *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\n *\n *      // Using a Type Representative\n *      R.traverse(Maybe, safeDiv(10), Right(4)); //=> Just(Right(2.5))\n *      R.traverse(Maybe, safeDiv(10), Right(0)); //=> Nothing\n *      R.traverse(Maybe, safeDiv(10), Left(\"X\")); //=> Just(Left(\"X\"))\n */",
        "meta": {
            "range": [
                1591,
                2073
            ],
            "filename": "traverse.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016687",
                "name": "traverse",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\nfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\nthen uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\ninto an Applicative of Traversable.\n\nDispatches to the `traverse` method of the third argument, if present.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "fantasy-land/of :: TypeRep f => f ~> a -> f a",
                "value": "fantasy-land/of :: TypeRep f => f ~> a -> f a"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)",
                "value": "(Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(Applicative f, Traversable t) => (b -> f b) -> (a -> f b) -> t a -> f (t b)",
                "value": "(Applicative f, Traversable t) => (b -> f b) -> (a -> f b) -> t a -> f (t b)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object",
                        "function"
                    ]
                },
                "description": "with an `of` or `fantasy-land/of` method",
                "name": "TypeRepresentative"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "traversable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.sequence"
        ],
        "examples": [
            "// Returns `Maybe.Nothing` if the given divisor is `0`\n     const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\n\n     R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\n     R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\n\n     // Using a Type Representative\n     R.traverse(Maybe, safeDiv(10), Right(4)); //=> Just(Right(2.5))\n     R.traverse(Maybe, safeDiv(10), Right(0)); //=> Nothing\n     R.traverse(Maybe, safeDiv(10), Left(\"X\")); //=> Just(Left(\"X\"))"
        ],
        "name": "traverse",
        "longname": "R.traverse",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1669,
                1779
            ],
            "filename": "traverse.js",
            "lineno": 50,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016698",
                "name": "of",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "of",
        "longname": "<anonymous>~of",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1787,
                1828
            ],
            "filename": "traverse.js",
            "lineno": 51,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016722",
                "name": "TypeRep",
                "type": "ObjectExpression",
                "value": "{\"undefined\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "TypeRep",
        "longname": "<anonymous>~TypeRep",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1803,
                1824
            ],
            "filename": "traverse.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016725",
                "name": "\"fantasy-land/of\"",
                "type": "Identifier",
                "value": "of"
            }
        },
        "undocumented": true,
        "name": "\"fantasy-land/of\"",
        "longname": "<anonymous>~TypeRep.\"fantasy-land/of\"",
        "kind": "member",
        "memberof": "<anonymous>~TypeRep",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2076,
                2101
            ],
            "filename": "traverse.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016762",
                "name": "module.exports",
                "type": "Identifier",
                "value": "traverse",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "trim.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016770",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                220
            ],
            "filename": "trim.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016776",
                "name": "ws",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ws",
        "longname": "ws",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                226,
                246
            ],
            "filename": "trim.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016784",
                "name": "zeroWidth",
                "type": "Literal",
                "value": "​"
            }
        },
        "undocumented": true,
        "name": "zeroWidth",
        "longname": "zeroWidth",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                252,
                310
            ],
            "filename": "trim.js",
            "lineno": 7,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016788",
                "name": "hasProtoTrim",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "hasProtoTrim",
        "longname": "hasProtoTrim",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */",
        "meta": {
            "range": [
                687,
                1055
            ],
            "filename": "trim.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016799",
                "name": "trim",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "description": "Removes (strips) whitespace from both ends of the string.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.6.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "String",
                "value": "String"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> String",
                "value": "String -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The string to trim.",
                "name": "str"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Trimmed version of `str`."
            }
        ],
        "examples": [
            "R.trim('   xyz  '); //=> 'xyz'\n     R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']"
        ],
        "name": "trim",
        "longname": "R.trim",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                822,
                872
            ],
            "filename": "trim.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016822",
                "name": "beginRx",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "beginRx",
        "longname": "<anonymous>~beginRx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                880,
                928
            ],
            "filename": "trim.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016836",
                "name": "endRx",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "endRx",
        "longname": "<anonymous>~endRx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1057,
                1078
            ],
            "filename": "trim.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016873",
                "name": "module.exports",
                "type": "Identifier",
                "value": "trim",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                58
            ],
            "filename": "tryCatch.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016881",
                "name": "_arity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_arity",
        "longname": "_arity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "tryCatch.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016887",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                128,
                184
            ],
            "filename": "tryCatch.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016893",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send them to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(() => { throw 'foo'}, R.always('caught'))('bar') // =>\n *      'caught'\n *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []\n *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}\n */",
        "meta": {
            "range": [
                1377,
                1635
            ],
            "filename": "tryCatch.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016899",
                "name": "tryCatch",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "`tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\nfunction evaluates the `tryer`; if it does not throw, it simply returns the\nresult. If the `tryer` *does* throw, the returned function evaluates the\n`catcher` function and returns its result. Note that for effective\ncomposition with this function, both the `tryer` and `catcher` functions\nmust return the same type of results.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.20.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(...x -> a) -> ((e, ...x) -> a) -> (...x -> a)",
                "value": "(...x -> a) -> ((e, ...x) -> a) -> (...x -> a)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function that may throw.",
                "name": "tryer"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function that will be evaluated if `tryer` throws.",
                "name": "catcher"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new function that will catch exceptions and send them to the catcher."
            }
        ],
        "examples": [
            "R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n     R.tryCatch(() => { throw 'foo'}, R.always('caught'))('bar') // =>\n     'caught'\n     R.tryCatch(R.times(R.identity), R.always([]))('s') // => []\n     R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}"
        ],
        "name": "tryCatch",
        "longname": "R.tryCatch",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1638,
                1663
            ],
            "filename": "tryCatch.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016938",
                "name": "module.exports",
                "type": "Identifier",
                "value": "tryCatch",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "type.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016946",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig * -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(async () => {}); //=> \"AsyncFunction\"\n *      R.type(undefined); //=> \"Undefined\"\n */",
        "meta": {
            "range": [
                859,
                1028
            ],
            "filename": "type.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016952",
                "name": "type",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Gives a single-word string description of the (native) type of a value,\nreturning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\nattempt to distinguish user Object types any further, reporting them all as\n'Object'.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Type",
                "value": "Type"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "* -> String",
                "value": "* -> String"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to test",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                }
            }
        ],
        "examples": [
            "R.type({}); //=> \"Object\"\n     R.type(1); //=> \"Number\"\n     R.type(false); //=> \"Boolean\"\n     R.type('s'); //=> \"String\"\n     R.type(null); //=> \"Null\"\n     R.type([]); //=> \"Array\"\n     R.type(/[A-z]/); //=> \"RegExp\"\n     R.type(() => {}); //=> \"Function\"\n     R.type(async () => {}); //=> \"AsyncFunction\"\n     R.type(undefined); //=> \"Undefined\""
        ],
        "name": "type",
        "longname": "R.type",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1031,
                1052
            ],
            "filename": "type.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016987",
                "name": "module.exports",
                "type": "Identifier",
                "value": "type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "unapply.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100016995",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */",
        "meta": {
            "range": [
                739,
                881
            ],
            "filename": "unapply.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017001",
                "name": "unapply",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a function `fn`, which takes a single array argument, and returns a\nfunction which:\n\n  - takes any number of positional arguments;\n  - passes these arguments to `fn` as an array; and\n  - returns the result.\n\nIn other words, `R.unapply` derives a variadic function from a function which\ntakes an array. `R.unapply` is the inverse of [`R.apply`](#apply).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.8.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "([*...] -> a) -> (*... -> a)",
                "value": "([*...] -> a) -> (*... -> a)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.unapply(f)(a, b) = f([a, b])",
                "value": "R.unapply(f)(a, b) = f([a, b])"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "see": [
            "R.apply"
        ],
        "examples": [
            "R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'"
        ],
        "name": "unapply",
        "longname": "R.unapply",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                884,
                908
            ],
            "filename": "unapply.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017026",
                "name": "module.exports",
                "type": "Identifier",
                "value": "unapply",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "unary.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017034",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "unary.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017040",
                "name": "nAry",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nAry",
        "longname": "nAry",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> (a -> z)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      const takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */",
        "meta": {
            "range": [
                1003,
                1078
            ],
            "filename": "unary.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017046",
                "name": "unary",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Wraps a function of any arity (including nullary) in a function that accepts\nexactly 1 parameter. Any extraneous parameters will not be passed to the\nsupplied function.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> b -> c -> ... -> z) -> (a -> z)",
                "value": "(a -> b -> c -> ... -> z) -> (a -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.unary(f)(a, b, c) = f(a)",
                "value": "R.unary(f)(a, b, c) = f(a)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to wrap.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new function wrapping `fn`. The new function is guaranteed to be of\n        arity 1."
            }
        ],
        "see": [
            "R.binary, R.nAry"
        ],
        "examples": [
            "const takesTwoArgs = function(a, b) {\n       return [a, b];\n     };\n     takesTwoArgs.length; //=> 2\n     takesTwoArgs(1, 2); //=> [1, 2]\n\n     const takesOneArg = R.unary(takesTwoArgs);\n     takesOneArg.length; //=> 1\n     // Only 1 argument is passed to the wrapped function\n     takesOneArg(1, 2); //=> [1, undefined]"
        ],
        "name": "unary",
        "longname": "R.unary",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1081,
                1103
            ],
            "filename": "unary.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017060",
                "name": "module.exports",
                "type": "Identifier",
                "value": "unary",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "uncurryN.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017068",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "uncurryN.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017074",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a function of arity `n` from a (manually) curried function.\n * Note that, the returned function is actually a ramda style\n * curryied function, which can accept one or more arguments in each\n * function calling.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b -> c ... -> z) -> ((a -> b -> c ...) -> z)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry, R.curryN\n * @example\n *\n *      const addFour = a => b => c => d => a + b + c + d;\n *\n *      const uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */",
        "meta": {
            "range": [
                843,
                1333
            ],
            "filename": "uncurryN.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017080",
                "name": "uncurryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a function of arity `n` from a (manually) curried function.\nNote that, the returned function is actually a ramda style\ncurryied function, which can accept one or more arguments in each\nfunction calling.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> (a -> b -> c ... -> z) -> ((a -> b -> c ...) -> z)",
                "value": "Number -> (a -> b -> c ... -> z) -> ((a -> b -> c ...) -> z)"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The arity for the returned function.",
                "name": "length"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to uncurry.",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A new function."
            }
        ],
        "see": [
            "R.curry, R.curryN"
        ],
        "examples": [
            "const addFour = a => b => c => d => a + b + c + d;\n\n     const uncurriedAddFour = R.uncurryN(4, addFour);\n     uncurriedAddFour(1, 2, 3, 4); //=> 10"
        ],
        "name": "uncurryN",
        "longname": "R.uncurryN",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                952,
                968
            ],
            "filename": "uncurryN.js",
            "lineno": 36,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017096",
                "name": "currentDepth",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "currentDepth",
        "longname": "<anonymous>~currentDepth",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                978,
                988
            ],
            "filename": "uncurryN.js",
            "lineno": 37,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017100",
                "name": "value",
                "type": "Identifier",
                "value": "fn"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                998,
                1005
            ],
            "filename": "uncurryN.js",
            "lineno": 38,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017104",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1015,
                1021
            ],
            "filename": "uncurryN.js",
            "lineno": 39,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017108",
                "name": "endIdx"
            }
        },
        "undocumented": true,
        "name": "endIdx",
        "longname": "<anonymous>~endIdx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1097,
                1168
            ],
            "filename": "uncurryN.js",
            "lineno": 42,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017121",
                "name": "endIdx",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "endIdx",
        "longname": "<anonymous>~endIdx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1176,
                1253
            ],
            "filename": "uncurryN.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017136",
                "name": "value",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1261,
                1278
            ],
            "filename": "uncurryN.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017155",
                "name": "currentDepth",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "currentDepth",
        "longname": "<anonymous>~currentDepth",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1286,
                1298
            ],
            "filename": "uncurryN.js",
            "lineno": 45,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017159",
                "name": "idx",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "endIdx",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1336,
                1361
            ],
            "filename": "uncurryN.js",
            "lineno": 52,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017165",
                "name": "module.exports",
                "type": "Identifier",
                "value": "uncurryN",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "unfold.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017173",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      const f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */",
        "meta": {
            "range": [
                1096,
                1315
            ],
            "filename": "unfold.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017179",
                "name": "unfold",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Builds a list from a seed value. Accepts an iterator function, which returns\neither false to stop iteration or an array of length 2 containing the value\nto add to the resulting list and the seed to be used in the next call to the\niterator function.\n\nThe iterator function receives one argument: *(seed)*.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.10.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> [b]) -> * -> [b]",
                "value": "(a -> [b]) -> * -> [b]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]",
                "value": "R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The iterator function. receives one argument, `seed`, and returns\n       either false to quit iteration or an array of length two to proceed. The element\n       at index 0 of this array will be added to the resulting array, and the element\n       at index 1 will be passed to the next call to `fn`.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The seed value.",
                "name": "seed"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The final list."
            }
        ],
        "examples": [
            "const f = n => n > 50 ? false : [-n, n + 10];\n     R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]"
        ],
        "name": "unfold",
        "longname": "R.unfold",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1161,
                1176
            ],
            "filename": "unfold.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017189",
                "name": "pair",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "pair",
        "longname": "<anonymous>~pair",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1184,
                1195
            ],
            "filename": "unfold.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017195",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1234,
                1265
            ],
            "filename": "unfold.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017206",
                "name": "result[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "pair[0]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1271,
                1289
            ],
            "filename": "unfold.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017216",
                "name": "pair",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pair",
        "longname": "R.pair.pair",
        "kind": "member",
        "memberof": "R.pair",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1318,
                1341
            ],
            "filename": "unfold.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017226",
                "name": "module.exports",
                "type": "Identifier",
                "value": "unfold",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "union.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017234",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "union.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017240",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                130,
                177
            ],
            "filename": "union.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017246",
                "name": "compose",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "compose",
        "longname": "compose",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                184,
                225
            ],
            "filename": "union.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017252",
                "name": "uniq",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "uniq",
        "longname": "uniq",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */",
        "meta": {
            "range": [
                672,
                740
            ],
            "filename": "union.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017258",
                "name": "union",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Combines two lists into a set (i.e. no duplicates) composed of the elements\nof each list.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[*] -> [*] -> [*]",
                "value": "[*] -> [*] -> [*]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first list.",
                "name": "as"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second list.",
                "name": "bs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first and second lists concatenated, with\n        duplicates removed."
            }
        ],
        "examples": [
            "R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]"
        ],
        "name": "union",
        "longname": "R.union",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                743,
                765
            ],
            "filename": "union.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017267",
                "name": "module.exports",
                "type": "Identifier",
                "value": "union",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "unionWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017275",
                "name": "_concat",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_concat",
        "longname": "_concat",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                123
            ],
            "filename": "unionWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017281",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                130,
                179
            ],
            "filename": "unionWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017287",
                "name": "uniqWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "uniqWith",
        "longname": "uniqWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements. If an element exists\n * in both lists, the first element from the first list will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      const l1 = [{a: 1}, {a: 2}];\n *      const l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */",
        "meta": {
            "range": [
                1057,
                1182
            ],
            "filename": "unionWith.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017293",
                "name": "unionWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Combines two lists into a set (i.e. no duplicates) composed of the elements\nof each list. Duplication is determined according to the value returned by\napplying the supplied predicate to two list elements. If an element exists\nin both lists, the first element from the first list will be used.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Relation",
                "value": "Relation"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> Boolean) -> [*] -> [*] -> [*]",
                "value": "((a, a) -> Boolean) -> [*] -> [*] -> [*]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate used to test whether two items are equal.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first list.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second list.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first and second lists concatenated, with\n        duplicates removed."
            }
        ],
        "see": [
            "R.union"
        ],
        "examples": [
            "const l1 = [{a: 1}, {a: 2}];\n     const l2 = [{a: 1}, {a: 4}];\n     R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]"
        ],
        "name": "unionWith",
        "longname": "R.unionWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1185,
                1211
            ],
            "filename": "unionWith.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017312",
                "name": "module.exports",
                "type": "Identifier",
                "value": "unionWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                53
            ],
            "filename": "uniq.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017320",
                "name": "identity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "identity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60,
                105
            ],
            "filename": "uniq.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017326",
                "name": "uniqBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "uniqBy",
        "longname": "uniqBy",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */",
        "meta": {
            "range": [
                577,
                614
            ],
            "filename": "uniq.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017332",
                "name": "uniq",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list containing only one copy of each element in the original\nlist. [`R.equals`](#equals) is used to determine equality.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a]",
                "value": "[a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of unique items."
            }
        ],
        "examples": [
            "R.uniq([1, 1, 2, 1]); //=> [1, 2]\n     R.uniq([1, '1']);     //=> [1, '1']\n     R.uniq([[42], [42]]); //=> [[42]]"
        ],
        "name": "uniq",
        "longname": "R.uniq",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                616,
                637
            ],
            "filename": "uniq.js",
            "lineno": 30,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017338",
                "name": "module.exports",
                "type": "Identifier",
                "value": "uniq",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                54
            ],
            "filename": "uniqBy.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017346",
                "name": "_Set",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_Set",
        "longname": "_Set",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61,
                117
            ],
            "filename": "uniqBy.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017352",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                192
            ],
            "filename": "uniqBy.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017358",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                199,
                257
            ],
            "filename": "uniqBy.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017364",
                "name": "_xuniqBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xuniqBy",
        "longname": "_xuniqBy",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */",
        "meta": {
            "range": [
                1014,
                1378
            ],
            "filename": "uniqBy.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017370",
                "name": "uniqBy",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list containing only one copy of each element in the original\nlist, based upon the value returned by applying the supplied function to\neach list element. Prefers the first item if the supplied function produces\nthe same value on two items. [`R.equals`](#equals) is used for comparison.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> b) -> [a] -> [a]",
                "value": "(a -> b) -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function used to produce a value to use during comparisons.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of unique items."
            }
        ],
        "examples": [
            "R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]"
        ],
        "name": "uniqBy",
        "longname": "R.uniqBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1116,
                1132
            ],
            "filename": "uniqBy.js",
            "lineno": 43,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017383",
                "name": "set",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "<anonymous>~set",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1140,
                1151
            ],
            "filename": "uniqBy.js",
            "lineno": 44,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017388",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1159,
                1166
            ],
            "filename": "uniqBy.js",
            "lineno": 45,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017392",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1174,
                1185
            ],
            "filename": "uniqBy.js",
            "lineno": 46,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017396",
                "name": "appliedItem"
            }
        },
        "undocumented": true,
        "name": "appliedItem",
        "longname": "<anonymous>~appliedItem",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1187,
                1191
            ],
            "filename": "uniqBy.js",
            "lineno": 46,
            "columnno": 19,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017398",
                "name": "item"
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1228,
                1244
            ],
            "filename": "uniqBy.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017408",
                "name": "item",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "list[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1250,
                1272
            ],
            "filename": "uniqBy.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017414",
                "name": "appliedItem",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "appliedItem",
        "longname": "<anonymous>~appliedItem",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1343,
                1351
            ],
            "filename": "uniqBy.js",
            "lineno": 56,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017433",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1381,
                1404
            ],
            "filename": "uniqBy.js",
            "lineno": 62,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017439",
                "name": "module.exports",
                "type": "Identifier",
                "value": "uniqBy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "uniqWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017447",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                135
            ],
            "filename": "uniqWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017453",
                "name": "_dispatchable",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_dispatchable",
        "longname": "_dispatchable",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                210
            ],
            "filename": "uniqWith.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017459",
                "name": "_includesWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_includesWith",
        "longname": "_includesWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                217,
                279
            ],
            "filename": "uniqWith.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017465",
                "name": "_xuniqWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_xuniqWith",
        "longname": "_xuniqWith",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      const strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */",
        "meta": {
            "range": [
                1163,
                1510
            ],
            "filename": "uniqWith.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017471",
                "name": "uniqWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list containing only one copy of each element in the original\nlist, based upon the value returned by applying the supplied predicate to\ntwo list elements. Prefers the first item if two items compare equal based\non the predicate.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, a) -> Boolean) -> [a] -> [a]",
                "value": "((a, a) -> Boolean) -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate used to test whether two items are equal.",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to consider.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of unique items."
            }
        ],
        "examples": [
            "const strEq = R.eqBy(String);\n     R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n     R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n     R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n     R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']"
        ],
        "name": "uniqWith",
        "longname": "R.uniqWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1271,
                1278
            ],
            "filename": "uniqWith.js",
            "lineno": 47,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017484",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1286,
                1303
            ],
            "filename": "uniqWith.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017488",
                "name": "len",
                "type": "MemberExpression",
                "value": "list.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1311,
                1322
            ],
            "filename": "uniqWith.js",
            "lineno": 49,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017494",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1330,
                1334
            ],
            "filename": "uniqWith.js",
            "lineno": 50,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017498",
                "name": "item"
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1363,
                1379
            ],
            "filename": "uniqWith.js",
            "lineno": 53,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017506",
                "name": "item",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "list[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1434,
                1462
            ],
            "filename": "uniqWith.js",
            "lineno": 56,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017520",
                "name": "result[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "item",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1475,
                1483
            ],
            "filename": "uniqWith.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017528",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1513,
                1538
            ],
            "filename": "uniqWith.js",
            "lineno": 65,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017534",
                "name": "module.exports",
                "type": "Identifier",
                "value": "uniqWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "unless.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017542",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> b) -> a -> a | b\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when, R.cond\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */",
        "meta": {
            "range": [
                1033,
                1145
            ],
            "filename": "unless.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017548",
                "name": "unless",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Tests the final argument by passing it to the given predicate function. If\nthe predicate is not satisfied, the function will return the result of\ncalling the `whenFalseFn` function with the same argument. If the predicate\nis satisfied, the argument is returned as is.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.18.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> (a -> b) -> a -> a | b",
                "value": "(a -> Boolean) -> (a -> b) -> a -> a | b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate function",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to invoke when the `pred` evaluates\n                              to a falsy value.",
                "name": "whenFalseFn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "An object to test with the `pred` function and\n                              pass to `whenFalseFn` if necessary.",
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "Either `x` or the result of applying `x` to `whenFalseFn`."
            }
        ],
        "see": [
            "R.ifElse, R.when, R.cond"
        ],
        "examples": [
            "let safeInc = R.unless(R.isNil, R.inc);\n     safeInc(null); //=> null\n     safeInc(1); //=> 2"
        ],
        "name": "unless",
        "longname": "R.unless",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1148,
                1171
            ],
            "filename": "unless.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017568",
                "name": "module.exports",
                "type": "Identifier",
                "value": "unless",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                64
            ],
            "filename": "unnest.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017576",
                "name": "_identity",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_identity",
        "longname": "_identity",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                114
            ],
            "filename": "unnest.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017582",
                "name": "chain",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "chain",
        "longname": "chain",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain c => c (c a) -> c a\n * @param {*} list\n * @return {*}\n * @see R.flatten, R.chain\n * @example\n *\n *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n */",
        "meta": {
            "range": [
                569,
                608
            ],
            "filename": "unnest.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017588",
                "name": "unnest",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\nany [Chain](https://github.com/fantasyland/fantasy-land#chain).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Chain c => c (c a) -> c a",
                "value": "Chain c => c (c a) -> c a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.flatten, R.chain"
        ],
        "examples": [
            "R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n     R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]"
        ],
        "name": "unnest",
        "longname": "R.unnest",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                610,
                633
            ],
            "filename": "unnest.js",
            "lineno": 30,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017594",
                "name": "module.exports",
                "type": "Identifier",
                "value": "unnest",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "until.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017602",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */",
        "meta": {
            "range": [
                704,
                849
            ],
            "filename": "until.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017608",
                "name": "until",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a predicate, a transformation function, and an initial value,\nand returns a value of the same type as the initial value.\nIt does so by applying the transformation until the predicate is satisfied,\nat which point it returns the satisfactory value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.20.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> (a -> a) -> a -> a",
                "value": "(a -> Boolean) -> (a -> a) -> a -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate function",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The iterator function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "Initial value",
                "name": "init"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "Final value that satisfies predicate"
            }
        ],
        "examples": [
            "R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128"
        ],
        "name": "until",
        "longname": "R.until",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                773,
                783
            ],
            "filename": "until.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017619",
                "name": "val",
                "type": "Identifier",
                "value": "init"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                813,
                826
            ],
            "filename": "until.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017629",
                "name": "val",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                852,
                874
            ],
            "filename": "until.js",
            "lineno": 37,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017637",
                "name": "module.exports",
                "type": "Identifier",
                "value": "until",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "unwind.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017645",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                125
            ],
            "filename": "unwind.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017651",
                "name": "_isArray",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_isArray",
        "longname": "_isArray",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                132,
                182
            ],
            "filename": "unwind.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017657",
                "name": "_map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_map",
        "longname": "_map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                189,
                243
            ],
            "filename": "unwind.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017663",
                "name": "_assoc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_assoc",
        "longname": "_assoc",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n *\n * Deconstructs an array field from the input documents to output a document for each element.\n * Each output document is the input document with the value of the array field replaced by the element.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig String -> {k: [v]} -> [{k: v}]\n * @param {String} key The key to determine which property of the object should be unwind\n * @param {Object} object The object containing list under property named as key which is to unwind\n * @return {List} A new list of object containing the value of input key having list replaced by each element in the object.\n * @example\n *\n * R.unwind('hobbies', {\n *   name: 'alice',\n *   hobbies: ['Golf', 'Hacking'],\n *   colors: ['red', 'green'],\n * });\n * // [\n * //   { name: 'alice', hobbies: 'Golf', colors: ['red', 'green'] },\n * //   { name: 'alice', hobbies: 'Hacking', colors: ['red', 'green'] }\n * // ]\n */",
        "meta": {
            "range": [
                1172,
                1532
            ],
            "filename": "unwind.js",
            "lineno": 43,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017669",
                "name": "unwind",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Deconstructs an array field from the input documents to output a document for each element.\nEach output document is the input document with the value of the array field replaced by the element.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "String -> {k: [v]} -> [{k: v}]",
                "value": "String -> {k: [v]} -> [{k: v}]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The key to determine which property of the object should be unwind",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object containing list under property named as key which is to unwind",
                "name": "object"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "List"
                    ]
                },
                "description": "A new list of object containing the value of input key having list replaced by each element in the object."
            }
        ],
        "examples": [
            "R.unwind('hobbies', {\n  name: 'alice',\n  hobbies: ['Golf', 'Hacking'],\n  colors: ['red', 'green'],\n});\n// [\n//   { name: 'alice', hobbies: 'Golf', colors: ['red', 'green'] },\n//   { name: 'alice', hobbies: 'Hacking', colors: ['red', 'green'] }\n// ]"
        ],
        "name": "unwind",
        "longname": "R.unwind",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1535,
                1558
            ],
            "filename": "unwind.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017708",
                "name": "module.exports",
                "type": "Identifier",
                "value": "unwind",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "update.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017716",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "update.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017722",
                "name": "adjust",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "adjust",
        "longname": "adjust",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                164
            ],
            "filename": "update.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017728",
                "name": "always",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "always",
        "longname": "always",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']\n *      R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */",
        "meta": {
            "range": [
                962,
                1066
            ],
            "filename": "update.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017734",
                "name": "update",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new copy of the array with the element at the provided index\nreplaced with the given value.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Number -> a -> [a] -> [a]",
                "value": "Number -> a -> [a] -> [a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.update(-1, a, [b, c]) = [b, a]",
                "value": "R.update(-1, a, [b, c]) = [b, a]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.update(0, a, [b, c]) = [a, c]",
                "value": "R.update(0, a, [b, c]) = [a, c]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.update(1, a, [b, c]) = [b, a]",
                "value": "R.update(1, a, [b, c]) = [b, a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The index to update.",
                "name": "idx"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "The value to exist at the given index of the returned array.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "Array",
                        "Arguments"
                    ]
                },
                "description": "The source array-like object to be updated.",
                "name": "list"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A copy of `list` with the value at index `idx` replaced with `x`."
            }
        ],
        "see": [
            "R.adjust"
        ],
        "examples": [
            "R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']\n     R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']"
        ],
        "name": "update",
        "longname": "R.update",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1069,
                1092
            ],
            "filename": "update.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017753",
                "name": "module.exports",
                "type": "Identifier",
                "value": "update",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "useWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017761",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "useWith.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017767",
                "name": "curryN",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curryN",
        "longname": "curryN",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */",
        "meta": {
            "range": [
                1422,
                1813
            ],
            "filename": "useWith.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017773",
                "name": "useWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Accepts a function `fn` and a list of transformer functions and returns a\nnew curried function. When the new function is invoked, it calls the\nfunction `fn` with parameters consisting of the result of calling each\nsupplied handler on successive arguments to the new function.\n\nIf more arguments are passed to the returned function than transformer\nfunctions, those arguments are passed directly to `fn` as additional\nparameters. If you expect additional arguments that don't need to be\ntransformed, although you can ignore them, it's best to pass an identity\nfunction so that the new function reports the correct arity.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Function",
                "value": "Function"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)",
                "value": "((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.useWith(f, [g, h])(a, b) = f(g(a), h(b))",
                "value": "R.useWith(f, [g, h])(a, b) = f(g(a), h(b))"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to wrap.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "A list of transformer functions",
                "name": "transformers"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The wrapped function."
            }
        ],
        "see": [
            "R.converge"
        ],
        "examples": [
            "R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n     R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n     R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n     R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32"
        ],
        "name": "useWith",
        "longname": "R.useWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1550,
                1559
            ],
            "filename": "useWith.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017791",
                "name": "args",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1569,
                1576
            ],
            "filename": "useWith.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017795",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1688,
                1696
            ],
            "filename": "useWith.js",
            "lineno": 48,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017821",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1816,
                1840
            ],
            "filename": "useWith.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017847",
                "name": "module.exports",
                "type": "Identifier",
                "value": "useWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "values.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017855",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                108
            ],
            "filename": "values.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017861",
                "name": "keys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "keys",
        "longname": "keys",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys, R.toPairs\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */",
        "meta": {
            "range": [
                621,
                850
            ],
            "filename": "values.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017867",
                "name": "values",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a list of all the enumerable own properties of the supplied object.\nNote that the order of the output array is not guaranteed across different\nJS platforms.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{k: v} -> [v]",
                "value": "{k: v} -> [v]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to extract values from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of the values of the object's own properties."
            }
        ],
        "see": [
            "R.valuesIn, R.keys, R.toPairs"
        ],
        "examples": [
            "R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]"
        ],
        "name": "values",
        "longname": "R.values",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                681,
                698
            ],
            "filename": "values.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017876",
                "name": "props",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "props",
        "longname": "<anonymous>~props",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                706,
                724
            ],
            "filename": "values.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017882",
                "name": "len",
                "type": "MemberExpression",
                "value": "props.length"
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                732,
                741
            ],
            "filename": "values.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017888",
                "name": "vals",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "vals",
        "longname": "<anonymous>~vals",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                749,
                756
            ],
            "filename": "values.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017892",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                785,
                812
            ],
            "filename": "values.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017901",
                "name": "vals[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "obj[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~vals.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~vals",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                818,
                826
            ],
            "filename": "values.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017911",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                853,
                876
            ],
            "filename": "values.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017917",
                "name": "module.exports",
                "type": "Identifier",
                "value": "values",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "valuesIn.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017925",
                "name": "_curry1",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry1",
        "longname": "_curry1",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a list of all the properties, including prototype properties, of the\n * supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own and prototype properties.\n * @see R.values, R.keysIn\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.valuesIn(f); //=> ['X', 'Y']\n */",
        "meta": {
            "range": [
                704,
                863
            ],
            "filename": "valuesIn.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017931",
                "name": "valuesIn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a list of all the properties, including prototype properties, of the\nsupplied object.\nNote that the order of the output array is not guaranteed to be consistent\nacross different JS platforms.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.2.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{k: v} -> [v]",
                "value": "{k: v} -> [v]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object to extract values from",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array of the values of the object's own and prototype properties."
            }
        ],
        "see": [
            "R.values, R.keysIn"
        ],
        "examples": [
            "const F = function() { this.x = 'X'; };\n     F.prototype.y = 'Y';\n     const f = new F();\n     R.valuesIn(f); //=> ['X', 'Y']"
        ],
        "name": "valuesIn",
        "longname": "R.valuesIn",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                768,
                772
            ],
            "filename": "valuesIn.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017940",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                780,
                787
            ],
            "filename": "valuesIn.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017943",
                "name": "vs",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "vs",
        "longname": "<anonymous>~vs",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                816,
                841
            ],
            "filename": "valuesIn.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017951",
                "name": "vs[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "obj[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~vs.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~vs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                866,
                891
            ],
            "filename": "valuesIn.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017963",
                "name": "module.exports",
                "type": "Identifier",
                "value": "valuesIn",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "view.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017971",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                146,
                263
            ],
            "filename": "view.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017977",
                "name": "Const",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Const",
        "longname": "Const",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                184,
                192
            ],
            "filename": "view.js",
            "lineno": 8,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017984",
                "name": "value",
                "type": "Identifier",
                "value": "x"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                198,
                256
            ],
            "filename": "view.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017986",
                "name": "\"fantasy-land/map\"",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "\"fantasy-land/map\"",
        "longname": "\"fantasy-land/map\"",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.set, R.over, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */",
        "meta": {
            "range": [
                856,
                1084
            ],
            "filename": "view.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100017992",
                "name": "view",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a \"view\" of the given data structure, determined by the given lens.\nThe lens's focus determines which portion of the data structure is visible.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.16.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "typedefn",
                "title": "typedefn",
                "text": "Lens s a = Functor f => (a -> f a) -> s -> f s",
                "value": "Lens s a = Functor f => (a -> f a) -> s -> f s"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "Lens s a -> s -> a",
                "value": "Lens s a -> s -> a"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Lens"
                    ]
                },
                "name": "lens"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "see": [
            "R.set, R.over, R.lens, R.lensIndex, R.lensProp, R.lensPath"
        ],
        "examples": [
            "const xLens = R.lensProp('x');\n\n     R.view(xLens, {x: 1, y: 2});  //=> 1\n     R.view(xLens, {x: 4, y: 2});  //=> 4"
        ],
        "name": "view",
        "longname": "R.view",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1087,
                1108
            ],
            "filename": "view.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018010",
                "name": "module.exports",
                "type": "Identifier",
                "value": "view",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "when.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018018",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `whenTrueFn` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> b) -> a -> a | b\n * @param {Function} pred       A predicate function\n * @param {Function} whenTrueFn A function to invoke when the `condition`\n *                              evaluates to a truthy value.\n * @param {*}        x          An object to test with the `pred` function and\n *                              pass to `whenTrueFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n * @see R.ifElse, R.unless, R.cond\n * @example\n *\n *      // truncate :: String -> String\n *      const truncate = R.when(\n *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n *        R.pipe(R.take(10), R.append('…'), R.join(''))\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789…'\n */",
        "meta": {
            "range": [
                1220,
                1326
            ],
            "filename": "when.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018024",
                "name": "when",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Tests the final argument by passing it to the given predicate function. If\nthe predicate is satisfied, the function will return the result of calling\nthe `whenTrueFn` function with the same argument. If the predicate is not\nsatisfied, the argument is returned as is.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.18.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "(a -> Boolean) -> (a -> b) -> a -> a | b",
                "value": "(a -> Boolean) -> (a -> b) -> a -> a | b"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A predicate function",
                "name": "pred"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to invoke when the `condition`\n                             evaluates to a truthy value.",
                "name": "whenTrueFn"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "An object to test with the `pred` function and\n                             pass to `whenTrueFn` if necessary.",
                "name": "x"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "Either `x` or the result of applying `x` to `whenTrueFn`."
            }
        ],
        "see": [
            "R.ifElse, R.unless, R.cond"
        ],
        "examples": [
            "// truncate :: String -> String\n     const truncate = R.when(\n       R.propSatisfies(R.gt(R.__, 10), 'length'),\n       R.pipe(R.take(10), R.append('…'), R.join(''))\n     );\n     truncate('12345');         //=> '12345'\n     truncate('0123456789ABC'); //=> '0123456789…'"
        ],
        "name": "when",
        "longname": "R.when",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1329,
                1350
            ],
            "filename": "when.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018044",
                "name": "module.exports",
                "type": "Identifier",
                "value": "when",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "where.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018052",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "where.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018058",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.whereEq\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */",
        "meta": {
            "range": [
                1362,
                1557
            ],
            "filename": "where.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018064",
                "name": "where",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a spec object and a test object; returns true if the test satisfies\nthe spec. Each of the spec's own properties must be a predicate function.\nEach predicate is applied to the value of the corresponding property of the\ntest object. `where` returns true if all the predicates return true, false\notherwise.\n\n`where` is well suited to declaratively expressing constraints for other\nfunctions such as [`filter`](#filter) and [`find`](#find).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{String: (* -> Boolean)} -> {String: *} -> Boolean",
                "value": "{String: (* -> Boolean)} -> {String: *} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "spec"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "testObj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.propSatisfies, R.whereEq"
        ],
        "examples": [
            "// pred :: Object -> Boolean\n     const pred = R.where({\n       a: R.equals('foo'),\n       b: R.complement(R.equals('bar')),\n       x: R.gt(R.__, 10),\n       y: R.lt(R.__, 20)\n     });\n\n     pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false"
        ],
        "name": "where",
        "longname": "R.where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1435,
                1439
            ],
            "filename": "where.js",
            "lineno": 48,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018075",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1560,
                1582
            ],
            "filename": "where.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018099",
                "name": "module.exports",
                "type": "Identifier",
                "value": "where",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "whereAny.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018107",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "whereAny.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018113",
                "name": "_has",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_has",
        "longname": "_has",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a spec object and a test object; each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `whereAny` returns true if at least one of the predicates return true,\n * false otherwise.\n *\n * `whereAny` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.whereAny({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('xxx')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 8, y: 34}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 9, y: 21}); //=> false\n *      pred({a: 'bar', b: 'xxx', x: 10, y: 20}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 10, y: 20}); //=> true\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> true\n */",
        "meta": {
            "range": [
                1330,
                1530
            ],
            "filename": "whereAny.js",
            "lineno": 44,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018119",
                "name": "whereAny",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a spec object and a test object; each of the spec's own properties must be a predicate function.\nEach predicate is applied to the value of the corresponding property of the\ntest object. `whereAny` returns true if at least one of the predicates return true,\nfalse otherwise.\n\n`whereAny` is well suited to declaratively expressing constraints for other\nfunctions such as [`filter`](#filter) and [`find`](#find).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.28.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{String: (* -> Boolean)} -> {String: *} -> Boolean",
                "value": "{String: (* -> Boolean)} -> {String: *} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "spec"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "testObj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.propSatisfies, R.where"
        ],
        "examples": [
            "// pred :: Object -> Boolean\n     const pred = R.whereAny({\n       a: R.equals('foo'),\n       b: R.complement(R.equals('xxx')),\n       x: R.gt(R.__, 10),\n       y: R.lt(R.__, 20)\n     });\n\n     pred({a: 'foo', b: 'xxx', x: 8, y: 34}); //=> true\n     pred({a: 'xxx', b: 'xxx', x: 9, y: 21}); //=> false\n     pred({a: 'bar', b: 'xxx', x: 10, y: 20}); //=> false\n     pred({a: 'foo', b: 'bar', x: 10, y: 20}); //=> true\n     pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> true"
        ],
        "name": "whereAny",
        "longname": "R.whereAny",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1409,
                1413
            ],
            "filename": "whereAny.js",
            "lineno": 47,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018130",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1533,
                1558
            ],
            "filename": "whereAny.js",
            "lineno": 56,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018153",
                "name": "module.exports",
                "type": "Identifier",
                "value": "whereAny",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "whereEq.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018161",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                112
            ],
            "filename": "whereEq.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018167",
                "name": "equals",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "equals",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                158
            ],
            "filename": "whereEq.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018173",
                "name": "map",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "map",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                165,
                208
            ],
            "filename": "whereEq.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018179",
                "name": "where",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "where",
        "longname": "where",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propEq, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */",
        "meta": {
            "range": [
                1094,
                1206
            ],
            "filename": "whereEq.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018185",
                "name": "whereEq",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Takes a spec object and a test object; returns true if the test satisfies\nthe spec, false otherwise. An object satisfies the spec if, for each of the\nspec's own properties, accessing that property of the object gives the same\nvalue (in [`R.equals`](#equals) terms) as accessing that property of the\nspec.\n\n`whereEq` is a specialization of [`where`](#where).",
        "kind": "function",
        "memberof": "R",
        "since": "v0.14.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Object",
                "value": "Object"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "{String: *} -> {String: *} -> Boolean",
                "value": "{String: *} -> {String: *} -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "spec"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "testObj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "see": [
            "R.propEq, R.where"
        ],
        "examples": [
            "// pred :: Object -> Boolean\n     const pred = R.whereEq({a: 1, b: 2});\n\n     pred({a: 1});              //=> false\n     pred({a: 1, b: 2});        //=> true\n     pred({a: 1, b: 2, c: 3});  //=> true\n     pred({a: 1, b: 1});        //=> false"
        ],
        "name": "whereEq",
        "longname": "R.whereEq",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1209,
                1233
            ],
            "filename": "whereEq.js",
            "lineno": 52,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018203",
                "name": "module.exports",
                "type": "Identifier",
                "value": "whereEq",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "without.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018211",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67,
                117
            ],
            "filename": "without.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018217",
                "name": "_Set",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_Set",
        "longname": "_Set",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                169
            ],
            "filename": "without.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018223",
                "name": "reject",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reject",
        "longname": "reject",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference, R.remove\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */",
        "meta": {
            "range": [
                756,
                974
            ],
            "filename": "without.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018229",
                "name": "without",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Returns a new list without values in the first argument.\n[`R.equals`](#equals) is used to determine equality.\n\nActs as a transducer if a transformer is given in list position.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.19.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [a] -> [a]",
                "value": "[a] -> [a] -> [a]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The values to be removed from `list2`.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array to remove values from.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The new array without values in `list1`."
            }
        ],
        "see": [
            "R.transduce, R.difference, R.remove"
        ],
        "examples": [
            "R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]"
        ],
        "name": "without",
        "longname": "R.without",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                823,
                844
            ],
            "filename": "without.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018239",
                "name": "toRemove",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "toRemove",
        "longname": "<anonymous>~toRemove",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                858,
                863
            ],
            "filename": "without.js",
            "lineno": 38,
            "columnno": 11,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018245",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                880,
                886
            ],
            "filename": "without.js",
            "lineno": 38,
            "columnno": 33,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018253",
                "name": "i",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                977,
                1001
            ],
            "filename": "without.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018277",
                "name": "module.exports",
                "type": "Identifier",
                "value": "without",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "xor.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018285",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Exclusive disjunction logical operation.\n * Returns `true` if one of the arguments is truthy and the other is falsy.\n * Otherwise, it returns `false`.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Logic\n * @sig a -> b -> Boolean\n * @param {Any} a\n * @param {Any} b\n * @return {Boolean} true if one of the arguments is truthy and the other is falsy\n * @see R.or, R.and\n * @example\n *\n *      R.xor(true, true); //=> false\n *      R.xor(true, false); //=> true\n *      R.xor(false, true); //=> true\n *      R.xor(false, false); //=> false\n */",
        "meta": {
            "range": [
                628,
                706
            ],
            "filename": "xor.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018291",
                "name": "xor",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Exclusive disjunction logical operation.\nReturns `true` if one of the arguments is truthy and the other is falsy.\nOtherwise, it returns `false`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.27.1",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "Logic",
                "value": "Logic"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "a -> b -> Boolean",
                "value": "a -> b -> Boolean"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                },
                "name": "a"
            },
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                },
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "true if one of the arguments is truthy and the other is falsy"
            }
        ],
        "see": [
            "R.or, R.and"
        ],
        "examples": [
            "R.xor(true, true); //=> false\n     R.xor(true, false); //=> true\n     R.xor(false, true); //=> true\n     R.xor(false, false); //=> false"
        ],
        "name": "xor",
        "longname": "R.xor",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                709,
                729
            ],
            "filename": "xor.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018309",
                "name": "module.exports",
                "type": "Identifier",
                "value": "xor",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "xprod.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018317",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new list out of the two supplied by creating each possible pair\n * from the lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The list made by combining each possible pair from\n *         `as` and `bs` into pairs (`[a, b]`).\n * @example\n *\n *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n */",
        "meta": {
            "range": [
                623,
                989
            ],
            "filename": "xprod.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018323",
                "name": "xprod",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new list out of the two supplied by creating each possible pair\nfrom the lists.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [b] -> [[a,b]]",
                "value": "[a] -> [b] -> [[a,b]]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]",
                "value": "R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first list.",
                "name": "as"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second list.",
                "name": "bs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list made by combining each possible pair from\n        `as` and `bs` into pairs (`[a, b]`)."
            }
        ],
        "examples": [
            "R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]"
        ],
        "name": "xprod",
        "longname": "R.xprod",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                742,
                749
            ],
            "filename": "xprod.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018333",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                757,
                772
            ],
            "filename": "xprod.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018337",
                "name": "ilen",
                "type": "MemberExpression",
                "value": "a.length"
            }
        },
        "undocumented": true,
        "name": "ilen",
        "longname": "<anonymous>~ilen",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                780,
                781
            ],
            "filename": "xprod.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018343",
                "name": "j"
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "<anonymous>~j",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                789,
                804
            ],
            "filename": "xprod.js",
            "lineno": 31,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018346",
                "name": "jlen",
                "type": "MemberExpression",
                "value": "b.length"
            }
        },
        "undocumented": true,
        "name": "jlen",
        "longname": "<anonymous>~jlen",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                812,
                823
            ],
            "filename": "xprod.js",
            "lineno": 32,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018352",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                853,
                858
            ],
            "filename": "xprod.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018361",
                "name": "j",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "<anonymous>~j",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                890,
                928
            ],
            "filename": "xprod.js",
            "lineno": 38,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018370",
                "name": "result[undefined]",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[\"a[undefined]\",\"b[undefined]\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                936,
                942
            ],
            "filename": "xprod.js",
            "lineno": 39,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018384",
                "name": "j",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "<anonymous>~j",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                955,
                963
            ],
            "filename": "xprod.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018388",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                992,
                1014
            ],
            "filename": "xprod.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018394",
                "name": "module.exports",
                "type": "Identifier",
                "value": "xprod",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "zip.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018402",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */",
        "meta": {
            "range": [
                795,
                1005
            ],
            "filename": "zip.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018408",
                "name": "zip",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new list out of the two supplied by pairing up equally-positioned\nitems from both lists. The returned list is truncated to the length of the\nshorter of the two input lists.\nNote: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[a] -> [b] -> [[a,b]]",
                "value": "[a] -> [b] -> [[a,b]]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]",
                "value": "R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first array to consider.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second array to consider.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list made by pairing up same-indexed elements of `list1` and `list2`."
            }
        ],
        "examples": [
            "R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]"
        ],
        "name": "zip",
        "longname": "R.zip",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                850,
                857
            ],
            "filename": "zip.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018418",
                "name": "rv",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "rv",
        "longname": "<anonymous>~rv",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                865,
                872
            ],
            "filename": "zip.js",
            "lineno": 29,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018422",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                880,
                914
            ],
            "filename": "zip.js",
            "lineno": 30,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018426",
                "name": "len",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                943,
                969
            ],
            "filename": "zip.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018444",
                "name": "rv[undefined]",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[\"a[undefined]\",\"b[undefined]\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~rv.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~rv",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                975,
                983
            ],
            "filename": "zip.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018456",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1008,
                1028
            ],
            "filename": "zip.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018462",
                "name": "module.exports",
                "type": "Identifier",
                "value": "zip",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "zipObj.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018470",
                "name": "_curry2",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry2",
        "longname": "_curry2",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */",
        "meta": {
            "range": [
                711,
                947
            ],
            "filename": "zipObj.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018476",
                "name": "zipObj",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new object out of a list of keys and a list of values.\nKey/value pairing is truncated to the length of the shorter of the two lists.\nNote: `zipObj` is equivalent to `pipe(zip, fromPairs)`.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.3.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "[String] -> [*] -> {String: *}",
                "value": "[String] -> [*] -> {String: *}"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The array that will be properties on the output object.",
                "name": "keys"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list of values on the output object.",
                "name": "values"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object made by pairing up same-indexed elements of `keys` and `values`."
            }
        ],
        "examples": [
            "R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}"
        ],
        "name": "zipObj",
        "longname": "R.zipObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                780,
                787
            ],
            "filename": "zipObj.js",
            "lineno": 26,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018486",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                795,
                837
            ],
            "filename": "zipObj.js",
            "lineno": 27,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018490",
                "name": "len",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                845,
                853
            ],
            "filename": "zipObj.js",
            "lineno": 28,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018503",
                "name": "out",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                882,
                910
            ],
            "filename": "zipObj.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018512",
                "name": "out[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "values[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~out.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                916,
                924
            ],
            "filename": "zipObj.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018522",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                950,
                973
            ],
            "filename": "zipObj.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018528",
                "name": "module.exports",
                "type": "Identifier",
                "value": "zipObj",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                60
            ],
            "filename": "zipWith.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018536",
                "name": "_curry3",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_curry3",
        "longname": "_curry3",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @function\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> c) -> [a] -> [b] -> [c]\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n *         using `fn`.\n * @example\n *\n *      const f = (x, y) => {\n *        // ...\n *      };\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n */",
        "meta": {
            "range": [
                947,
                1171
            ],
            "filename": "zipWith.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018542",
                "name": "zipWith",
                "type": "CallExpression",
                "value": ""
            }
        },
        "description": "Creates a new list out of the two supplied by applying the function to each\nequally-positioned pair in the lists. The returned list is truncated to the\nlength of the shorter of the two input lists.",
        "kind": "function",
        "memberof": "R",
        "since": "v0.1.0",
        "tags": [
            {
                "originalTitle": "category",
                "title": "category",
                "text": "List",
                "value": "List"
            },
            {
                "originalTitle": "sig",
                "title": "sig",
                "text": "((a, b) -> c) -> [a] -> [b] -> [c]",
                "value": "((a, b) -> c) -> [a] -> [b] -> [c]"
            },
            {
                "originalTitle": "symb",
                "title": "symb",
                "text": "R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]",
                "value": "R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function used to combine the two elements into one value.",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The first array to consider.",
                "name": "list1"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The second array to consider.",
                "name": "list2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The list made by combining same-indexed elements of `list1` and `list2`\n        using `fn`."
            }
        ],
        "examples": [
            "const f = (x, y) => {\n       // ...\n     };\n     R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]"
        ],
        "name": "zipWith",
        "longname": "R.zipWith",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1014,
                1021
            ],
            "filename": "zipWith.js",
            "lineno": 33,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018553",
                "name": "rv",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "rv",
        "longname": "<anonymous>~rv",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1029,
                1036
            ],
            "filename": "zipWith.js",
            "lineno": 34,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018557",
                "name": "idx",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1044,
                1078
            ],
            "filename": "zipWith.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018561",
                "name": "len",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "len",
        "longname": "<anonymous>~len",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1107,
                1135
            ],
            "filename": "zipWith.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018579",
                "name": "rv[undefined]",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~rv.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~rv",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1141,
                1149
            ],
            "filename": "zipWith.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018592",
                "name": "idx",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "idx",
        "longname": "<anonymous>~idx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1174,
                1198
            ],
            "filename": "zipWith.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/tuomas/projects/media-arc/server/node_modules/ramda/src",
            "code": {
                "id": "astnode100018598",
                "name": "module.exports",
                "type": "Identifier",
                "value": "zipWith",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/F.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/T.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/add.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/addIndex.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/addIndexRight.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/adjust.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/all.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/allPass.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/always.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/and.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/andThen.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/any.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/anyPass.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/ap.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/aperture.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/append.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/apply.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/applySpec.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/applyTo.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/ascend.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/assoc.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/assocPath.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/binary.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/bind.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/both.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/call.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/chain.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/clamp.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/clone.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/collectBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/comparator.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/complement.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/compose.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/composeWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/concat.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/cond.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/construct.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/constructN.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/converge.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/count.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/countBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/curry.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/curryN.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dec.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/defaultTo.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/descend.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/difference.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/differenceWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dissoc.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dissocPath.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/divide.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/drop.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dropLast.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dropLastWhile.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dropRepeats.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dropRepeatsBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dropRepeatsWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/dropWhile.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/either.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/empty.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/endsWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/eqBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/eqProps.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/equals.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/evolve.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/filter.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/find.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/findIndex.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/findLast.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/findLastIndex.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/flatten.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/flip.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/forEach.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/forEachObjIndexed.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/fromPairs.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/groupBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/groupWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/gt.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/gte.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/has.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/hasIn.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/hasPath.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/head.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/identical.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/identity.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/ifElse.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/inc.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/includes.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/index.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/indexBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/indexOf.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/init.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/innerJoin.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/insert.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/insertAll.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/intersection.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/intersperse.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/into.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/invert.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/invertObj.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/invoker.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/is.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/isEmpty.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/isNil.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/isNotNil.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/join.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/juxt.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/keys.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/keysIn.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/last.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/lastIndexOf.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/length.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/lens.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/lensIndex.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/lensPath.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/lensProp.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/lift.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/liftN.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/lt.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/lte.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/map.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mapAccum.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mapAccumRight.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mapObjIndexed.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/match.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mathMod.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/max.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/maxBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mean.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/median.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/memoizeWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeAll.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeDeepLeft.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeDeepRight.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeDeepWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeDeepWithKey.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeLeft.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeRight.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/mergeWithKey.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/min.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/minBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/modify.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/modifyPath.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/modulo.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/move.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/multiply.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/nAry.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/negate.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/none.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/not.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/nth.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/nthArg.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/o.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/objOf.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/of.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/omit.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/on.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/once.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/or.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/otherwise.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/over.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pair.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/partial.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/partialObject.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/partialRight.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/partition.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/path.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pathEq.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pathOr.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pathSatisfies.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/paths.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pick.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pickAll.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pickBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pipe.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pipeWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/pluck.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/prepend.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/product.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/project.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/promap.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/prop.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/propEq.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/propIs.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/propOr.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/propSatisfies.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/props.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/range.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/reduce.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/reduceBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/reduceRight.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/reduceWhile.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/reduced.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/reject.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/remove.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/repeat.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/replace.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/reverse.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/scan.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/sequence.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/set.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/slice.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/sort.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/sortBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/sortWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/split.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/splitAt.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/splitEvery.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/splitWhen.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/splitWhenever.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/startsWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/subtract.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/sum.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/swap.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/symmetricDifference.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/symmetricDifferenceWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/tail.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/take.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/takeLast.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/takeLastWhile.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/takeWhile.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/tap.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/test.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/thunkify.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/times.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/toLower.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/toPairs.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/toPairsIn.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/toString.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/toUpper.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/transduce.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/transpose.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/traverse.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/trim.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/tryCatch.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/type.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/unapply.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/unary.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/uncurryN.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/unfold.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/union.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/unionWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/uniq.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/uniqBy.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/uniqWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/unless.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/unnest.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/until.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/unwind.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/update.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/useWith.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/values.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/valuesIn.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/view.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/when.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/where.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/whereAny.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/whereEq.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/without.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/xor.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/xprod.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/zip.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/zipObj.js",
            "/home/tuomas/projects/media-arc/server/node_modules/ramda/src/zipWith.js"
        ]
    }
]
