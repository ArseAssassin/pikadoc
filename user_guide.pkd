---
name: pikadoc user guide
version: 0.1.0
slug: pikadoc_user_guide~0.1.0
text_format: markdown
homepage: https://github.com/ArseAssassin/pikadoc
description: User guide for the pikadoc CLI
---
- name: 'Tutorial #1: What is PikaDoc?'
  kind: 'tutorial'
  description: |
    PikaDoc is a human-readable, structured documentation format. The `pikadoc` CLI is a tool for rapidly generating and reading `pkd` doctables with full text search capabilities.

    `pikadoc` runs inside a `nushell` environment, giving you powerful capabilities for querying and reading documentation. If you haven't used `nushell` before, you can learn more about it by typing `tutor`. You can then return to this tutorial by typing `doc tutor`.

- name: 'Tutorial #2: Reading pikadocs'
  kind: 'tutorial'
  description: |
    The simplest possible pikadoc command is `doc`. If you try running it now, you should see a notice telling you that no doctable has been selected for use. To change that, we can run a pikadoc generator to mount one:

    ```nushell
    doc src:nushell use doc
    ```

    The above command generates documentation for the `doc` nushell module. All pikadoc commands are exposed under this module. To get a list of all the commands, you can again run `doc`.

    ```nushell
    # Show a list of symbols in the current doctable
    doc
    ```


- name: 'Tutorial #3: Understanding the summary view'
  kind: 'tutorial'
  description: |
    When `doc` returns a doctable, instead of showing full documentation it shows you a summarized view of the documentation symbols found. By default, search results are limited to 20 - to show more results you can type in `doc more`.

    You can filter `doc` results by passing in a string as a query:

    ```nushell
    doc 'src:'
    ```

    The result list view includes the column `#` as the index of the symbol. To view the full text for a symbol, you can pass `#` as an argument to `doc`:

    ```nushell
    doc 0

    # You can also pipe the output to a pager to make reading longer decriptions easier:
    doc 0|less
    ```

- name: 'Tutorial #4: Finding and generating docs'
  kind: 'tutorial'
  description: |
    The PikaDoc central repository at the moment holds 150+ ready-made doctables for convenience. To get a list of available docs, you can type:

    ```nushell
    # Show a list of doctables available in the central repository
    doc s index
    ```

    To mount one of the doctables for use, you can type `doc s <name>`:

    ```nushell
    # Mount `javascript` documentation for use and shows symbols matching `Intl.dateTimeFormat`
    doc s 'javascript'
    doc 'Intl.dateTimeFormat'
    ```

    We can also use `src:github` to download documentation for any project on GitHub:

    ```nushell
    # Download and use files available in the pikadoc GitHub repo
    doc src:github use 'ArseAssassin/pikadoc'
    doc
    ```

    To remind yourself of doctables you've used recently, you can use `doc history`:

    ```nushell
    # Show a list of recently used doctables
    doc history
    ```

    To discover more generators, you can search for `doc` commands:

    ```nushell
    # Show a list of usable generators
    doc src:nushell use doc
    doc pkd-doctable|find src:|find use
    ```

    You can also use the `--help` flag to get help on any generator:

    ```nushell
    # Show usage instructions for `doc src:nushell`
    doc src:nushell use --help
    ```


- name: 'Tutorial #5: Advanced filtering'
  kind: 'tutorial'
  description: |
    Sometimes we can't find what we need by headlines alone. You can use `doc search` to search through entire symbol definitions:

    ```nushell
    # Show all symbols with `zip` in the description
    doc search 'zip'
    ```

    Sometimes it's useful to filter symbols by their header metadata. A closure can be passed to `doc` query any field in the full doctable.

    ```nushell
    # Show all tables with a column named `date`
    doc src:sqlite use ./path-to.db
    doc {|| where {'date' in ($in.columns|get name)}}
    ```

    When you query symbols with `doc`, the results are transformed to make them easier to read. `doc pkd-doctable` can be used to access raw symbols for planning queries for advanced filters:

    ```nushell
    # Get raw data for symbol 0 in current doctable
    doc pkd-doctable|get 0
    ```

    This covers the basics of reading and generating doctables using pikadoc. If you're curious about advanced usage, feel free to keep working through this tutorial.

- name: 'Tutorial appendix #1: Additional commands'
  kind: 'tutorial'
  description: |
    Here are some additional commands you might find useful:

    ```nushell
    # Save a doctable in the filesystem
    doc save './doctable.pkd'

    # Return a list of recently used doctables
    doc history

    # Return a list of doctables cached in the local filesystem
    doc cache

    # Delete cached doctables
    doc cache clear

    # Returns path to the directory used for storing cached doctables
    doc cache repository

    # Show metadata about the currently mounted doctable
    doc pkd-about
    ```
