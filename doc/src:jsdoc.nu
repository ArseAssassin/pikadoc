def parse-type [] {
  let value = $in
  {
    name: $value.name?
    type: $value.type?.names?.0?
    description: $value.description?
  }
}

# Parses json generated by jsdoc to generate a new doctable.
#
# `in`: should be a `jsdoc` generated JSON document
#
# Example: `doc use (npx jsdoc -X <path to source directory>|doc src:javascript parse-from-jsdoc)`
def parse-from-jsdoc [] {
  from json
  |where undocumented? != true and kind? != 'package'
  |each {
    |row| {
      name: ($row.longname?),
      summary: ($row.description?|default ""|split row "."|get 0?),
      signatures: (if ($row.params? != null) {
        [(
          $row.params
          |each { parse-type }
          |append (if ($row.returns?.0? != null) {
            $row.returns.0|parse-type
          } else {
            []
          })
        )]
      })
      description: $row.description?
      kind: $row.kind?
      source: $row.comment?
      examples: (
        $row.examples?
        |default []
        |each {$"```javascript\n($in)\n```"}
      )
      ns: $row.memberof?
    }
  }
}

# Uses `jsdoc` to generate a doctable from `filepath` and selects is the current doctable
#
# Make sure that `jsdoc` is installed in your `PATH` to use this command.
#
# `filepath` is a path to the source directory to generate docs from
#
# Example: doc src:javascript use "./node_modules/express/lib/"
export def --env use [filepath:string] {
  do --env $env.DOC_USE {{
    about: {
      name: $filepath
      text_format: 'markdown'
      generator: 'src:jsdoc'
      generator_command: $"doc src:jsdoc use ($filepath|to nuon)"
    }
    doctable: (run-external $"($env.PKD_HOME)/doc/jsdoc-run" $filepath|parse-from-jsdoc)
  }}
}